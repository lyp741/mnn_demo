// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/KoalaAI_C2G.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fKoalaAI_5fC2G_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fKoalaAI_5fC2G_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fKoalaAI_5fC2G_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fKoalaAI_5fC2G_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fKoalaAI_5fC2G_2eproto;
namespace msg {
namespace c2g {
class AIActionMessage;
struct AIActionMessageDefaultTypeInternal;
extern AIActionMessageDefaultTypeInternal _AIActionMessage_default_instance_;
class AIServerMessage;
struct AIServerMessageDefaultTypeInternal;
extern AIServerMessageDefaultTypeInternal _AIServerMessage_default_instance_;
class AgentInitOption;
struct AgentInitOptionDefaultTypeInternal;
extern AgentInitOptionDefaultTypeInternal _AgentInitOption_default_instance_;
class GameConfigure;
struct GameConfigureDefaultTypeInternal;
extern GameConfigureDefaultTypeInternal _GameConfigure_default_instance_;
class LinkReq;
struct LinkReqDefaultTypeInternal;
extern LinkReqDefaultTypeInternal _LinkReq_default_instance_;
class Vector2D;
struct Vector2DDefaultTypeInternal;
extern Vector2DDefaultTypeInternal _Vector2D_default_instance_;
class Vector3D;
struct Vector3DDefaultTypeInternal;
extern Vector3DDefaultTypeInternal _Vector3D_default_instance_;
}  // namespace c2g
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::c2g::AIActionMessage* Arena::CreateMaybeMessage<::msg::c2g::AIActionMessage>(Arena*);
template<> ::msg::c2g::AIServerMessage* Arena::CreateMaybeMessage<::msg::c2g::AIServerMessage>(Arena*);
template<> ::msg::c2g::AgentInitOption* Arena::CreateMaybeMessage<::msg::c2g::AgentInitOption>(Arena*);
template<> ::msg::c2g::GameConfigure* Arena::CreateMaybeMessage<::msg::c2g::GameConfigure>(Arena*);
template<> ::msg::c2g::LinkReq* Arena::CreateMaybeMessage<::msg::c2g::LinkReq>(Arena*);
template<> ::msg::c2g::Vector2D* Arena::CreateMaybeMessage<::msg::c2g::Vector2D>(Arena*);
template<> ::msg::c2g::Vector3D* Arena::CreateMaybeMessage<::msg::c2g::Vector3D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {
namespace c2g {

enum CMD2G : int {
  CMD2G_LINK_REQ = 0,
  CMD2G_A_I_SERVER_MESSAGE = 1,
  CMD2G_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CMD2G_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CMD2G_IsValid(int value);
constexpr CMD2G CMD2G_MIN = CMD2G_LINK_REQ;
constexpr CMD2G CMD2G_MAX = CMD2G_A_I_SERVER_MESSAGE;
constexpr int CMD2G_ARRAYSIZE = CMD2G_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMD2G_descriptor();
template<typename T>
inline const std::string& CMD2G_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMD2G>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMD2G_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMD2G_descriptor(), enum_t_value);
}
inline bool CMD2G_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMD2G* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMD2G>(
    CMD2G_descriptor(), name, value);
}
enum AIServerMsgType : int {
  GAME_GLOBAL_INFO_REQ = 0,
  CHOOSE_MAP = 1,
  GAME_INIT_REQ = 2,
  ACTION_REQ = 3,
  AIServerMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AIServerMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AIServerMsgType_IsValid(int value);
constexpr AIServerMsgType AIServerMsgType_MIN = GAME_GLOBAL_INFO_REQ;
constexpr AIServerMsgType AIServerMsgType_MAX = ACTION_REQ;
constexpr int AIServerMsgType_ARRAYSIZE = AIServerMsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIServerMsgType_descriptor();
template<typename T>
inline const std::string& AIServerMsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AIServerMsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AIServerMsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AIServerMsgType_descriptor(), enum_t_value);
}
inline bool AIServerMsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AIServerMsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AIServerMsgType>(
    AIServerMsgType_descriptor(), name, value);
}
// ===================================================================

class LinkReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.c2g.LinkReq) */ {
 public:
  inline LinkReq() : LinkReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR LinkReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkReq(const LinkReq& from);
  LinkReq(LinkReq&& from) noexcept
    : LinkReq() {
    *this = ::std::move(from);
  }

  inline LinkReq& operator=(const LinkReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkReq& operator=(LinkReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkReq* internal_default_instance() {
    return reinterpret_cast<const LinkReq*>(
               &_LinkReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LinkReq& a, LinkReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LinkReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LinkReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.c2g.LinkReq";
  }
  protected:
  explicit LinkReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.c2g.LinkReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_proto_2fKoalaAI_5fC2G_2eproto;
};
// -------------------------------------------------------------------

class Vector2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.c2g.Vector2D) */ {
 public:
  inline Vector2D() : Vector2D(nullptr) {}
  ~Vector2D() override;
  explicit PROTOBUF_CONSTEXPR Vector2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2D(const Vector2D& from);
  Vector2D(Vector2D&& from) noexcept
    : Vector2D() {
    *this = ::std::move(from);
  }

  inline Vector2D& operator=(const Vector2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2D& operator=(Vector2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2D* internal_default_instance() {
    return reinterpret_cast<const Vector2D*>(
               &_Vector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector2D& a, Vector2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector2D& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.c2g.Vector2D";
  }
  protected:
  explicit Vector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:msg.c2g.Vector2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fKoalaAI_5fC2G_2eproto;
};
// -------------------------------------------------------------------

class Vector3D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.c2g.Vector3D) */ {
 public:
  inline Vector3D() : Vector3D(nullptr) {}
  ~Vector3D() override;
  explicit PROTOBUF_CONSTEXPR Vector3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3D(const Vector3D& from);
  Vector3D(Vector3D&& from) noexcept
    : Vector3D() {
    *this = ::std::move(from);
  }

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3D& operator=(Vector3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3D* internal_default_instance() {
    return reinterpret_cast<const Vector3D*>(
               &_Vector3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector3D& a, Vector3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector3D& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.c2g.Vector3D";
  }
  protected:
  explicit Vector3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:msg.c2g.Vector3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fKoalaAI_5fC2G_2eproto;
};
// -------------------------------------------------------------------

class GameConfigure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.c2g.GameConfigure) */ {
 public:
  inline GameConfigure() : GameConfigure(nullptr) {}
  ~GameConfigure() override;
  explicit PROTOBUF_CONSTEXPR GameConfigure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameConfigure(const GameConfigure& from);
  GameConfigure(GameConfigure&& from) noexcept
    : GameConfigure() {
    *this = ::std::move(from);
  }

  inline GameConfigure& operator=(const GameConfigure& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameConfigure& operator=(GameConfigure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameConfigure& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameConfigure* internal_default_instance() {
    return reinterpret_cast<const GameConfigure*>(
               &_GameConfigure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameConfigure& a, GameConfigure& b) {
    a.Swap(&b);
  }
  inline void Swap(GameConfigure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameConfigure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameConfigure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameConfigure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameConfigure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameConfigure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameConfigure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.c2g.GameConfigure";
  }
  protected:
  explicit GameConfigure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentInitOptionsFieldNumber = 3,
    kMapIdFieldNumber = 1,
    kNumOfAIFieldNumber = 2,
  };
  // repeated .msg.c2g.AgentInitOption agentInitOptions = 3;
  int agentinitoptions_size() const;
  private:
  int _internal_agentinitoptions_size() const;
  public:
  void clear_agentinitoptions();
  ::msg::c2g::AgentInitOption* mutable_agentinitoptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::c2g::AgentInitOption >*
      mutable_agentinitoptions();
  private:
  const ::msg::c2g::AgentInitOption& _internal_agentinitoptions(int index) const;
  ::msg::c2g::AgentInitOption* _internal_add_agentinitoptions();
  public:
  const ::msg::c2g::AgentInitOption& agentinitoptions(int index) const;
  ::msg::c2g::AgentInitOption* add_agentinitoptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::c2g::AgentInitOption >&
      agentinitoptions() const;

  // uint32 mapId = 1;
  void clear_mapid();
  uint32_t mapid() const;
  void set_mapid(uint32_t value);
  private:
  uint32_t _internal_mapid() const;
  void _internal_set_mapid(uint32_t value);
  public:

  // uint32 numOfAI = 2;
  void clear_numofai();
  uint32_t numofai() const;
  void set_numofai(uint32_t value);
  private:
  uint32_t _internal_numofai() const;
  void _internal_set_numofai(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.c2g.GameConfigure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::c2g::AgentInitOption > agentinitoptions_;
  uint32_t mapid_;
  uint32_t numofai_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fKoalaAI_5fC2G_2eproto;
};
// -------------------------------------------------------------------

class AgentInitOption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.c2g.AgentInitOption) */ {
 public:
  inline AgentInitOption() : AgentInitOption(nullptr) {}
  ~AgentInitOption() override;
  explicit PROTOBUF_CONSTEXPR AgentInitOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentInitOption(const AgentInitOption& from);
  AgentInitOption(AgentInitOption&& from) noexcept
    : AgentInitOption() {
    *this = ::std::move(from);
  }

  inline AgentInitOption& operator=(const AgentInitOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentInitOption& operator=(AgentInitOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentInitOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentInitOption* internal_default_instance() {
    return reinterpret_cast<const AgentInitOption*>(
               &_AgentInitOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AgentInitOption& a, AgentInitOption& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentInitOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentInitOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentInitOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentInitOption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentInitOption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgentInitOption& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentInitOption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.c2g.AgentInitOption";
  }
  protected:
  explicit AgentInitOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPositionFieldNumber = 5,
    kVelocityFieldNumber = 7,
    kAgentIdFieldNumber = 1,
    kStartTypeFieldNumber = 2,
    kTargetPointLevelFieldNumber = 3,
    kSavePointIdFieldNumber = 6,
    kTargetPointIndexFieldNumber = 4,
  };
  // .msg.c2g.Vector3D startPosition = 5;
  bool has_startposition() const;
  private:
  bool _internal_has_startposition() const;
  public:
  void clear_startposition();
  const ::msg::c2g::Vector3D& startposition() const;
  PROTOBUF_NODISCARD ::msg::c2g::Vector3D* release_startposition();
  ::msg::c2g::Vector3D* mutable_startposition();
  void set_allocated_startposition(::msg::c2g::Vector3D* startposition);
  private:
  const ::msg::c2g::Vector3D& _internal_startposition() const;
  ::msg::c2g::Vector3D* _internal_mutable_startposition();
  public:
  void unsafe_arena_set_allocated_startposition(
      ::msg::c2g::Vector3D* startposition);
  ::msg::c2g::Vector3D* unsafe_arena_release_startposition();

  // .msg.c2g.Vector3D velocity = 7;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::msg::c2g::Vector3D& velocity() const;
  PROTOBUF_NODISCARD ::msg::c2g::Vector3D* release_velocity();
  ::msg::c2g::Vector3D* mutable_velocity();
  void set_allocated_velocity(::msg::c2g::Vector3D* velocity);
  private:
  const ::msg::c2g::Vector3D& _internal_velocity() const;
  ::msg::c2g::Vector3D* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::msg::c2g::Vector3D* velocity);
  ::msg::c2g::Vector3D* unsafe_arena_release_velocity();

  // uint64 agentId = 1;
  void clear_agentid();
  uint64_t agentid() const;
  void set_agentid(uint64_t value);
  private:
  uint64_t _internal_agentid() const;
  void _internal_set_agentid(uint64_t value);
  public:

  // uint32 startType = 2;
  void clear_starttype();
  uint32_t starttype() const;
  void set_starttype(uint32_t value);
  private:
  uint32_t _internal_starttype() const;
  void _internal_set_starttype(uint32_t value);
  public:

  // uint32 targetPointLevel = 3;
  void clear_targetpointlevel();
  uint32_t targetpointlevel() const;
  void set_targetpointlevel(uint32_t value);
  private:
  uint32_t _internal_targetpointlevel() const;
  void _internal_set_targetpointlevel(uint32_t value);
  public:

  // uint64 savePointId = 6;
  void clear_savepointid();
  uint64_t savepointid() const;
  void set_savepointid(uint64_t value);
  private:
  uint64_t _internal_savepointid() const;
  void _internal_set_savepointid(uint64_t value);
  public:

  // uint32 targetPointIndex = 4;
  void clear_targetpointindex();
  uint32_t targetpointindex() const;
  void set_targetpointindex(uint32_t value);
  private:
  uint32_t _internal_targetpointindex() const;
  void _internal_set_targetpointindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.c2g.AgentInitOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::c2g::Vector3D* startposition_;
  ::msg::c2g::Vector3D* velocity_;
  uint64_t agentid_;
  uint32_t starttype_;
  uint32_t targetpointlevel_;
  uint64_t savepointid_;
  uint32_t targetpointindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fKoalaAI_5fC2G_2eproto;
};
// -------------------------------------------------------------------

class AIActionMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.c2g.AIActionMessage) */ {
 public:
  inline AIActionMessage() : AIActionMessage(nullptr) {}
  ~AIActionMessage() override;
  explicit PROTOBUF_CONSTEXPR AIActionMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AIActionMessage(const AIActionMessage& from);
  AIActionMessage(AIActionMessage&& from) noexcept
    : AIActionMessage() {
    *this = ::std::move(from);
  }

  inline AIActionMessage& operator=(const AIActionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIActionMessage& operator=(AIActionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AIActionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AIActionMessage* internal_default_instance() {
    return reinterpret_cast<const AIActionMessage*>(
               &_AIActionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AIActionMessage& a, AIActionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AIActionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AIActionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AIActionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AIActionMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AIActionMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AIActionMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIActionMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.c2g.AIActionMessage";
  }
  protected:
  explicit AIActionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsTypeFieldNumber = 3,
    kMoveDirFieldNumber = 2,
    kPropDirFieldNumber = 4,
    kAgentIdFieldNumber = 1,
    kPauseStateFieldNumber = 5,
  };
  // repeated uint32 actionsType = 3;
  int actionstype_size() const;
  private:
  int _internal_actionstype_size() const;
  public:
  void clear_actionstype();
  private:
  uint32_t _internal_actionstype(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_actionstype() const;
  void _internal_add_actionstype(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_actionstype();
  public:
  uint32_t actionstype(int index) const;
  void set_actionstype(int index, uint32_t value);
  void add_actionstype(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      actionstype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_actionstype();

  // .msg.c2g.Vector2D moveDir = 2;
  bool has_movedir() const;
  private:
  bool _internal_has_movedir() const;
  public:
  void clear_movedir();
  const ::msg::c2g::Vector2D& movedir() const;
  PROTOBUF_NODISCARD ::msg::c2g::Vector2D* release_movedir();
  ::msg::c2g::Vector2D* mutable_movedir();
  void set_allocated_movedir(::msg::c2g::Vector2D* movedir);
  private:
  const ::msg::c2g::Vector2D& _internal_movedir() const;
  ::msg::c2g::Vector2D* _internal_mutable_movedir();
  public:
  void unsafe_arena_set_allocated_movedir(
      ::msg::c2g::Vector2D* movedir);
  ::msg::c2g::Vector2D* unsafe_arena_release_movedir();

  // .msg.c2g.Vector2D propDir = 4;
  bool has_propdir() const;
  private:
  bool _internal_has_propdir() const;
  public:
  void clear_propdir();
  const ::msg::c2g::Vector2D& propdir() const;
  PROTOBUF_NODISCARD ::msg::c2g::Vector2D* release_propdir();
  ::msg::c2g::Vector2D* mutable_propdir();
  void set_allocated_propdir(::msg::c2g::Vector2D* propdir);
  private:
  const ::msg::c2g::Vector2D& _internal_propdir() const;
  ::msg::c2g::Vector2D* _internal_mutable_propdir();
  public:
  void unsafe_arena_set_allocated_propdir(
      ::msg::c2g::Vector2D* propdir);
  ::msg::c2g::Vector2D* unsafe_arena_release_propdir();

  // uint64 agentId = 1;
  void clear_agentid();
  uint64_t agentid() const;
  void set_agentid(uint64_t value);
  private:
  uint64_t _internal_agentid() const;
  void _internal_set_agentid(uint64_t value);
  public:

  // bool pauseState = 5;
  void clear_pausestate();
  bool pausestate() const;
  void set_pausestate(bool value);
  private:
  bool _internal_pausestate() const;
  void _internal_set_pausestate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.c2g.AIActionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > actionstype_;
  mutable std::atomic<int> _actionstype_cached_byte_size_;
  ::msg::c2g::Vector2D* movedir_;
  ::msg::c2g::Vector2D* propdir_;
  uint64_t agentid_;
  bool pausestate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fKoalaAI_5fC2G_2eproto;
};
// -------------------------------------------------------------------

class AIServerMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.c2g.AIServerMessage) */ {
 public:
  inline AIServerMessage() : AIServerMessage(nullptr) {}
  ~AIServerMessage() override;
  explicit PROTOBUF_CONSTEXPR AIServerMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AIServerMessage(const AIServerMessage& from);
  AIServerMessage(AIServerMessage&& from) noexcept
    : AIServerMessage() {
    *this = ::std::move(from);
  }

  inline AIServerMessage& operator=(const AIServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIServerMessage& operator=(AIServerMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AIServerMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AIServerMessage* internal_default_instance() {
    return reinterpret_cast<const AIServerMessage*>(
               &_AIServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AIServerMessage& a, AIServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AIServerMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AIServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AIServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AIServerMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AIServerMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AIServerMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIServerMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.c2g.AIServerMessage";
  }
  protected:
  explicit AIServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionOfAIsFieldNumber = 3,
    kGameConfigFieldNumber = 2,
    kMessageTypeFieldNumber = 1,
    kPauseAgentsFieldNumber = 4,
  };
  // repeated .msg.c2g.AIActionMessage actionOfAIs = 3;
  int actionofais_size() const;
  private:
  int _internal_actionofais_size() const;
  public:
  void clear_actionofais();
  ::msg::c2g::AIActionMessage* mutable_actionofais(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::c2g::AIActionMessage >*
      mutable_actionofais();
  private:
  const ::msg::c2g::AIActionMessage& _internal_actionofais(int index) const;
  ::msg::c2g::AIActionMessage* _internal_add_actionofais();
  public:
  const ::msg::c2g::AIActionMessage& actionofais(int index) const;
  ::msg::c2g::AIActionMessage* add_actionofais();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::c2g::AIActionMessage >&
      actionofais() const;

  // .msg.c2g.GameConfigure gameConfig = 2;
  bool has_gameconfig() const;
  private:
  bool _internal_has_gameconfig() const;
  public:
  void clear_gameconfig();
  const ::msg::c2g::GameConfigure& gameconfig() const;
  PROTOBUF_NODISCARD ::msg::c2g::GameConfigure* release_gameconfig();
  ::msg::c2g::GameConfigure* mutable_gameconfig();
  void set_allocated_gameconfig(::msg::c2g::GameConfigure* gameconfig);
  private:
  const ::msg::c2g::GameConfigure& _internal_gameconfig() const;
  ::msg::c2g::GameConfigure* _internal_mutable_gameconfig();
  public:
  void unsafe_arena_set_allocated_gameconfig(
      ::msg::c2g::GameConfigure* gameconfig);
  ::msg::c2g::GameConfigure* unsafe_arena_release_gameconfig();

  // .msg.c2g.AIServerMsgType messageType = 1;
  void clear_messagetype();
  ::msg::c2g::AIServerMsgType messagetype() const;
  void set_messagetype(::msg::c2g::AIServerMsgType value);
  private:
  ::msg::c2g::AIServerMsgType _internal_messagetype() const;
  void _internal_set_messagetype(::msg::c2g::AIServerMsgType value);
  public:

  // bool pauseAgents = 4;
  void clear_pauseagents();
  bool pauseagents() const;
  void set_pauseagents(bool value);
  private:
  bool _internal_pauseagents() const;
  void _internal_set_pauseagents(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.c2g.AIServerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::c2g::AIActionMessage > actionofais_;
  ::msg::c2g::GameConfigure* gameconfig_;
  int messagetype_;
  bool pauseagents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fKoalaAI_5fC2G_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LinkReq

// -------------------------------------------------------------------

// Vector2D

// float x = 1;
inline void Vector2D::clear_x() {
  x_ = 0;
}
inline float Vector2D::_internal_x() const {
  return x_;
}
inline float Vector2D::x() const {
  // @@protoc_insertion_point(field_get:msg.c2g.Vector2D.x)
  return _internal_x();
}
inline void Vector2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msg.c2g.Vector2D.x)
}

// float y = 2;
inline void Vector2D::clear_y() {
  y_ = 0;
}
inline float Vector2D::_internal_y() const {
  return y_;
}
inline float Vector2D::y() const {
  // @@protoc_insertion_point(field_get:msg.c2g.Vector2D.y)
  return _internal_y();
}
inline void Vector2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msg.c2g.Vector2D.y)
}

// -------------------------------------------------------------------

// Vector3D

// float x = 1;
inline void Vector3D::clear_x() {
  x_ = 0;
}
inline float Vector3D::_internal_x() const {
  return x_;
}
inline float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:msg.c2g.Vector3D.x)
  return _internal_x();
}
inline void Vector3D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msg.c2g.Vector3D.x)
}

// float y = 2;
inline void Vector3D::clear_y() {
  y_ = 0;
}
inline float Vector3D::_internal_y() const {
  return y_;
}
inline float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:msg.c2g.Vector3D.y)
  return _internal_y();
}
inline void Vector3D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msg.c2g.Vector3D.y)
}

// float z = 3;
inline void Vector3D::clear_z() {
  z_ = 0;
}
inline float Vector3D::_internal_z() const {
  return z_;
}
inline float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:msg.c2g.Vector3D.z)
  return _internal_z();
}
inline void Vector3D::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3D::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:msg.c2g.Vector3D.z)
}

// -------------------------------------------------------------------

// GameConfigure

// uint32 mapId = 1;
inline void GameConfigure::clear_mapid() {
  mapid_ = 0u;
}
inline uint32_t GameConfigure::_internal_mapid() const {
  return mapid_;
}
inline uint32_t GameConfigure::mapid() const {
  // @@protoc_insertion_point(field_get:msg.c2g.GameConfigure.mapId)
  return _internal_mapid();
}
inline void GameConfigure::_internal_set_mapid(uint32_t value) {
  
  mapid_ = value;
}
inline void GameConfigure::set_mapid(uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:msg.c2g.GameConfigure.mapId)
}

// uint32 numOfAI = 2;
inline void GameConfigure::clear_numofai() {
  numofai_ = 0u;
}
inline uint32_t GameConfigure::_internal_numofai() const {
  return numofai_;
}
inline uint32_t GameConfigure::numofai() const {
  // @@protoc_insertion_point(field_get:msg.c2g.GameConfigure.numOfAI)
  return _internal_numofai();
}
inline void GameConfigure::_internal_set_numofai(uint32_t value) {
  
  numofai_ = value;
}
inline void GameConfigure::set_numofai(uint32_t value) {
  _internal_set_numofai(value);
  // @@protoc_insertion_point(field_set:msg.c2g.GameConfigure.numOfAI)
}

// repeated .msg.c2g.AgentInitOption agentInitOptions = 3;
inline int GameConfigure::_internal_agentinitoptions_size() const {
  return agentinitoptions_.size();
}
inline int GameConfigure::agentinitoptions_size() const {
  return _internal_agentinitoptions_size();
}
inline void GameConfigure::clear_agentinitoptions() {
  agentinitoptions_.Clear();
}
inline ::msg::c2g::AgentInitOption* GameConfigure::mutable_agentinitoptions(int index) {
  // @@protoc_insertion_point(field_mutable:msg.c2g.GameConfigure.agentInitOptions)
  return agentinitoptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::c2g::AgentInitOption >*
GameConfigure::mutable_agentinitoptions() {
  // @@protoc_insertion_point(field_mutable_list:msg.c2g.GameConfigure.agentInitOptions)
  return &agentinitoptions_;
}
inline const ::msg::c2g::AgentInitOption& GameConfigure::_internal_agentinitoptions(int index) const {
  return agentinitoptions_.Get(index);
}
inline const ::msg::c2g::AgentInitOption& GameConfigure::agentinitoptions(int index) const {
  // @@protoc_insertion_point(field_get:msg.c2g.GameConfigure.agentInitOptions)
  return _internal_agentinitoptions(index);
}
inline ::msg::c2g::AgentInitOption* GameConfigure::_internal_add_agentinitoptions() {
  return agentinitoptions_.Add();
}
inline ::msg::c2g::AgentInitOption* GameConfigure::add_agentinitoptions() {
  ::msg::c2g::AgentInitOption* _add = _internal_add_agentinitoptions();
  // @@protoc_insertion_point(field_add:msg.c2g.GameConfigure.agentInitOptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::c2g::AgentInitOption >&
GameConfigure::agentinitoptions() const {
  // @@protoc_insertion_point(field_list:msg.c2g.GameConfigure.agentInitOptions)
  return agentinitoptions_;
}

// -------------------------------------------------------------------

// AgentInitOption

// uint64 agentId = 1;
inline void AgentInitOption::clear_agentid() {
  agentid_ = uint64_t{0u};
}
inline uint64_t AgentInitOption::_internal_agentid() const {
  return agentid_;
}
inline uint64_t AgentInitOption::agentid() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AgentInitOption.agentId)
  return _internal_agentid();
}
inline void AgentInitOption::_internal_set_agentid(uint64_t value) {
  
  agentid_ = value;
}
inline void AgentInitOption::set_agentid(uint64_t value) {
  _internal_set_agentid(value);
  // @@protoc_insertion_point(field_set:msg.c2g.AgentInitOption.agentId)
}

// uint32 startType = 2;
inline void AgentInitOption::clear_starttype() {
  starttype_ = 0u;
}
inline uint32_t AgentInitOption::_internal_starttype() const {
  return starttype_;
}
inline uint32_t AgentInitOption::starttype() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AgentInitOption.startType)
  return _internal_starttype();
}
inline void AgentInitOption::_internal_set_starttype(uint32_t value) {
  
  starttype_ = value;
}
inline void AgentInitOption::set_starttype(uint32_t value) {
  _internal_set_starttype(value);
  // @@protoc_insertion_point(field_set:msg.c2g.AgentInitOption.startType)
}

// uint32 targetPointLevel = 3;
inline void AgentInitOption::clear_targetpointlevel() {
  targetpointlevel_ = 0u;
}
inline uint32_t AgentInitOption::_internal_targetpointlevel() const {
  return targetpointlevel_;
}
inline uint32_t AgentInitOption::targetpointlevel() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AgentInitOption.targetPointLevel)
  return _internal_targetpointlevel();
}
inline void AgentInitOption::_internal_set_targetpointlevel(uint32_t value) {
  
  targetpointlevel_ = value;
}
inline void AgentInitOption::set_targetpointlevel(uint32_t value) {
  _internal_set_targetpointlevel(value);
  // @@protoc_insertion_point(field_set:msg.c2g.AgentInitOption.targetPointLevel)
}

// uint32 targetPointIndex = 4;
inline void AgentInitOption::clear_targetpointindex() {
  targetpointindex_ = 0u;
}
inline uint32_t AgentInitOption::_internal_targetpointindex() const {
  return targetpointindex_;
}
inline uint32_t AgentInitOption::targetpointindex() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AgentInitOption.targetPointIndex)
  return _internal_targetpointindex();
}
inline void AgentInitOption::_internal_set_targetpointindex(uint32_t value) {
  
  targetpointindex_ = value;
}
inline void AgentInitOption::set_targetpointindex(uint32_t value) {
  _internal_set_targetpointindex(value);
  // @@protoc_insertion_point(field_set:msg.c2g.AgentInitOption.targetPointIndex)
}

// .msg.c2g.Vector3D startPosition = 5;
inline bool AgentInitOption::_internal_has_startposition() const {
  return this != internal_default_instance() && startposition_ != nullptr;
}
inline bool AgentInitOption::has_startposition() const {
  return _internal_has_startposition();
}
inline void AgentInitOption::clear_startposition() {
  if (GetArenaForAllocation() == nullptr && startposition_ != nullptr) {
    delete startposition_;
  }
  startposition_ = nullptr;
}
inline const ::msg::c2g::Vector3D& AgentInitOption::_internal_startposition() const {
  const ::msg::c2g::Vector3D* p = startposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::c2g::Vector3D&>(
      ::msg::c2g::_Vector3D_default_instance_);
}
inline const ::msg::c2g::Vector3D& AgentInitOption::startposition() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AgentInitOption.startPosition)
  return _internal_startposition();
}
inline void AgentInitOption::unsafe_arena_set_allocated_startposition(
    ::msg::c2g::Vector3D* startposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startposition_);
  }
  startposition_ = startposition;
  if (startposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.c2g.AgentInitOption.startPosition)
}
inline ::msg::c2g::Vector3D* AgentInitOption::release_startposition() {
  
  ::msg::c2g::Vector3D* temp = startposition_;
  startposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::c2g::Vector3D* AgentInitOption::unsafe_arena_release_startposition() {
  // @@protoc_insertion_point(field_release:msg.c2g.AgentInitOption.startPosition)
  
  ::msg::c2g::Vector3D* temp = startposition_;
  startposition_ = nullptr;
  return temp;
}
inline ::msg::c2g::Vector3D* AgentInitOption::_internal_mutable_startposition() {
  
  if (startposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::c2g::Vector3D>(GetArenaForAllocation());
    startposition_ = p;
  }
  return startposition_;
}
inline ::msg::c2g::Vector3D* AgentInitOption::mutable_startposition() {
  ::msg::c2g::Vector3D* _msg = _internal_mutable_startposition();
  // @@protoc_insertion_point(field_mutable:msg.c2g.AgentInitOption.startPosition)
  return _msg;
}
inline void AgentInitOption::set_allocated_startposition(::msg::c2g::Vector3D* startposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete startposition_;
  }
  if (startposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(startposition);
    if (message_arena != submessage_arena) {
      startposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startposition, submessage_arena);
    }
    
  } else {
    
  }
  startposition_ = startposition;
  // @@protoc_insertion_point(field_set_allocated:msg.c2g.AgentInitOption.startPosition)
}

// uint64 savePointId = 6;
inline void AgentInitOption::clear_savepointid() {
  savepointid_ = uint64_t{0u};
}
inline uint64_t AgentInitOption::_internal_savepointid() const {
  return savepointid_;
}
inline uint64_t AgentInitOption::savepointid() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AgentInitOption.savePointId)
  return _internal_savepointid();
}
inline void AgentInitOption::_internal_set_savepointid(uint64_t value) {
  
  savepointid_ = value;
}
inline void AgentInitOption::set_savepointid(uint64_t value) {
  _internal_set_savepointid(value);
  // @@protoc_insertion_point(field_set:msg.c2g.AgentInitOption.savePointId)
}

// .msg.c2g.Vector3D velocity = 7;
inline bool AgentInitOption::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool AgentInitOption::has_velocity() const {
  return _internal_has_velocity();
}
inline void AgentInitOption::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::msg::c2g::Vector3D& AgentInitOption::_internal_velocity() const {
  const ::msg::c2g::Vector3D* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::c2g::Vector3D&>(
      ::msg::c2g::_Vector3D_default_instance_);
}
inline const ::msg::c2g::Vector3D& AgentInitOption::velocity() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AgentInitOption.velocity)
  return _internal_velocity();
}
inline void AgentInitOption::unsafe_arena_set_allocated_velocity(
    ::msg::c2g::Vector3D* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.c2g.AgentInitOption.velocity)
}
inline ::msg::c2g::Vector3D* AgentInitOption::release_velocity() {
  
  ::msg::c2g::Vector3D* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::c2g::Vector3D* AgentInitOption::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:msg.c2g.AgentInitOption.velocity)
  
  ::msg::c2g::Vector3D* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::msg::c2g::Vector3D* AgentInitOption::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::c2g::Vector3D>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::msg::c2g::Vector3D* AgentInitOption::mutable_velocity() {
  ::msg::c2g::Vector3D* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:msg.c2g.AgentInitOption.velocity)
  return _msg;
}
inline void AgentInitOption::set_allocated_velocity(::msg::c2g::Vector3D* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:msg.c2g.AgentInitOption.velocity)
}

// -------------------------------------------------------------------

// AIActionMessage

// uint64 agentId = 1;
inline void AIActionMessage::clear_agentid() {
  agentid_ = uint64_t{0u};
}
inline uint64_t AIActionMessage::_internal_agentid() const {
  return agentid_;
}
inline uint64_t AIActionMessage::agentid() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AIActionMessage.agentId)
  return _internal_agentid();
}
inline void AIActionMessage::_internal_set_agentid(uint64_t value) {
  
  agentid_ = value;
}
inline void AIActionMessage::set_agentid(uint64_t value) {
  _internal_set_agentid(value);
  // @@protoc_insertion_point(field_set:msg.c2g.AIActionMessage.agentId)
}

// .msg.c2g.Vector2D moveDir = 2;
inline bool AIActionMessage::_internal_has_movedir() const {
  return this != internal_default_instance() && movedir_ != nullptr;
}
inline bool AIActionMessage::has_movedir() const {
  return _internal_has_movedir();
}
inline void AIActionMessage::clear_movedir() {
  if (GetArenaForAllocation() == nullptr && movedir_ != nullptr) {
    delete movedir_;
  }
  movedir_ = nullptr;
}
inline const ::msg::c2g::Vector2D& AIActionMessage::_internal_movedir() const {
  const ::msg::c2g::Vector2D* p = movedir_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::c2g::Vector2D&>(
      ::msg::c2g::_Vector2D_default_instance_);
}
inline const ::msg::c2g::Vector2D& AIActionMessage::movedir() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AIActionMessage.moveDir)
  return _internal_movedir();
}
inline void AIActionMessage::unsafe_arena_set_allocated_movedir(
    ::msg::c2g::Vector2D* movedir) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movedir_);
  }
  movedir_ = movedir;
  if (movedir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.c2g.AIActionMessage.moveDir)
}
inline ::msg::c2g::Vector2D* AIActionMessage::release_movedir() {
  
  ::msg::c2g::Vector2D* temp = movedir_;
  movedir_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::c2g::Vector2D* AIActionMessage::unsafe_arena_release_movedir() {
  // @@protoc_insertion_point(field_release:msg.c2g.AIActionMessage.moveDir)
  
  ::msg::c2g::Vector2D* temp = movedir_;
  movedir_ = nullptr;
  return temp;
}
inline ::msg::c2g::Vector2D* AIActionMessage::_internal_mutable_movedir() {
  
  if (movedir_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::c2g::Vector2D>(GetArenaForAllocation());
    movedir_ = p;
  }
  return movedir_;
}
inline ::msg::c2g::Vector2D* AIActionMessage::mutable_movedir() {
  ::msg::c2g::Vector2D* _msg = _internal_mutable_movedir();
  // @@protoc_insertion_point(field_mutable:msg.c2g.AIActionMessage.moveDir)
  return _msg;
}
inline void AIActionMessage::set_allocated_movedir(::msg::c2g::Vector2D* movedir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete movedir_;
  }
  if (movedir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(movedir);
    if (message_arena != submessage_arena) {
      movedir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movedir, submessage_arena);
    }
    
  } else {
    
  }
  movedir_ = movedir;
  // @@protoc_insertion_point(field_set_allocated:msg.c2g.AIActionMessage.moveDir)
}

// repeated uint32 actionsType = 3;
inline int AIActionMessage::_internal_actionstype_size() const {
  return actionstype_.size();
}
inline int AIActionMessage::actionstype_size() const {
  return _internal_actionstype_size();
}
inline void AIActionMessage::clear_actionstype() {
  actionstype_.Clear();
}
inline uint32_t AIActionMessage::_internal_actionstype(int index) const {
  return actionstype_.Get(index);
}
inline uint32_t AIActionMessage::actionstype(int index) const {
  // @@protoc_insertion_point(field_get:msg.c2g.AIActionMessage.actionsType)
  return _internal_actionstype(index);
}
inline void AIActionMessage::set_actionstype(int index, uint32_t value) {
  actionstype_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.c2g.AIActionMessage.actionsType)
}
inline void AIActionMessage::_internal_add_actionstype(uint32_t value) {
  actionstype_.Add(value);
}
inline void AIActionMessage::add_actionstype(uint32_t value) {
  _internal_add_actionstype(value);
  // @@protoc_insertion_point(field_add:msg.c2g.AIActionMessage.actionsType)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AIActionMessage::_internal_actionstype() const {
  return actionstype_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AIActionMessage::actionstype() const {
  // @@protoc_insertion_point(field_list:msg.c2g.AIActionMessage.actionsType)
  return _internal_actionstype();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AIActionMessage::_internal_mutable_actionstype() {
  return &actionstype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AIActionMessage::mutable_actionstype() {
  // @@protoc_insertion_point(field_mutable_list:msg.c2g.AIActionMessage.actionsType)
  return _internal_mutable_actionstype();
}

// .msg.c2g.Vector2D propDir = 4;
inline bool AIActionMessage::_internal_has_propdir() const {
  return this != internal_default_instance() && propdir_ != nullptr;
}
inline bool AIActionMessage::has_propdir() const {
  return _internal_has_propdir();
}
inline void AIActionMessage::clear_propdir() {
  if (GetArenaForAllocation() == nullptr && propdir_ != nullptr) {
    delete propdir_;
  }
  propdir_ = nullptr;
}
inline const ::msg::c2g::Vector2D& AIActionMessage::_internal_propdir() const {
  const ::msg::c2g::Vector2D* p = propdir_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::c2g::Vector2D&>(
      ::msg::c2g::_Vector2D_default_instance_);
}
inline const ::msg::c2g::Vector2D& AIActionMessage::propdir() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AIActionMessage.propDir)
  return _internal_propdir();
}
inline void AIActionMessage::unsafe_arena_set_allocated_propdir(
    ::msg::c2g::Vector2D* propdir) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(propdir_);
  }
  propdir_ = propdir;
  if (propdir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.c2g.AIActionMessage.propDir)
}
inline ::msg::c2g::Vector2D* AIActionMessage::release_propdir() {
  
  ::msg::c2g::Vector2D* temp = propdir_;
  propdir_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::c2g::Vector2D* AIActionMessage::unsafe_arena_release_propdir() {
  // @@protoc_insertion_point(field_release:msg.c2g.AIActionMessage.propDir)
  
  ::msg::c2g::Vector2D* temp = propdir_;
  propdir_ = nullptr;
  return temp;
}
inline ::msg::c2g::Vector2D* AIActionMessage::_internal_mutable_propdir() {
  
  if (propdir_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::c2g::Vector2D>(GetArenaForAllocation());
    propdir_ = p;
  }
  return propdir_;
}
inline ::msg::c2g::Vector2D* AIActionMessage::mutable_propdir() {
  ::msg::c2g::Vector2D* _msg = _internal_mutable_propdir();
  // @@protoc_insertion_point(field_mutable:msg.c2g.AIActionMessage.propDir)
  return _msg;
}
inline void AIActionMessage::set_allocated_propdir(::msg::c2g::Vector2D* propdir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete propdir_;
  }
  if (propdir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(propdir);
    if (message_arena != submessage_arena) {
      propdir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, propdir, submessage_arena);
    }
    
  } else {
    
  }
  propdir_ = propdir;
  // @@protoc_insertion_point(field_set_allocated:msg.c2g.AIActionMessage.propDir)
}

// bool pauseState = 5;
inline void AIActionMessage::clear_pausestate() {
  pausestate_ = false;
}
inline bool AIActionMessage::_internal_pausestate() const {
  return pausestate_;
}
inline bool AIActionMessage::pausestate() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AIActionMessage.pauseState)
  return _internal_pausestate();
}
inline void AIActionMessage::_internal_set_pausestate(bool value) {
  
  pausestate_ = value;
}
inline void AIActionMessage::set_pausestate(bool value) {
  _internal_set_pausestate(value);
  // @@protoc_insertion_point(field_set:msg.c2g.AIActionMessage.pauseState)
}

// -------------------------------------------------------------------

// AIServerMessage

// .msg.c2g.AIServerMsgType messageType = 1;
inline void AIServerMessage::clear_messagetype() {
  messagetype_ = 0;
}
inline ::msg::c2g::AIServerMsgType AIServerMessage::_internal_messagetype() const {
  return static_cast< ::msg::c2g::AIServerMsgType >(messagetype_);
}
inline ::msg::c2g::AIServerMsgType AIServerMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AIServerMessage.messageType)
  return _internal_messagetype();
}
inline void AIServerMessage::_internal_set_messagetype(::msg::c2g::AIServerMsgType value) {
  
  messagetype_ = value;
}
inline void AIServerMessage::set_messagetype(::msg::c2g::AIServerMsgType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:msg.c2g.AIServerMessage.messageType)
}

// .msg.c2g.GameConfigure gameConfig = 2;
inline bool AIServerMessage::_internal_has_gameconfig() const {
  return this != internal_default_instance() && gameconfig_ != nullptr;
}
inline bool AIServerMessage::has_gameconfig() const {
  return _internal_has_gameconfig();
}
inline void AIServerMessage::clear_gameconfig() {
  if (GetArenaForAllocation() == nullptr && gameconfig_ != nullptr) {
    delete gameconfig_;
  }
  gameconfig_ = nullptr;
}
inline const ::msg::c2g::GameConfigure& AIServerMessage::_internal_gameconfig() const {
  const ::msg::c2g::GameConfigure* p = gameconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::c2g::GameConfigure&>(
      ::msg::c2g::_GameConfigure_default_instance_);
}
inline const ::msg::c2g::GameConfigure& AIServerMessage::gameconfig() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AIServerMessage.gameConfig)
  return _internal_gameconfig();
}
inline void AIServerMessage::unsafe_arena_set_allocated_gameconfig(
    ::msg::c2g::GameConfigure* gameconfig) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameconfig_);
  }
  gameconfig_ = gameconfig;
  if (gameconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.c2g.AIServerMessage.gameConfig)
}
inline ::msg::c2g::GameConfigure* AIServerMessage::release_gameconfig() {
  
  ::msg::c2g::GameConfigure* temp = gameconfig_;
  gameconfig_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::c2g::GameConfigure* AIServerMessage::unsafe_arena_release_gameconfig() {
  // @@protoc_insertion_point(field_release:msg.c2g.AIServerMessage.gameConfig)
  
  ::msg::c2g::GameConfigure* temp = gameconfig_;
  gameconfig_ = nullptr;
  return temp;
}
inline ::msg::c2g::GameConfigure* AIServerMessage::_internal_mutable_gameconfig() {
  
  if (gameconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::c2g::GameConfigure>(GetArenaForAllocation());
    gameconfig_ = p;
  }
  return gameconfig_;
}
inline ::msg::c2g::GameConfigure* AIServerMessage::mutable_gameconfig() {
  ::msg::c2g::GameConfigure* _msg = _internal_mutable_gameconfig();
  // @@protoc_insertion_point(field_mutable:msg.c2g.AIServerMessage.gameConfig)
  return _msg;
}
inline void AIServerMessage::set_allocated_gameconfig(::msg::c2g::GameConfigure* gameconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gameconfig_;
  }
  if (gameconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gameconfig);
    if (message_arena != submessage_arena) {
      gameconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameconfig, submessage_arena);
    }
    
  } else {
    
  }
  gameconfig_ = gameconfig;
  // @@protoc_insertion_point(field_set_allocated:msg.c2g.AIServerMessage.gameConfig)
}

// repeated .msg.c2g.AIActionMessage actionOfAIs = 3;
inline int AIServerMessage::_internal_actionofais_size() const {
  return actionofais_.size();
}
inline int AIServerMessage::actionofais_size() const {
  return _internal_actionofais_size();
}
inline void AIServerMessage::clear_actionofais() {
  actionofais_.Clear();
}
inline ::msg::c2g::AIActionMessage* AIServerMessage::mutable_actionofais(int index) {
  // @@protoc_insertion_point(field_mutable:msg.c2g.AIServerMessage.actionOfAIs)
  return actionofais_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::c2g::AIActionMessage >*
AIServerMessage::mutable_actionofais() {
  // @@protoc_insertion_point(field_mutable_list:msg.c2g.AIServerMessage.actionOfAIs)
  return &actionofais_;
}
inline const ::msg::c2g::AIActionMessage& AIServerMessage::_internal_actionofais(int index) const {
  return actionofais_.Get(index);
}
inline const ::msg::c2g::AIActionMessage& AIServerMessage::actionofais(int index) const {
  // @@protoc_insertion_point(field_get:msg.c2g.AIServerMessage.actionOfAIs)
  return _internal_actionofais(index);
}
inline ::msg::c2g::AIActionMessage* AIServerMessage::_internal_add_actionofais() {
  return actionofais_.Add();
}
inline ::msg::c2g::AIActionMessage* AIServerMessage::add_actionofais() {
  ::msg::c2g::AIActionMessage* _add = _internal_add_actionofais();
  // @@protoc_insertion_point(field_add:msg.c2g.AIServerMessage.actionOfAIs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::c2g::AIActionMessage >&
AIServerMessage::actionofais() const {
  // @@protoc_insertion_point(field_list:msg.c2g.AIServerMessage.actionOfAIs)
  return actionofais_;
}

// bool pauseAgents = 4;
inline void AIServerMessage::clear_pauseagents() {
  pauseagents_ = false;
}
inline bool AIServerMessage::_internal_pauseagents() const {
  return pauseagents_;
}
inline bool AIServerMessage::pauseagents() const {
  // @@protoc_insertion_point(field_get:msg.c2g.AIServerMessage.pauseAgents)
  return _internal_pauseagents();
}
inline void AIServerMessage::_internal_set_pauseagents(bool value) {
  
  pauseagents_ = value;
}
inline void AIServerMessage::set_pauseagents(bool value) {
  _internal_set_pauseagents(value);
  // @@protoc_insertion_point(field_set:msg.c2g.AIServerMessage.pauseAgents)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace c2g
}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::c2g::CMD2G> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::c2g::CMD2G>() {
  return ::msg::c2g::CMD2G_descriptor();
}
template <> struct is_proto_enum< ::msg::c2g::AIServerMsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::c2g::AIServerMsgType>() {
  return ::msg::c2g::AIServerMsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fKoalaAI_5fC2G_2eproto
