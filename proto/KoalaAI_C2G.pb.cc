// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/KoalaAI_C2G.proto

#include "proto/KoalaAI_C2G.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace msg {
namespace c2g {
PROTOBUF_CONSTEXPR LinkReq::LinkReq(
    ::_pbi::ConstantInitialized){}
struct LinkReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkReqDefaultTypeInternal() {}
  union {
    LinkReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkReqDefaultTypeInternal _LinkReq_default_instance_;
PROTOBUF_CONSTEXPR Vector2D::Vector2D(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Vector2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2DDefaultTypeInternal() {}
  union {
    Vector2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2DDefaultTypeInternal _Vector2D_default_instance_;
PROTOBUF_CONSTEXPR Vector3D::Vector3D(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DDefaultTypeInternal() {}
  union {
    Vector3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DDefaultTypeInternal _Vector3D_default_instance_;
PROTOBUF_CONSTEXPR GameConfigure::GameConfigure(
    ::_pbi::ConstantInitialized)
  : agentinitoptions_()
  , mapid_(0u)
  , numofai_(0u){}
struct GameConfigureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameConfigureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameConfigureDefaultTypeInternal() {}
  union {
    GameConfigure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameConfigureDefaultTypeInternal _GameConfigure_default_instance_;
PROTOBUF_CONSTEXPR AgentInitOption::AgentInitOption(
    ::_pbi::ConstantInitialized)
  : startposition_(nullptr)
  , velocity_(nullptr)
  , agentid_(uint64_t{0u})
  , starttype_(0u)
  , targetpointlevel_(0u)
  , savepointid_(uint64_t{0u})
  , targetpointindex_(0u){}
struct AgentInitOptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentInitOptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentInitOptionDefaultTypeInternal() {}
  union {
    AgentInitOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentInitOptionDefaultTypeInternal _AgentInitOption_default_instance_;
PROTOBUF_CONSTEXPR AIActionMessage::AIActionMessage(
    ::_pbi::ConstantInitialized)
  : actionstype_()
  , _actionstype_cached_byte_size_(0)
  , movedir_(nullptr)
  , propdir_(nullptr)
  , agentid_(uint64_t{0u})
  , pausestate_(false){}
struct AIActionMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AIActionMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AIActionMessageDefaultTypeInternal() {}
  union {
    AIActionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AIActionMessageDefaultTypeInternal _AIActionMessage_default_instance_;
PROTOBUF_CONSTEXPR AIServerMessage::AIServerMessage(
    ::_pbi::ConstantInitialized)
  : actionofais_()
  , gameconfig_(nullptr)
  , messagetype_(0)

  , pauseagents_(false){}
struct AIServerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AIServerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AIServerMessageDefaultTypeInternal() {}
  union {
    AIServerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AIServerMessageDefaultTypeInternal _AIServerMessage_default_instance_;
}  // namespace c2g
}  // namespace msg
static ::_pb::Metadata file_level_metadata_proto_2fKoalaAI_5fC2G_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto_2fKoalaAI_5fC2G_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fKoalaAI_5fC2G_2eproto = nullptr;

const uint32_t TableStruct_proto_2fKoalaAI_5fC2G_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::LinkReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::Vector2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::Vector2D, x_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::Vector2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::Vector3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::Vector3D, x_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::Vector3D, y_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::Vector3D, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::GameConfigure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::GameConfigure, mapid_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::GameConfigure, numofai_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::GameConfigure, agentinitoptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AgentInitOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AgentInitOption, agentid_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AgentInitOption, starttype_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AgentInitOption, targetpointlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AgentInitOption, targetpointindex_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AgentInitOption, startposition_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AgentInitOption, savepointid_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AgentInitOption, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AIActionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AIActionMessage, agentid_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AIActionMessage, movedir_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AIActionMessage, actionstype_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AIActionMessage, propdir_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AIActionMessage, pausestate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AIServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AIServerMessage, messagetype_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AIServerMessage, gameconfig_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AIServerMessage, actionofais_),
  PROTOBUF_FIELD_OFFSET(::msg::c2g::AIServerMessage, pauseagents_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msg::c2g::LinkReq)},
  { 6, -1, -1, sizeof(::msg::c2g::Vector2D)},
  { 14, -1, -1, sizeof(::msg::c2g::Vector3D)},
  { 23, -1, -1, sizeof(::msg::c2g::GameConfigure)},
  { 32, -1, -1, sizeof(::msg::c2g::AgentInitOption)},
  { 45, -1, -1, sizeof(::msg::c2g::AIActionMessage)},
  { 56, -1, -1, sizeof(::msg::c2g::AIServerMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::msg::c2g::_LinkReq_default_instance_._instance,
  &::msg::c2g::_Vector2D_default_instance_._instance,
  &::msg::c2g::_Vector3D_default_instance_._instance,
  &::msg::c2g::_GameConfigure_default_instance_._instance,
  &::msg::c2g::_AgentInitOption_default_instance_._instance,
  &::msg::c2g::_AIActionMessage_default_instance_._instance,
  &::msg::c2g::_AIServerMessage_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fKoalaAI_5fC2G_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027proto/KoalaAI_C2G.proto\022\007msg.c2g\"\t\n\007Li"
  "nkReq\" \n\010Vector2D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\""
  "+\n\010Vector3D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003"
  " \001(\002\"c\n\rGameConfigure\022\r\n\005mapId\030\001 \001(\r\022\017\n\007"
  "numOfAI\030\002 \001(\r\0222\n\020agentInitOptions\030\003 \003(\0132"
  "\030.msg.c2g.AgentInitOption\"\315\001\n\017AgentInitO"
  "ption\022\017\n\007agentId\030\001 \001(\004\022\021\n\tstartType\030\002 \001("
  "\r\022\030\n\020targetPointLevel\030\003 \001(\r\022\030\n\020targetPoi"
  "ntIndex\030\004 \001(\r\022(\n\rstartPosition\030\005 \001(\0132\021.m"
  "sg.c2g.Vector3D\022\023\n\013savePointId\030\006 \001(\004\022#\n\010"
  "velocity\030\007 \001(\0132\021.msg.c2g.Vector3D\"\223\001\n\017AI"
  "ActionMessage\022\017\n\007agentId\030\001 \001(\004\022\"\n\007moveDi"
  "r\030\002 \001(\0132\021.msg.c2g.Vector2D\022\023\n\013actionsTyp"
  "e\030\003 \003(\r\022\"\n\007propDir\030\004 \001(\0132\021.msg.c2g.Vecto"
  "r2D\022\022\n\npauseState\030\005 \001(\010\"\260\001\n\017AIServerMess"
  "age\022-\n\013messageType\030\001 \001(\0162\030.msg.c2g.AISer"
  "verMsgType\022*\n\ngameConfig\030\002 \001(\0132\026.msg.c2g"
  ".GameConfigure\022-\n\013actionOfAIs\030\003 \003(\0132\030.ms"
  "g.c2g.AIActionMessage\022\023\n\013pauseAgents\030\004 \001"
  "(\010*9\n\005CMD2G\022\022\n\016CMD2G_LINK_REQ\020\000\022\034\n\030CMD2G"
  "_A_I_SERVER_MESSAGE\020\001*^\n\017AIServerMsgType"
  "\022\030\n\024GAME_GLOBAL_INFO_REQ\020\000\022\016\n\nCHOOSE_MAP"
  "\020\001\022\021\n\rGAME_INIT_REQ\020\002\022\016\n\nACTION_REQ\020\003B\031\252"
  "\002\026Koala.Robot.AI.Msg.C2Gb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fKoalaAI_5fC2G_2eproto = {
    false, false, 952, descriptor_table_protodef_proto_2fKoalaAI_5fC2G_2eproto,
    "proto/KoalaAI_C2G.proto",
    &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_proto_2fKoalaAI_5fC2G_2eproto::offsets,
    file_level_metadata_proto_2fKoalaAI_5fC2G_2eproto, file_level_enum_descriptors_proto_2fKoalaAI_5fC2G_2eproto,
    file_level_service_descriptors_proto_2fKoalaAI_5fC2G_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_getter() {
  return &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fKoalaAI_5fC2G_2eproto(&descriptor_table_proto_2fKoalaAI_5fC2G_2eproto);
namespace msg {
namespace c2g {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMD2G_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fKoalaAI_5fC2G_2eproto);
  return file_level_enum_descriptors_proto_2fKoalaAI_5fC2G_2eproto[0];
}
bool CMD2G_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIServerMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fKoalaAI_5fC2G_2eproto);
  return file_level_enum_descriptors_proto_2fKoalaAI_5fC2G_2eproto[1];
}
bool AIServerMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LinkReq::_Internal {
 public:
};

LinkReq::LinkReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.c2g.LinkReq)
}
LinkReq::LinkReq(const LinkReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.c2g.LinkReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LinkReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_getter, &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_once,
      file_level_metadata_proto_2fKoalaAI_5fC2G_2eproto[0]);
}

// ===================================================================

class Vector2D::_Internal {
 public:
};

Vector2D::Vector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:msg.c2g.Vector2D)
}
Vector2D::Vector2D(const Vector2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:msg.c2g.Vector2D)
}

inline void Vector2D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2D::~Vector2D() {
  // @@protoc_insertion_point(destructor:msg.c2g.Vector2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.c2g.Vector2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.c2g.Vector2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.c2g.Vector2D)
  return target;
}

size_t Vector2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.c2g.Vector2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2D::GetClassData() const { return &_class_data_; }

void Vector2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector2D *>(to)->MergeFrom(
      static_cast<const Vector2D &>(from));
}


void Vector2D::MergeFrom(const Vector2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.c2g.Vector2D)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2D::CopyFrom(const Vector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.c2g.Vector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2D::IsInitialized() const {
  return true;
}

void Vector2D::InternalSwap(Vector2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2D, y_)
      + sizeof(Vector2D::y_)
      - PROTOBUF_FIELD_OFFSET(Vector2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_getter, &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_once,
      file_level_metadata_proto_2fKoalaAI_5fC2G_2eproto[1]);
}

// ===================================================================

class Vector3D::_Internal {
 public:
};

Vector3D::Vector3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:msg.c2g.Vector3D)
}
Vector3D::Vector3D(const Vector3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:msg.c2g.Vector3D)
}

inline void Vector3D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3D::~Vector3D() {
  // @@protoc_insertion_point(destructor:msg.c2g.Vector3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3D::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.c2g.Vector3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.c2g.Vector3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.c2g.Vector3D)
  return target;
}

size_t Vector3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.c2g.Vector3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3D::GetClassData() const { return &_class_data_; }

void Vector3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector3D *>(to)->MergeFrom(
      static_cast<const Vector3D &>(from));
}


void Vector3D::MergeFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.c2g.Vector3D)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3D::CopyFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.c2g.Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3D::IsInitialized() const {
  return true;
}

void Vector3D::InternalSwap(Vector3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3D, z_)
      + sizeof(Vector3D::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_getter, &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_once,
      file_level_metadata_proto_2fKoalaAI_5fC2G_2eproto[2]);
}

// ===================================================================

class GameConfigure::_Internal {
 public:
};

GameConfigure::GameConfigure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  agentinitoptions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:msg.c2g.GameConfigure)
}
GameConfigure::GameConfigure(const GameConfigure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agentinitoptions_(from.agentinitoptions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numofai_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(numofai_));
  // @@protoc_insertion_point(copy_constructor:msg.c2g.GameConfigure)
}

inline void GameConfigure::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mapid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&numofai_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(numofai_));
}

GameConfigure::~GameConfigure() {
  // @@protoc_insertion_point(destructor:msg.c2g.GameConfigure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameConfigure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameConfigure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameConfigure::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.c2g.GameConfigure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agentinitoptions_.Clear();
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numofai_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(numofai_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameConfigure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mapId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 numOfAI = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          numofai_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.c2g.AgentInitOption agentInitOptions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agentinitoptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameConfigure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.c2g.GameConfigure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapId = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // uint32 numOfAI = 2;
  if (this->_internal_numofai() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_numofai(), target);
  }

  // repeated .msg.c2g.AgentInitOption agentInitOptions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_agentinitoptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_agentinitoptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.c2g.GameConfigure)
  return target;
}

size_t GameConfigure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.c2g.GameConfigure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.c2g.AgentInitOption agentInitOptions = 3;
  total_size += 1UL * this->_internal_agentinitoptions_size();
  for (const auto& msg : this->agentinitoptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 mapId = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // uint32 numOfAI = 2;
  if (this->_internal_numofai() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numofai());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameConfigure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameConfigure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameConfigure::GetClassData() const { return &_class_data_; }

void GameConfigure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameConfigure *>(to)->MergeFrom(
      static_cast<const GameConfigure &>(from));
}


void GameConfigure::MergeFrom(const GameConfigure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.c2g.GameConfigure)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  agentinitoptions_.MergeFrom(from.agentinitoptions_);
  if (from._internal_mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_numofai() != 0) {
    _internal_set_numofai(from._internal_numofai());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameConfigure::CopyFrom(const GameConfigure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.c2g.GameConfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameConfigure::IsInitialized() const {
  return true;
}

void GameConfigure::InternalSwap(GameConfigure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  agentinitoptions_.InternalSwap(&other->agentinitoptions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameConfigure, numofai_)
      + sizeof(GameConfigure::numofai_)
      - PROTOBUF_FIELD_OFFSET(GameConfigure, mapid_)>(
          reinterpret_cast<char*>(&mapid_),
          reinterpret_cast<char*>(&other->mapid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameConfigure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_getter, &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_once,
      file_level_metadata_proto_2fKoalaAI_5fC2G_2eproto[3]);
}

// ===================================================================

class AgentInitOption::_Internal {
 public:
  static const ::msg::c2g::Vector3D& startposition(const AgentInitOption* msg);
  static const ::msg::c2g::Vector3D& velocity(const AgentInitOption* msg);
};

const ::msg::c2g::Vector3D&
AgentInitOption::_Internal::startposition(const AgentInitOption* msg) {
  return *msg->startposition_;
}
const ::msg::c2g::Vector3D&
AgentInitOption::_Internal::velocity(const AgentInitOption* msg) {
  return *msg->velocity_;
}
AgentInitOption::AgentInitOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:msg.c2g.AgentInitOption)
}
AgentInitOption::AgentInitOption(const AgentInitOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_startposition()) {
    startposition_ = new ::msg::c2g::Vector3D(*from.startposition_);
  } else {
    startposition_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::msg::c2g::Vector3D(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  ::memcpy(&agentid_, &from.agentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetpointindex_) -
    reinterpret_cast<char*>(&agentid_)) + sizeof(targetpointindex_));
  // @@protoc_insertion_point(copy_constructor:msg.c2g.AgentInitOption)
}

inline void AgentInitOption::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startposition_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&targetpointindex_) -
    reinterpret_cast<char*>(&startposition_)) + sizeof(targetpointindex_));
}

AgentInitOption::~AgentInitOption() {
  // @@protoc_insertion_point(destructor:msg.c2g.AgentInitOption)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentInitOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete startposition_;
  if (this != internal_default_instance()) delete velocity_;
}

void AgentInitOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgentInitOption::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.c2g.AgentInitOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && startposition_ != nullptr) {
    delete startposition_;
  }
  startposition_ = nullptr;
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  ::memset(&agentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetpointindex_) -
      reinterpret_cast<char*>(&agentid_)) + sizeof(targetpointindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentInitOption::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 agentId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          agentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 startType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          starttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 targetPointLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          targetpointlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 targetPointIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          targetpointindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.c2g.Vector3D startPosition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_startposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 savePointId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          savepointid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.c2g.Vector3D velocity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentInitOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.c2g.AgentInitOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 agentId = 1;
  if (this->_internal_agentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_agentid(), target);
  }

  // uint32 startType = 2;
  if (this->_internal_starttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_starttype(), target);
  }

  // uint32 targetPointLevel = 3;
  if (this->_internal_targetpointlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_targetpointlevel(), target);
  }

  // uint32 targetPointIndex = 4;
  if (this->_internal_targetpointindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_targetpointindex(), target);
  }

  // .msg.c2g.Vector3D startPosition = 5;
  if (this->_internal_has_startposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::startposition(this),
        _Internal::startposition(this).GetCachedSize(), target, stream);
  }

  // uint64 savePointId = 6;
  if (this->_internal_savepointid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_savepointid(), target);
  }

  // .msg.c2g.Vector3D velocity = 7;
  if (this->_internal_has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.c2g.AgentInitOption)
  return target;
}

size_t AgentInitOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.c2g.AgentInitOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.c2g.Vector3D startPosition = 5;
  if (this->_internal_has_startposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *startposition_);
  }

  // .msg.c2g.Vector3D velocity = 7;
  if (this->_internal_has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // uint64 agentId = 1;
  if (this->_internal_agentid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_agentid());
  }

  // uint32 startType = 2;
  if (this->_internal_starttype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_starttype());
  }

  // uint32 targetPointLevel = 3;
  if (this->_internal_targetpointlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_targetpointlevel());
  }

  // uint64 savePointId = 6;
  if (this->_internal_savepointid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_savepointid());
  }

  // uint32 targetPointIndex = 4;
  if (this->_internal_targetpointindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_targetpointindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentInitOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AgentInitOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentInitOption::GetClassData() const { return &_class_data_; }

void AgentInitOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AgentInitOption *>(to)->MergeFrom(
      static_cast<const AgentInitOption &>(from));
}


void AgentInitOption::MergeFrom(const AgentInitOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.c2g.AgentInitOption)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_startposition()) {
    _internal_mutable_startposition()->::msg::c2g::Vector3D::MergeFrom(from._internal_startposition());
  }
  if (from._internal_has_velocity()) {
    _internal_mutable_velocity()->::msg::c2g::Vector3D::MergeFrom(from._internal_velocity());
  }
  if (from._internal_agentid() != 0) {
    _internal_set_agentid(from._internal_agentid());
  }
  if (from._internal_starttype() != 0) {
    _internal_set_starttype(from._internal_starttype());
  }
  if (from._internal_targetpointlevel() != 0) {
    _internal_set_targetpointlevel(from._internal_targetpointlevel());
  }
  if (from._internal_savepointid() != 0) {
    _internal_set_savepointid(from._internal_savepointid());
  }
  if (from._internal_targetpointindex() != 0) {
    _internal_set_targetpointindex(from._internal_targetpointindex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentInitOption::CopyFrom(const AgentInitOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.c2g.AgentInitOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInitOption::IsInitialized() const {
  return true;
}

void AgentInitOption::InternalSwap(AgentInitOption* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentInitOption, targetpointindex_)
      + sizeof(AgentInitOption::targetpointindex_)
      - PROTOBUF_FIELD_OFFSET(AgentInitOption, startposition_)>(
          reinterpret_cast<char*>(&startposition_),
          reinterpret_cast<char*>(&other->startposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentInitOption::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_getter, &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_once,
      file_level_metadata_proto_2fKoalaAI_5fC2G_2eproto[4]);
}

// ===================================================================

class AIActionMessage::_Internal {
 public:
  static const ::msg::c2g::Vector2D& movedir(const AIActionMessage* msg);
  static const ::msg::c2g::Vector2D& propdir(const AIActionMessage* msg);
};

const ::msg::c2g::Vector2D&
AIActionMessage::_Internal::movedir(const AIActionMessage* msg) {
  return *msg->movedir_;
}
const ::msg::c2g::Vector2D&
AIActionMessage::_Internal::propdir(const AIActionMessage* msg) {
  return *msg->propdir_;
}
AIActionMessage::AIActionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  actionstype_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:msg.c2g.AIActionMessage)
}
AIActionMessage::AIActionMessage(const AIActionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actionstype_(from.actionstype_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_movedir()) {
    movedir_ = new ::msg::c2g::Vector2D(*from.movedir_);
  } else {
    movedir_ = nullptr;
  }
  if (from._internal_has_propdir()) {
    propdir_ = new ::msg::c2g::Vector2D(*from.propdir_);
  } else {
    propdir_ = nullptr;
  }
  ::memcpy(&agentid_, &from.agentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pausestate_) -
    reinterpret_cast<char*>(&agentid_)) + sizeof(pausestate_));
  // @@protoc_insertion_point(copy_constructor:msg.c2g.AIActionMessage)
}

inline void AIActionMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&movedir_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pausestate_) -
    reinterpret_cast<char*>(&movedir_)) + sizeof(pausestate_));
}

AIActionMessage::~AIActionMessage() {
  // @@protoc_insertion_point(destructor:msg.c2g.AIActionMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AIActionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete movedir_;
  if (this != internal_default_instance()) delete propdir_;
}

void AIActionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AIActionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.c2g.AIActionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionstype_.Clear();
  if (GetArenaForAllocation() == nullptr && movedir_ != nullptr) {
    delete movedir_;
  }
  movedir_ = nullptr;
  if (GetArenaForAllocation() == nullptr && propdir_ != nullptr) {
    delete propdir_;
  }
  propdir_ = nullptr;
  ::memset(&agentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pausestate_) -
      reinterpret_cast<char*>(&agentid_)) + sizeof(pausestate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AIActionMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 agentId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          agentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.c2g.Vector2D moveDir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_movedir(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 actionsType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_actionstype(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_actionstype(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.c2g.Vector2D propDir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_propdir(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool pauseState = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          pausestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AIActionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.c2g.AIActionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 agentId = 1;
  if (this->_internal_agentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_agentid(), target);
  }

  // .msg.c2g.Vector2D moveDir = 2;
  if (this->_internal_has_movedir()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::movedir(this),
        _Internal::movedir(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 actionsType = 3;
  {
    int byte_size = _actionstype_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_actionstype(), byte_size, target);
    }
  }

  // .msg.c2g.Vector2D propDir = 4;
  if (this->_internal_has_propdir()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::propdir(this),
        _Internal::propdir(this).GetCachedSize(), target, stream);
  }

  // bool pauseState = 5;
  if (this->_internal_pausestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_pausestate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.c2g.AIActionMessage)
  return target;
}

size_t AIActionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.c2g.AIActionMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 actionsType = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->actionstype_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _actionstype_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .msg.c2g.Vector2D moveDir = 2;
  if (this->_internal_has_movedir()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *movedir_);
  }

  // .msg.c2g.Vector2D propDir = 4;
  if (this->_internal_has_propdir()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *propdir_);
  }

  // uint64 agentId = 1;
  if (this->_internal_agentid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_agentid());
  }

  // bool pauseState = 5;
  if (this->_internal_pausestate() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AIActionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AIActionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AIActionMessage::GetClassData() const { return &_class_data_; }

void AIActionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AIActionMessage *>(to)->MergeFrom(
      static_cast<const AIActionMessage &>(from));
}


void AIActionMessage::MergeFrom(const AIActionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.c2g.AIActionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  actionstype_.MergeFrom(from.actionstype_);
  if (from._internal_has_movedir()) {
    _internal_mutable_movedir()->::msg::c2g::Vector2D::MergeFrom(from._internal_movedir());
  }
  if (from._internal_has_propdir()) {
    _internal_mutable_propdir()->::msg::c2g::Vector2D::MergeFrom(from._internal_propdir());
  }
  if (from._internal_agentid() != 0) {
    _internal_set_agentid(from._internal_agentid());
  }
  if (from._internal_pausestate() != 0) {
    _internal_set_pausestate(from._internal_pausestate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AIActionMessage::CopyFrom(const AIActionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.c2g.AIActionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIActionMessage::IsInitialized() const {
  return true;
}

void AIActionMessage::InternalSwap(AIActionMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  actionstype_.InternalSwap(&other->actionstype_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AIActionMessage, pausestate_)
      + sizeof(AIActionMessage::pausestate_)
      - PROTOBUF_FIELD_OFFSET(AIActionMessage, movedir_)>(
          reinterpret_cast<char*>(&movedir_),
          reinterpret_cast<char*>(&other->movedir_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AIActionMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_getter, &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_once,
      file_level_metadata_proto_2fKoalaAI_5fC2G_2eproto[5]);
}

// ===================================================================

class AIServerMessage::_Internal {
 public:
  static const ::msg::c2g::GameConfigure& gameconfig(const AIServerMessage* msg);
};

const ::msg::c2g::GameConfigure&
AIServerMessage::_Internal::gameconfig(const AIServerMessage* msg) {
  return *msg->gameconfig_;
}
AIServerMessage::AIServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  actionofais_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:msg.c2g.AIServerMessage)
}
AIServerMessage::AIServerMessage(const AIServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actionofais_(from.actionofais_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gameconfig()) {
    gameconfig_ = new ::msg::c2g::GameConfigure(*from.gameconfig_);
  } else {
    gameconfig_ = nullptr;
  }
  ::memcpy(&messagetype_, &from.messagetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&pauseagents_) -
    reinterpret_cast<char*>(&messagetype_)) + sizeof(pauseagents_));
  // @@protoc_insertion_point(copy_constructor:msg.c2g.AIServerMessage)
}

inline void AIServerMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gameconfig_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pauseagents_) -
    reinterpret_cast<char*>(&gameconfig_)) + sizeof(pauseagents_));
}

AIServerMessage::~AIServerMessage() {
  // @@protoc_insertion_point(destructor:msg.c2g.AIServerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AIServerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete gameconfig_;
}

void AIServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AIServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.c2g.AIServerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionofais_.Clear();
  if (GetArenaForAllocation() == nullptr && gameconfig_ != nullptr) {
    delete gameconfig_;
  }
  gameconfig_ = nullptr;
  ::memset(&messagetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pauseagents_) -
      reinterpret_cast<char*>(&messagetype_)) + sizeof(pauseagents_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AIServerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.c2g.AIServerMsgType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::msg::c2g::AIServerMsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.c2g.GameConfigure gameConfig = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.c2g.AIActionMessage actionOfAIs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actionofais(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool pauseAgents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          pauseagents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AIServerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.c2g.AIServerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.c2g.AIServerMsgType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // .msg.c2g.GameConfigure gameConfig = 2;
  if (this->_internal_has_gameconfig()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gameconfig(this),
        _Internal::gameconfig(this).GetCachedSize(), target, stream);
  }

  // repeated .msg.c2g.AIActionMessage actionOfAIs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actionofais_size()); i < n; i++) {
    const auto& repfield = this->_internal_actionofais(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool pauseAgents = 4;
  if (this->_internal_pauseagents() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_pauseagents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.c2g.AIServerMessage)
  return target;
}

size_t AIServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.c2g.AIServerMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.c2g.AIActionMessage actionOfAIs = 3;
  total_size += 1UL * this->_internal_actionofais_size();
  for (const auto& msg : this->actionofais_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .msg.c2g.GameConfigure gameConfig = 2;
  if (this->_internal_has_gameconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameconfig_);
  }

  // .msg.c2g.AIServerMsgType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  // bool pauseAgents = 4;
  if (this->_internal_pauseagents() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AIServerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AIServerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AIServerMessage::GetClassData() const { return &_class_data_; }

void AIServerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AIServerMessage *>(to)->MergeFrom(
      static_cast<const AIServerMessage &>(from));
}


void AIServerMessage::MergeFrom(const AIServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.c2g.AIServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  actionofais_.MergeFrom(from.actionofais_);
  if (from._internal_has_gameconfig()) {
    _internal_mutable_gameconfig()->::msg::c2g::GameConfigure::MergeFrom(from._internal_gameconfig());
  }
  if (from._internal_messagetype() != 0) {
    _internal_set_messagetype(from._internal_messagetype());
  }
  if (from._internal_pauseagents() != 0) {
    _internal_set_pauseagents(from._internal_pauseagents());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AIServerMessage::CopyFrom(const AIServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.c2g.AIServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIServerMessage::IsInitialized() const {
  return true;
}

void AIServerMessage::InternalSwap(AIServerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  actionofais_.InternalSwap(&other->actionofais_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AIServerMessage, pauseagents_)
      + sizeof(AIServerMessage::pauseagents_)
      - PROTOBUF_FIELD_OFFSET(AIServerMessage, gameconfig_)>(
          reinterpret_cast<char*>(&gameconfig_),
          reinterpret_cast<char*>(&other->gameconfig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AIServerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_getter, &descriptor_table_proto_2fKoalaAI_5fC2G_2eproto_once,
      file_level_metadata_proto_2fKoalaAI_5fC2G_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace c2g
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::c2g::LinkReq*
Arena::CreateMaybeMessage< ::msg::c2g::LinkReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::c2g::LinkReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::c2g::Vector2D*
Arena::CreateMaybeMessage< ::msg::c2g::Vector2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::c2g::Vector2D >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::c2g::Vector3D*
Arena::CreateMaybeMessage< ::msg::c2g::Vector3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::c2g::Vector3D >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::c2g::GameConfigure*
Arena::CreateMaybeMessage< ::msg::c2g::GameConfigure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::c2g::GameConfigure >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::c2g::AgentInitOption*
Arena::CreateMaybeMessage< ::msg::c2g::AgentInitOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::c2g::AgentInitOption >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::c2g::AIActionMessage*
Arena::CreateMaybeMessage< ::msg::c2g::AIActionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::c2g::AIActionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::c2g::AIServerMessage*
Arena::CreateMaybeMessage< ::msg::c2g::AIServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::c2g::AIServerMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
