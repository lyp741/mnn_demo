// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: KoalaAI_G2C.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_KoalaAI_5fG2C_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_KoalaAI_5fG2C_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_KoalaAI_5fG2C_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_KoalaAI_5fG2C_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_KoalaAI_5fG2C_2eproto;
namespace msg {
namespace g2c {
class AgentPropState;
struct AgentPropStateDefaultTypeInternal;
extern AgentPropStateDefaultTypeInternal _AgentPropState_default_instance_;
class AgentState;
struct AgentStateDefaultTypeInternal;
extern AgentStateDefaultTypeInternal _AgentState_default_instance_;
class EventInfo;
struct EventInfoDefaultTypeInternal;
extern EventInfoDefaultTypeInternal _EventInfo_default_instance_;
class FrameDatas;
struct FrameDatasDefaultTypeInternal;
extern FrameDatasDefaultTypeInternal _FrameDatas_default_instance_;
class GameGlobalInfo;
struct GameGlobalInfoDefaultTypeInternal;
extern GameGlobalInfoDefaultTypeInternal _GameGlobalInfo_default_instance_;
class GameInfo;
struct GameInfoDefaultTypeInternal;
extern GameInfoDefaultTypeInternal _GameInfo_default_instance_;
class GameMassage;
struct GameMassageDefaultTypeInternal;
extern GameMassageDefaultTypeInternal _GameMassage_default_instance_;
class GamePointInfo;
struct GamePointInfoDefaultTypeInternal;
extern GamePointInfoDefaultTypeInternal _GamePointInfo_default_instance_;
class GameState;
struct GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class ItemState;
struct ItemStateDefaultTypeInternal;
extern ItemStateDefaultTypeInternal _ItemState_default_instance_;
class ItemWayPoint;
struct ItemWayPointDefaultTypeInternal;
extern ItemWayPointDefaultTypeInternal _ItemWayPoint_default_instance_;
class LinkRsp;
struct LinkRspDefaultTypeInternal;
extern LinkRspDefaultTypeInternal _LinkRsp_default_instance_;
class MapHeightInfo;
struct MapHeightInfoDefaultTypeInternal;
extern MapHeightInfoDefaultTypeInternal _MapHeightInfo_default_instance_;
class MapInfo;
struct MapInfoDefaultTypeInternal;
extern MapInfoDefaultTypeInternal _MapInfo_default_instance_;
class PropState;
struct PropStateDefaultTypeInternal;
extern PropStateDefaultTypeInternal _PropState_default_instance_;
class TargetPointInfo;
struct TargetPointInfoDefaultTypeInternal;
extern TargetPointInfoDefaultTypeInternal _TargetPointInfo_default_instance_;
class TimerState;
struct TimerStateDefaultTypeInternal;
extern TimerStateDefaultTypeInternal _TimerState_default_instance_;
class Vector3D;
struct Vector3DDefaultTypeInternal;
extern Vector3DDefaultTypeInternal _Vector3D_default_instance_;
}  // namespace g2c
}  // namespace msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace msg {
namespace g2c {
enum CMD2C : int {
  CMD2C_LINK_RSP = 0,
  CMD2C_GAME_MESSAGE = 1,
  CMD2C_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CMD2C_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CMD2C_IsValid(int value);
extern const uint32_t CMD2C_internal_data_[];
constexpr CMD2C CMD2C_MIN = static_cast<CMD2C>(0);
constexpr CMD2C CMD2C_MAX = static_cast<CMD2C>(1);
constexpr int CMD2C_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
CMD2C_descriptor();
template <typename T>
const std::string& CMD2C_Name(T value) {
  static_assert(std::is_same<T, CMD2C>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CMD2C_Name().");
  return CMD2C_Name(static_cast<CMD2C>(value));
}
template <>
inline const std::string& CMD2C_Name(CMD2C value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CMD2C_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool CMD2C_Parse(absl::string_view name, CMD2C* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMD2C>(
      CMD2C_descriptor(), name, value);
}
enum GameMsgType : int {
  GAME_GLOBAL_INFO = 0,
  GAME_INFO = 1,
  GAME_STATE = 2,
  GameMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GameMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GameMsgType_IsValid(int value);
extern const uint32_t GameMsgType_internal_data_[];
constexpr GameMsgType GameMsgType_MIN = static_cast<GameMsgType>(0);
constexpr GameMsgType GameMsgType_MAX = static_cast<GameMsgType>(2);
constexpr int GameMsgType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
GameMsgType_descriptor();
template <typename T>
const std::string& GameMsgType_Name(T value) {
  static_assert(std::is_same<T, GameMsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GameMsgType_Name().");
  return GameMsgType_Name(static_cast<GameMsgType>(value));
}
template <>
inline const std::string& GameMsgType_Name(GameMsgType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GameMsgType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool GameMsgType_Parse(absl::string_view name, GameMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameMsgType>(
      GameMsgType_descriptor(), name, value);
}
enum AnimationStateType : int {
  UNKNOWN_STATE = 0,
  JUMP_STATE = 1,
  ATTACK_STATE = 2,
  SPRINT_STATE = 3,
  INCAPACITATED_STATE = 4,
  GETUP_STATE = 5,
  COLLAPSE_STATE = 6,
  DIZZY_STATE = 7,
  PALSY_STATE = 8,
  BUBBLE_STATE = 9,
  FALL_STATE = 10,
  MOVE_STATE = 11,
  IDLE_STATE = 12,
  AnimationStateType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AnimationStateType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AnimationStateType_IsValid(int value);
extern const uint32_t AnimationStateType_internal_data_[];
constexpr AnimationStateType AnimationStateType_MIN = static_cast<AnimationStateType>(0);
constexpr AnimationStateType AnimationStateType_MAX = static_cast<AnimationStateType>(12);
constexpr int AnimationStateType_ARRAYSIZE = 12 + 1;
const ::google::protobuf::EnumDescriptor*
AnimationStateType_descriptor();
template <typename T>
const std::string& AnimationStateType_Name(T value) {
  static_assert(std::is_same<T, AnimationStateType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AnimationStateType_Name().");
  return AnimationStateType_Name(static_cast<AnimationStateType>(value));
}
template <>
inline const std::string& AnimationStateType_Name(AnimationStateType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AnimationStateType_descriptor,
                                                 0, 12>(
      static_cast<int>(value));
}
inline bool AnimationStateType_Parse(absl::string_view name, AnimationStateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AnimationStateType>(
      AnimationStateType_descriptor(), name, value);
}
enum ShapeType : int {
  UNKNOWN_SHAPE = 0,
  CUBE = 1,
  SPHERE = 2,
  CYLINDER = 3,
  CAPSULE = 4,
  RING = 5,
  HALFCYLINDER = 6,
  TRIANGULARPRISM = 7,
  ISOSCELESTRIANGULARPRISM = 8,
  CIRCULARCONE = 9,
  SQUAREPYRAMID = 10,
  SEMICIRCULARRING = 11,
  HEXAGONALPRISM = 12,
  HEXAGONALPYRAMID = 13,
  TRAPEZOIDALPYRAMID = 14,
  ONEFOURTHCIRCULARRING = 15,
  BASESECTOR = 16,
  TRIANGULARPYRAMID = 17,
  ShapeType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ShapeType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ShapeType_IsValid(int value);
extern const uint32_t ShapeType_internal_data_[];
constexpr ShapeType ShapeType_MIN = static_cast<ShapeType>(0);
constexpr ShapeType ShapeType_MAX = static_cast<ShapeType>(17);
constexpr int ShapeType_ARRAYSIZE = 17 + 1;
const ::google::protobuf::EnumDescriptor*
ShapeType_descriptor();
template <typename T>
const std::string& ShapeType_Name(T value) {
  static_assert(std::is_same<T, ShapeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ShapeType_Name().");
  return ShapeType_Name(static_cast<ShapeType>(value));
}
template <>
inline const std::string& ShapeType_Name(ShapeType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ShapeType_descriptor,
                                                 0, 17>(
      static_cast<int>(value));
}
inline bool ShapeType_Parse(absl::string_view name, ShapeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShapeType>(
      ShapeType_descriptor(), name, value);
}
enum ItemFuncType : int {
  UNKNOWN_FUNC = 0,
  BASIC_PYHSICS = 1,
  ELECTRIC_FAN = 2,
  BOUNCE_WALL = 3,
  CONVEYOR_ZONE = 4,
  TRAMPOLINE = 5,
  SPRINGBOARDS = 6,
  SPEED_UP = 7,
  SOKOBAN = 8,
  OBSCURE = 9,
  SELF_DESTORY = 10,
  BUBBLE = 11,
  MINE = 12,
  RAY = 13,
  BACKTRACKING = 14,
  TIMERCTRL_FLIP_FLOOR = 15,
  BOMB_LIKE = 16,
  TIMER = 17,
  ItemFuncType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ItemFuncType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ItemFuncType_IsValid(int value);
extern const uint32_t ItemFuncType_internal_data_[];
constexpr ItemFuncType ItemFuncType_MIN = static_cast<ItemFuncType>(0);
constexpr ItemFuncType ItemFuncType_MAX = static_cast<ItemFuncType>(17);
constexpr int ItemFuncType_ARRAYSIZE = 17 + 1;
const ::google::protobuf::EnumDescriptor*
ItemFuncType_descriptor();
template <typename T>
const std::string& ItemFuncType_Name(T value) {
  static_assert(std::is_same<T, ItemFuncType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ItemFuncType_Name().");
  return ItemFuncType_Name(static_cast<ItemFuncType>(value));
}
template <>
inline const std::string& ItemFuncType_Name(ItemFuncType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ItemFuncType_descriptor,
                                                 0, 17>(
      static_cast<int>(value));
}
inline bool ItemFuncType_Parse(absl::string_view name, ItemFuncType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemFuncType>(
      ItemFuncType_descriptor(), name, value);
}
enum EventType : int {
  UNKNOWN_EVENT = 0,
  FALL_DOWN = 1,
  ARRIVE_TARGET = 2,
  ARRIVE_DESTRINATION = 3,
  ATTACK = 4,
  AGENT_INCAPACITATED = 5,
  AGENT_GETUP = 6,
  AGENT_COLLAPSE = 7,
  USE_PROP = 8,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EventType_IsValid(int value);
extern const uint32_t EventType_internal_data_[];
constexpr EventType EventType_MIN = static_cast<EventType>(0);
constexpr EventType EventType_MAX = static_cast<EventType>(8);
constexpr int EventType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
EventType_descriptor();
template <typename T>
const std::string& EventType_Name(T value) {
  static_assert(std::is_same<T, EventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EventType_Name().");
  return EventType_Name(static_cast<EventType>(value));
}
template <>
inline const std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EventType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool EventType_Parse(absl::string_view name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
      EventType_descriptor(), name, value);
}
enum MapType : int {
  UNKNOWN = 0,
  RACE = 1,
  SURVIVAL = 2,
  KART = 3,
  TEAMSCORE = 4,
  INDIVIDUALSCORE = 5,
  MapType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MapType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MapType_IsValid(int value);
extern const uint32_t MapType_internal_data_[];
constexpr MapType MapType_MIN = static_cast<MapType>(0);
constexpr MapType MapType_MAX = static_cast<MapType>(5);
constexpr int MapType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
MapType_descriptor();
template <typename T>
const std::string& MapType_Name(T value) {
  static_assert(std::is_same<T, MapType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MapType_Name().");
  return MapType_Name(static_cast<MapType>(value));
}
template <>
inline const std::string& MapType_Name(MapType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MapType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool MapType_Parse(absl::string_view name, MapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MapType>(
      MapType_descriptor(), name, value);
}
enum PropFuncType : int {
  UNKNOWN_PROP = 0,
  AIR_CUSHION = 1,
  SMOKE_GRENADES = 2,
  BOMB = 3,
  BANANA = 4,
  SPRINT_SHOES = 5,
  MOLE_MINES = 6,
  HAMSTER_BALLS = 7,
  SQUID_BOMB = 8,
  BAZOOKA = 9,
  PropFuncType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PropFuncType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PropFuncType_IsValid(int value);
extern const uint32_t PropFuncType_internal_data_[];
constexpr PropFuncType PropFuncType_MIN = static_cast<PropFuncType>(0);
constexpr PropFuncType PropFuncType_MAX = static_cast<PropFuncType>(9);
constexpr int PropFuncType_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
PropFuncType_descriptor();
template <typename T>
const std::string& PropFuncType_Name(T value) {
  static_assert(std::is_same<T, PropFuncType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PropFuncType_Name().");
  return PropFuncType_Name(static_cast<PropFuncType>(value));
}
template <>
inline const std::string& PropFuncType_Name(PropFuncType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PropFuncType_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool PropFuncType_Parse(absl::string_view name, PropFuncType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PropFuncType>(
      PropFuncType_descriptor(), name, value);
}
enum PropUseType : int {
  IMMEDIATE = 0,
  RAISE = 1,
  WAVE = 2,
  SHOOT = 3,
  PropUseType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PropUseType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PropUseType_IsValid(int value);
extern const uint32_t PropUseType_internal_data_[];
constexpr PropUseType PropUseType_MIN = static_cast<PropUseType>(0);
constexpr PropUseType PropUseType_MAX = static_cast<PropUseType>(3);
constexpr int PropUseType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
PropUseType_descriptor();
template <typename T>
const std::string& PropUseType_Name(T value) {
  static_assert(std::is_same<T, PropUseType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PropUseType_Name().");
  return PropUseType_Name(static_cast<PropUseType>(value));
}
template <>
inline const std::string& PropUseType_Name(PropUseType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PropUseType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool PropUseType_Parse(absl::string_view name, PropUseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PropUseType>(
      PropUseType_descriptor(), name, value);
}
enum GamePointType : int {
  SPAWN = 0,
  SAVE = 1,
  DESTINATION = 2,
  GamePointType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GamePointType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GamePointType_IsValid(int value);
extern const uint32_t GamePointType_internal_data_[];
constexpr GamePointType GamePointType_MIN = static_cast<GamePointType>(0);
constexpr GamePointType GamePointType_MAX = static_cast<GamePointType>(2);
constexpr int GamePointType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
GamePointType_descriptor();
template <typename T>
const std::string& GamePointType_Name(T value) {
  static_assert(std::is_same<T, GamePointType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GamePointType_Name().");
  return GamePointType_Name(static_cast<GamePointType>(value));
}
template <>
inline const std::string& GamePointType_Name(GamePointType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GamePointType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool GamePointType_Parse(absl::string_view name, GamePointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GamePointType>(
      GamePointType_descriptor(), name, value);
}
enum EndGameType : int {
  TBD = 0,
  WIN = 1,
  LOSE = 2,
  EndGameType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EndGameType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EndGameType_IsValid(int value);
extern const uint32_t EndGameType_internal_data_[];
constexpr EndGameType EndGameType_MIN = static_cast<EndGameType>(0);
constexpr EndGameType EndGameType_MAX = static_cast<EndGameType>(2);
constexpr int EndGameType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
EndGameType_descriptor();
template <typename T>
const std::string& EndGameType_Name(T value) {
  static_assert(std::is_same<T, EndGameType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EndGameType_Name().");
  return EndGameType_Name(static_cast<EndGameType>(value));
}
template <>
inline const std::string& EndGameType_Name(EndGameType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EndGameType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool EndGameType_Parse(absl::string_view name, EndGameType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EndGameType>(
      EndGameType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Vector3D final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.Vector3D) */ {
 public:
  inline Vector3D() : Vector3D(nullptr) {}
  ~Vector3D() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vector3D(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vector3D(const Vector3D& from) : Vector3D(nullptr, from) {}
  inline Vector3D(Vector3D&& from) noexcept
      : Vector3D(nullptr, std::move(from)) {}
  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3D& operator=(Vector3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3D* internal_default_instance() {
    return reinterpret_cast<const Vector3D*>(
        &_Vector3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Vector3D& a, Vector3D& b) { a.Swap(&b); }
  inline void Swap(Vector3D* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3D* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3D* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Vector3D>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vector3D& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vector3D& from) { Vector3D::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Vector3D* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.Vector3D"; }

 protected:
  explicit Vector3D(::google::protobuf::Arena* arena);
  Vector3D(::google::protobuf::Arena* arena, const Vector3D& from);
  Vector3D(::google::protobuf::Arena* arena, Vector3D&& from) noexcept
      : Vector3D(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.Vector3D)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Vector3D_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    float x_;
    float y_;
    float z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class MapInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.MapInfo) */ {
 public:
  inline MapInfo() : MapInfo(nullptr) {}
  ~MapInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MapInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline MapInfo(const MapInfo& from) : MapInfo(nullptr, from) {}
  inline MapInfo(MapInfo&& from) noexcept
      : MapInfo(nullptr, std::move(from)) {}
  inline MapInfo& operator=(const MapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapInfo& operator=(MapInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapInfo* internal_default_instance() {
    return reinterpret_cast<const MapInfo*>(
        &_MapInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MapInfo& a, MapInfo& b) { a.Swap(&b); }
  inline void Swap(MapInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MapInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MapInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MapInfo& from) { MapInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MapInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.MapInfo"; }

 protected:
  explicit MapInfo(::google::protobuf::Arena* arena);
  MapInfo(::google::protobuf::Arena* arena, const MapInfo& from);
  MapInfo(::google::protobuf::Arena* arena, MapInfo&& from) noexcept
      : MapInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMapNameFieldNumber = 1,
    kMapIdFieldNumber = 2,
    kMapTypeFieldNumber = 3,
  };
  // string mapName = 1;
  void clear_mapname() ;
  const std::string& mapname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mapname(Arg_&& arg, Args_... args);
  std::string* mutable_mapname();
  PROTOBUF_NODISCARD std::string* release_mapname();
  void set_allocated_mapname(std::string* value);

  private:
  const std::string& _internal_mapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapname(
      const std::string& value);
  std::string* _internal_mutable_mapname();

  public:
  // uint32 mapId = 2;
  void clear_mapid() ;
  ::uint32_t mapid() const;
  void set_mapid(::uint32_t value);

  private:
  ::uint32_t _internal_mapid() const;
  void _internal_set_mapid(::uint32_t value);

  public:
  // .msg.g2c.MapType mapType = 3;
  void clear_maptype() ;
  ::msg::g2c::MapType maptype() const;
  void set_maptype(::msg::g2c::MapType value);

  private:
  ::msg::g2c::MapType _internal_maptype() const;
  void _internal_set_maptype(::msg::g2c::MapType value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.MapInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      31, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MapInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr mapname_;
    ::uint32_t mapid_;
    int maptype_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class LinkRsp final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:msg.g2c.LinkRsp) */ {
 public:
  inline LinkRsp() : LinkRsp(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LinkRsp(
      ::google::protobuf::internal::ConstantInitialized);

  inline LinkRsp(const LinkRsp& from) : LinkRsp(nullptr, from) {}
  inline LinkRsp(LinkRsp&& from) noexcept
      : LinkRsp(nullptr, std::move(from)) {}
  inline LinkRsp& operator=(const LinkRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkRsp& operator=(LinkRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkRsp* internal_default_instance() {
    return reinterpret_cast<const LinkRsp*>(
        &_LinkRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LinkRsp& a, LinkRsp& b) { a.Swap(&b); }
  inline void Swap(LinkRsp* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkRsp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkRsp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<LinkRsp>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LinkRsp& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LinkRsp& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.LinkRsp"; }

 protected:
  explicit LinkRsp(::google::protobuf::Arena* arena);
  LinkRsp(::google::protobuf::Arena* arena, const LinkRsp& from);
  LinkRsp(::google::protobuf::Arena* arena, LinkRsp&& from) noexcept
      : LinkRsp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:msg.g2c.LinkRsp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LinkRsp_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class FrameDatas final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.FrameDatas) */ {
 public:
  inline FrameDatas() : FrameDatas(nullptr) {}
  ~FrameDatas() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FrameDatas(
      ::google::protobuf::internal::ConstantInitialized);

  inline FrameDatas(const FrameDatas& from) : FrameDatas(nullptr, from) {}
  inline FrameDatas(FrameDatas&& from) noexcept
      : FrameDatas(nullptr, std::move(from)) {}
  inline FrameDatas& operator=(const FrameDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameDatas& operator=(FrameDatas&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameDatas& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameDatas* internal_default_instance() {
    return reinterpret_cast<const FrameDatas*>(
        &_FrameDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(FrameDatas& a, FrameDatas& b) { a.Swap(&b); }
  inline void Swap(FrameDatas* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameDatas* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameDatas* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<FrameDatas>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FrameDatas& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FrameDatas& from) { FrameDatas::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FrameDatas* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.FrameDatas"; }

 protected:
  explicit FrameDatas(::google::protobuf::Arena* arena);
  FrameDatas(::google::protobuf::Arena* arena, const FrameDatas& from);
  FrameDatas(::google::protobuf::Arena* arena, FrameDatas&& from) noexcept
      : FrameDatas(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTriggerEventFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // string triggerEvent = 2;
  void clear_triggerevent() ;
  const std::string& triggerevent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_triggerevent(Arg_&& arg, Args_... args);
  std::string* mutable_triggerevent();
  PROTOBUF_NODISCARD std::string* release_triggerevent();
  void set_allocated_triggerevent(std::string* value);

  private:
  const std::string& _internal_triggerevent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_triggerevent(
      const std::string& value);
  std::string* _internal_mutable_triggerevent();

  public:
  // float time = 1;
  void clear_time() ;
  float time() const;
  void set_time(float value);

  private:
  float _internal_time() const;
  void _internal_set_time(float value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.FrameDatas)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_FrameDatas_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr triggerevent_;
    float time_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class EventInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.EventInfo) */ {
 public:
  inline EventInfo() : EventInfo(nullptr) {}
  ~EventInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventInfo(const EventInfo& from) : EventInfo(nullptr, from) {}
  inline EventInfo(EventInfo&& from) noexcept
      : EventInfo(nullptr, std::move(from)) {}
  inline EventInfo& operator=(const EventInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventInfo& operator=(EventInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventInfo* internal_default_instance() {
    return reinterpret_cast<const EventInfo*>(
        &_EventInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(EventInfo& a, EventInfo& b) { a.Swap(&b); }
  inline void Swap(EventInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<EventInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventInfo& from) { EventInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EventInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.EventInfo"; }

 protected:
  explicit EventInfo(::google::protobuf::Arena* arena);
  EventInfo(::google::protobuf::Arena* arena, const EventInfo& from);
  EventInfo(::google::protobuf::Arena* arena, EventInfo&& from) noexcept
      : EventInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEventDataFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSourceAgentIdFieldNumber = 3,
    kTargetAgentIdFieldNumber = 4,
  };
  // string eventData = 5;
  void clear_eventdata() ;
  const std::string& eventdata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_eventdata(Arg_&& arg, Args_... args);
  std::string* mutable_eventdata();
  PROTOBUF_NODISCARD std::string* release_eventdata();
  void set_allocated_eventdata(std::string* value);

  private:
  const std::string& _internal_eventdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eventdata(
      const std::string& value);
  std::string* _internal_mutable_eventdata();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // .msg.g2c.EventType type = 2;
  void clear_type() ;
  ::msg::g2c::EventType type() const;
  void set_type(::msg::g2c::EventType value);

  private:
  ::msg::g2c::EventType _internal_type() const;
  void _internal_set_type(::msg::g2c::EventType value);

  public:
  // uint64 sourceAgentId = 3;
  void clear_sourceagentid() ;
  ::uint64_t sourceagentid() const;
  void set_sourceagentid(::uint64_t value);

  private:
  ::uint64_t _internal_sourceagentid() const;
  void _internal_set_sourceagentid(::uint64_t value);

  public:
  // uint64 targetAgentId = 4;
  void clear_targetagentid() ;
  ::uint64_t targetagentid() const;
  void set_targetagentid(::uint64_t value);

  private:
  ::uint64_t _internal_targetagentid() const;
  void _internal_set_targetagentid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.EventInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      35, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_EventInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr eventdata_;
    ::uint32_t id_;
    int type_;
    ::uint64_t sourceagentid_;
    ::uint64_t targetagentid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class AgentPropState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.AgentPropState) */ {
 public:
  inline AgentPropState() : AgentPropState(nullptr) {}
  ~AgentPropState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AgentPropState(
      ::google::protobuf::internal::ConstantInitialized);

  inline AgentPropState(const AgentPropState& from) : AgentPropState(nullptr, from) {}
  inline AgentPropState(AgentPropState&& from) noexcept
      : AgentPropState(nullptr, std::move(from)) {}
  inline AgentPropState& operator=(const AgentPropState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentPropState& operator=(AgentPropState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentPropState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentPropState* internal_default_instance() {
    return reinterpret_cast<const AgentPropState*>(
        &_AgentPropState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(AgentPropState& a, AgentPropState& b) { a.Swap(&b); }
  inline void Swap(AgentPropState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentPropState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentPropState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AgentPropState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AgentPropState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AgentPropState& from) { AgentPropState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AgentPropState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.AgentPropState"; }

 protected:
  explicit AgentPropState(::google::protobuf::Arena* arena);
  AgentPropState(::google::protobuf::Arena* arena, const AgentPropState& from);
  AgentPropState(::google::protobuf::Arena* arena, AgentPropState&& from) noexcept
      : AgentPropState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDurableFieldNumber = 1,
    kUseCountFieldNumber = 2,
    kCdFieldNumber = 3,
    kCurCDFieldNumber = 4,
    kInCDFieldNumber = 5,
    kPropFuncTypeFieldNumber = 6,
    kDelayedDestroyFieldNumber = 7,
    kPlayerPropUseTypeFieldNumber = 8,
  };
  // uint32 durable = 1;
  void clear_durable() ;
  ::uint32_t durable() const;
  void set_durable(::uint32_t value);

  private:
  ::uint32_t _internal_durable() const;
  void _internal_set_durable(::uint32_t value);

  public:
  // uint32 useCount = 2;
  void clear_usecount() ;
  ::uint32_t usecount() const;
  void set_usecount(::uint32_t value);

  private:
  ::uint32_t _internal_usecount() const;
  void _internal_set_usecount(::uint32_t value);

  public:
  // uint32 cd = 3;
  void clear_cd() ;
  ::uint32_t cd() const;
  void set_cd(::uint32_t value);

  private:
  ::uint32_t _internal_cd() const;
  void _internal_set_cd(::uint32_t value);

  public:
  // uint32 curCD = 4;
  void clear_curcd() ;
  ::uint32_t curcd() const;
  void set_curcd(::uint32_t value);

  private:
  ::uint32_t _internal_curcd() const;
  void _internal_set_curcd(::uint32_t value);

  public:
  // bool inCD = 5;
  void clear_incd() ;
  bool incd() const;
  void set_incd(bool value);

  private:
  bool _internal_incd() const;
  void _internal_set_incd(bool value);

  public:
  // .msg.g2c.PropFuncType propFuncType = 6;
  void clear_propfunctype() ;
  ::msg::g2c::PropFuncType propfunctype() const;
  void set_propfunctype(::msg::g2c::PropFuncType value);

  private:
  ::msg::g2c::PropFuncType _internal_propfunctype() const;
  void _internal_set_propfunctype(::msg::g2c::PropFuncType value);

  public:
  // uint32 delayedDestroy = 7;
  void clear_delayeddestroy() ;
  ::uint32_t delayeddestroy() const;
  void set_delayeddestroy(::uint32_t value);

  private:
  ::uint32_t _internal_delayeddestroy() const;
  void _internal_set_delayeddestroy(::uint32_t value);

  public:
  // .msg.g2c.PropUseType playerPropUseType = 8;
  void clear_playerpropusetype() ;
  ::msg::g2c::PropUseType playerpropusetype() const;
  void set_playerpropusetype(::msg::g2c::PropUseType value);

  private:
  ::msg::g2c::PropUseType _internal_playerpropusetype() const;
  void _internal_set_playerpropusetype(::msg::g2c::PropUseType value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.AgentPropState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AgentPropState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t durable_;
    ::uint32_t usecount_;
    ::uint32_t cd_;
    ::uint32_t curcd_;
    bool incd_;
    int propfunctype_;
    ::uint32_t delayeddestroy_;
    int playerpropusetype_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class TimerState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.TimerState) */ {
 public:
  inline TimerState() : TimerState(nullptr) {}
  ~TimerState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TimerState(
      ::google::protobuf::internal::ConstantInitialized);

  inline TimerState(const TimerState& from) : TimerState(nullptr, from) {}
  inline TimerState(TimerState&& from) noexcept
      : TimerState(nullptr, std::move(from)) {}
  inline TimerState& operator=(const TimerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimerState& operator=(TimerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimerState* internal_default_instance() {
    return reinterpret_cast<const TimerState*>(
        &_TimerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(TimerState& a, TimerState& b) { a.Swap(&b); }
  inline void Swap(TimerState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimerState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimerState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TimerState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TimerState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TimerState& from) { TimerState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TimerState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.TimerState"; }

 protected:
  explicit TimerState(::google::protobuf::Arena* arena);
  TimerState(::google::protobuf::Arena* arena, const TimerState& from);
  TimerState(::google::protobuf::Arena* arena, TimerState&& from) noexcept
      : TimerState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFrameDatasFieldNumber = 2,
    kIdFieldNumber = 1,
    kIsStartFieldNumber = 3,
    kIsEndFieldNumber = 4,
    kIsLaunchedFieldNumber = 5,
    kIsPausedFieldNumber = 6,
    kCurrentTimeFieldNumber = 7,
    kTargetTimeFieldNumber = 8,
    kReClockingFieldNumber = 9,
  };
  // repeated .msg.g2c.FrameDatas frameDatas = 2;
  int framedatas_size() const;
  private:
  int _internal_framedatas_size() const;

  public:
  void clear_framedatas() ;
  ::msg::g2c::FrameDatas* mutable_framedatas(int index);
  ::google::protobuf::RepeatedPtrField<::msg::g2c::FrameDatas>* mutable_framedatas();

  private:
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::FrameDatas>& _internal_framedatas() const;
  ::google::protobuf::RepeatedPtrField<::msg::g2c::FrameDatas>* _internal_mutable_framedatas();
  public:
  const ::msg::g2c::FrameDatas& framedatas(int index) const;
  ::msg::g2c::FrameDatas* add_framedatas();
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::FrameDatas>& framedatas() const;
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // bool isStart = 3;
  void clear_isstart() ;
  bool isstart() const;
  void set_isstart(bool value);

  private:
  bool _internal_isstart() const;
  void _internal_set_isstart(bool value);

  public:
  // bool isEnd = 4;
  void clear_isend() ;
  bool isend() const;
  void set_isend(bool value);

  private:
  bool _internal_isend() const;
  void _internal_set_isend(bool value);

  public:
  // bool isLaunched = 5;
  void clear_islaunched() ;
  bool islaunched() const;
  void set_islaunched(bool value);

  private:
  bool _internal_islaunched() const;
  void _internal_set_islaunched(bool value);

  public:
  // bool isPaused = 6;
  void clear_ispaused() ;
  bool ispaused() const;
  void set_ispaused(bool value);

  private:
  bool _internal_ispaused() const;
  void _internal_set_ispaused(bool value);

  public:
  // float currentTime = 7;
  void clear_currenttime() ;
  float currenttime() const;
  void set_currenttime(float value);

  private:
  float _internal_currenttime() const;
  void _internal_set_currenttime(float value);

  public:
  // float targetTime = 8;
  void clear_targettime() ;
  float targettime() const;
  void set_targettime(float value);

  private:
  float _internal_targettime() const;
  void _internal_set_targettime(float value);

  public:
  // bool reClocking = 9;
  void clear_reclocking() ;
  bool reclocking() const;
  void set_reclocking(bool value);

  private:
  bool _internal_reclocking() const;
  void _internal_set_reclocking(bool value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.TimerState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TimerState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::msg::g2c::FrameDatas > framedatas_;
    ::uint32_t id_;
    bool isstart_;
    bool isend_;
    bool islaunched_;
    bool ispaused_;
    float currenttime_;
    float targettime_;
    bool reclocking_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class TargetPointInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.TargetPointInfo) */ {
 public:
  inline TargetPointInfo() : TargetPointInfo(nullptr) {}
  ~TargetPointInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TargetPointInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline TargetPointInfo(const TargetPointInfo& from) : TargetPointInfo(nullptr, from) {}
  inline TargetPointInfo(TargetPointInfo&& from) noexcept
      : TargetPointInfo(nullptr, std::move(from)) {}
  inline TargetPointInfo& operator=(const TargetPointInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetPointInfo& operator=(TargetPointInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetPointInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetPointInfo* internal_default_instance() {
    return reinterpret_cast<const TargetPointInfo*>(
        &_TargetPointInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(TargetPointInfo& a, TargetPointInfo& b) { a.Swap(&b); }
  inline void Swap(TargetPointInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetPointInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetPointInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TargetPointInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TargetPointInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TargetPointInfo& from) { TargetPointInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TargetPointInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.TargetPointInfo"; }

 protected:
  explicit TargetPointInfo(::google::protobuf::Arena* arena);
  TargetPointInfo(::google::protobuf::Arena* arena, const TargetPointInfo& from);
  TargetPointInfo(::google::protobuf::Arena* arena, TargetPointInfo&& from) noexcept
      : TargetPointInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPosFieldNumber = 3,
    kRotFieldNumber = 4,
    kSizeFieldNumber = 5,
    kIdFieldNumber = 1,
    kIsDestinationFieldNumber = 2,
    kLevelFieldNumber = 6,
  };
  // .msg.g2c.Vector3D pos = 3;
  bool has_pos() const;
  void clear_pos() ;
  const ::msg::g2c::Vector3D& pos() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_pos();
  ::msg::g2c::Vector3D* mutable_pos();
  void set_allocated_pos(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_pos(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_pos();

  private:
  const ::msg::g2c::Vector3D& _internal_pos() const;
  ::msg::g2c::Vector3D* _internal_mutable_pos();

  public:
  // .msg.g2c.Vector3D rot = 4;
  bool has_rot() const;
  void clear_rot() ;
  const ::msg::g2c::Vector3D& rot() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_rot();
  ::msg::g2c::Vector3D* mutable_rot();
  void set_allocated_rot(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_rot(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_rot();

  private:
  const ::msg::g2c::Vector3D& _internal_rot() const;
  ::msg::g2c::Vector3D* _internal_mutable_rot();

  public:
  // .msg.g2c.Vector3D size = 5;
  bool has_size() const;
  void clear_size() ;
  const ::msg::g2c::Vector3D& size() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_size();
  ::msg::g2c::Vector3D* mutable_size();
  void set_allocated_size(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_size(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_size();

  private:
  const ::msg::g2c::Vector3D& _internal_size() const;
  ::msg::g2c::Vector3D* _internal_mutable_size();

  public:
  // uint64 id = 1;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // bool isDestination = 2;
  void clear_isdestination() ;
  bool isdestination() const;
  void set_isdestination(bool value);

  private:
  bool _internal_isdestination() const;
  void _internal_set_isdestination(bool value);

  public:
  // uint32 level = 6;
  void clear_level() ;
  ::uint32_t level() const;
  void set_level(::uint32_t value);

  private:
  ::uint32_t _internal_level() const;
  void _internal_set_level(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.TargetPointInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TargetPointInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::msg::g2c::Vector3D* pos_;
    ::msg::g2c::Vector3D* rot_;
    ::msg::g2c::Vector3D* size_;
    ::uint64_t id_;
    bool isdestination_;
    ::uint32_t level_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class PropState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.PropState) */ {
 public:
  inline PropState() : PropState(nullptr) {}
  ~PropState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PropState(
      ::google::protobuf::internal::ConstantInitialized);

  inline PropState(const PropState& from) : PropState(nullptr, from) {}
  inline PropState(PropState&& from) noexcept
      : PropState(nullptr, std::move(from)) {}
  inline PropState& operator=(const PropState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropState& operator=(PropState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropState* internal_default_instance() {
    return reinterpret_cast<const PropState*>(
        &_PropState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(PropState& a, PropState& b) { a.Swap(&b); }
  inline void Swap(PropState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PropState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PropState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PropState& from) { PropState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PropState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.PropState"; }

 protected:
  explicit PropState(::google::protobuf::Arena* arena);
  PropState(::google::protobuf::Arena* arena, const PropState& from);
  PropState(::google::protobuf::Arena* arena, PropState&& from) noexcept
      : PropState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPosFieldNumber = 2,
    kRotFieldNumber = 3,
    kSizeFieldNumber = 4,
    kSpeedFieldNumber = 10,
    kIdFieldNumber = 1,
    kPropFuncTypeFieldNumber = 5,
    kUseTypeFieldNumber = 6,
    kDurableFieldNumber = 7,
    kCdFieldNumber = 8,
    kDelayedDestroyFieldNumber = 9,
  };
  // .msg.g2c.Vector3D pos = 2;
  bool has_pos() const;
  void clear_pos() ;
  const ::msg::g2c::Vector3D& pos() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_pos();
  ::msg::g2c::Vector3D* mutable_pos();
  void set_allocated_pos(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_pos(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_pos();

  private:
  const ::msg::g2c::Vector3D& _internal_pos() const;
  ::msg::g2c::Vector3D* _internal_mutable_pos();

  public:
  // .msg.g2c.Vector3D rot = 3;
  bool has_rot() const;
  void clear_rot() ;
  const ::msg::g2c::Vector3D& rot() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_rot();
  ::msg::g2c::Vector3D* mutable_rot();
  void set_allocated_rot(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_rot(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_rot();

  private:
  const ::msg::g2c::Vector3D& _internal_rot() const;
  ::msg::g2c::Vector3D* _internal_mutable_rot();

  public:
  // .msg.g2c.Vector3D size = 4;
  bool has_size() const;
  void clear_size() ;
  const ::msg::g2c::Vector3D& size() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_size();
  ::msg::g2c::Vector3D* mutable_size();
  void set_allocated_size(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_size(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_size();

  private:
  const ::msg::g2c::Vector3D& _internal_size() const;
  ::msg::g2c::Vector3D* _internal_mutable_size();

  public:
  // .msg.g2c.Vector3D speed = 10;
  bool has_speed() const;
  void clear_speed() ;
  const ::msg::g2c::Vector3D& speed() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_speed();
  ::msg::g2c::Vector3D* mutable_speed();
  void set_allocated_speed(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_speed(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_speed();

  private:
  const ::msg::g2c::Vector3D& _internal_speed() const;
  ::msg::g2c::Vector3D* _internal_mutable_speed();

  public:
  // uint64 id = 1;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // .msg.g2c.PropFuncType propFuncType = 5;
  void clear_propfunctype() ;
  ::msg::g2c::PropFuncType propfunctype() const;
  void set_propfunctype(::msg::g2c::PropFuncType value);

  private:
  ::msg::g2c::PropFuncType _internal_propfunctype() const;
  void _internal_set_propfunctype(::msg::g2c::PropFuncType value);

  public:
  // .msg.g2c.PropUseType useType = 6;
  void clear_usetype() ;
  ::msg::g2c::PropUseType usetype() const;
  void set_usetype(::msg::g2c::PropUseType value);

  private:
  ::msg::g2c::PropUseType _internal_usetype() const;
  void _internal_set_usetype(::msg::g2c::PropUseType value);

  public:
  // uint32 durable = 7;
  void clear_durable() ;
  ::uint32_t durable() const;
  void set_durable(::uint32_t value);

  private:
  ::uint32_t _internal_durable() const;
  void _internal_set_durable(::uint32_t value);

  public:
  // uint32 cd = 8;
  void clear_cd() ;
  ::uint32_t cd() const;
  void set_cd(::uint32_t value);

  private:
  ::uint32_t _internal_cd() const;
  void _internal_set_cd(::uint32_t value);

  public:
  // uint32 delayedDestroy = 9;
  void clear_delayeddestroy() ;
  ::uint32_t delayeddestroy() const;
  void set_delayeddestroy(::uint32_t value);

  private:
  ::uint32_t _internal_delayeddestroy() const;
  void _internal_set_delayeddestroy(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.PropState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PropState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::msg::g2c::Vector3D* pos_;
    ::msg::g2c::Vector3D* rot_;
    ::msg::g2c::Vector3D* size_;
    ::msg::g2c::Vector3D* speed_;
    ::uint64_t id_;
    int propfunctype_;
    int usetype_;
    ::uint32_t durable_;
    ::uint32_t cd_;
    ::uint32_t delayeddestroy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class MapHeightInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.MapHeightInfo) */ {
 public:
  inline MapHeightInfo() : MapHeightInfo(nullptr) {}
  ~MapHeightInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MapHeightInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline MapHeightInfo(const MapHeightInfo& from) : MapHeightInfo(nullptr, from) {}
  inline MapHeightInfo(MapHeightInfo&& from) noexcept
      : MapHeightInfo(nullptr, std::move(from)) {}
  inline MapHeightInfo& operator=(const MapHeightInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapHeightInfo& operator=(MapHeightInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapHeightInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapHeightInfo* internal_default_instance() {
    return reinterpret_cast<const MapHeightInfo*>(
        &_MapHeightInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(MapHeightInfo& a, MapHeightInfo& b) { a.Swap(&b); }
  inline void Swap(MapHeightInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapHeightInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapHeightInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MapHeightInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MapHeightInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MapHeightInfo& from) { MapHeightInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MapHeightInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.MapHeightInfo"; }

 protected:
  explicit MapHeightInfo(::google::protobuf::Arena* arena);
  MapHeightInfo(::google::protobuf::Arena* arena, const MapHeightInfo& from);
  MapHeightInfo(::google::protobuf::Arena* arena, MapHeightInfo&& from) noexcept
      : MapHeightInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeightValueFieldNumber = 6,
    kOriginPosFieldNumber = 1,
    kGranularityHeightFieldNumber = 2,
    kGranularityWidthFieldNumber = 3,
    kMapHeightFieldNumber = 4,
    kMapWidthFieldNumber = 5,
  };
  // repeated float heightValue = 6;
  int heightvalue_size() const;
  private:
  int _internal_heightvalue_size() const;

  public:
  void clear_heightvalue() ;
  float heightvalue(int index) const;
  void set_heightvalue(int index, float value);
  void add_heightvalue(float value);
  const ::google::protobuf::RepeatedField<float>& heightvalue() const;
  ::google::protobuf::RepeatedField<float>* mutable_heightvalue();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_heightvalue() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_heightvalue();

  public:
  // .msg.g2c.Vector3D originPos = 1;
  bool has_originpos() const;
  void clear_originpos() ;
  const ::msg::g2c::Vector3D& originpos() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_originpos();
  ::msg::g2c::Vector3D* mutable_originpos();
  void set_allocated_originpos(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_originpos(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_originpos();

  private:
  const ::msg::g2c::Vector3D& _internal_originpos() const;
  ::msg::g2c::Vector3D* _internal_mutable_originpos();

  public:
  // float granularityHeight = 2;
  void clear_granularityheight() ;
  float granularityheight() const;
  void set_granularityheight(float value);

  private:
  float _internal_granularityheight() const;
  void _internal_set_granularityheight(float value);

  public:
  // float granularityWidth = 3;
  void clear_granularitywidth() ;
  float granularitywidth() const;
  void set_granularitywidth(float value);

  private:
  float _internal_granularitywidth() const;
  void _internal_set_granularitywidth(float value);

  public:
  // float mapHeight = 4;
  void clear_mapheight() ;
  float mapheight() const;
  void set_mapheight(float value);

  private:
  float _internal_mapheight() const;
  void _internal_set_mapheight(float value);

  public:
  // float mapWidth = 5;
  void clear_mapwidth() ;
  float mapwidth() const;
  void set_mapwidth(float value);

  private:
  float _internal_mapwidth() const;
  void _internal_set_mapwidth(float value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.MapHeightInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MapHeightInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> heightvalue_;
    ::msg::g2c::Vector3D* originpos_;
    float granularityheight_;
    float granularitywidth_;
    float mapheight_;
    float mapwidth_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class ItemWayPoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.ItemWayPoint) */ {
 public:
  inline ItemWayPoint() : ItemWayPoint(nullptr) {}
  ~ItemWayPoint() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ItemWayPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline ItemWayPoint(const ItemWayPoint& from) : ItemWayPoint(nullptr, from) {}
  inline ItemWayPoint(ItemWayPoint&& from) noexcept
      : ItemWayPoint(nullptr, std::move(from)) {}
  inline ItemWayPoint& operator=(const ItemWayPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemWayPoint& operator=(ItemWayPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemWayPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemWayPoint* internal_default_instance() {
    return reinterpret_cast<const ItemWayPoint*>(
        &_ItemWayPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ItemWayPoint& a, ItemWayPoint& b) { a.Swap(&b); }
  inline void Swap(ItemWayPoint* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemWayPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemWayPoint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ItemWayPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ItemWayPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ItemWayPoint& from) { ItemWayPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ItemWayPoint* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.ItemWayPoint"; }

 protected:
  explicit ItemWayPoint(::google::protobuf::Arena* arena);
  ItemWayPoint(::google::protobuf::Arena* arena, const ItemWayPoint& from);
  ItemWayPoint(::google::protobuf::Arena* arena, ItemWayPoint&& from) noexcept
      : ItemWayPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPosFieldNumber = 1,
    kNormalFieldNumber = 2,
  };
  // .msg.g2c.Vector3D pos = 1;
  bool has_pos() const;
  void clear_pos() ;
  const ::msg::g2c::Vector3D& pos() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_pos();
  ::msg::g2c::Vector3D* mutable_pos();
  void set_allocated_pos(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_pos(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_pos();

  private:
  const ::msg::g2c::Vector3D& _internal_pos() const;
  ::msg::g2c::Vector3D* _internal_mutable_pos();

  public:
  // .msg.g2c.Vector3D normal = 2;
  bool has_normal() const;
  void clear_normal() ;
  const ::msg::g2c::Vector3D& normal() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_normal();
  ::msg::g2c::Vector3D* mutable_normal();
  void set_allocated_normal(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_normal(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_normal();

  private:
  const ::msg::g2c::Vector3D& _internal_normal() const;
  ::msg::g2c::Vector3D* _internal_mutable_normal();

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.ItemWayPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ItemWayPoint_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::msg::g2c::Vector3D* pos_;
    ::msg::g2c::Vector3D* normal_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class GamePointInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.GamePointInfo) */ {
 public:
  inline GamePointInfo() : GamePointInfo(nullptr) {}
  ~GamePointInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GamePointInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GamePointInfo(const GamePointInfo& from) : GamePointInfo(nullptr, from) {}
  inline GamePointInfo(GamePointInfo&& from) noexcept
      : GamePointInfo(nullptr, std::move(from)) {}
  inline GamePointInfo& operator=(const GamePointInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GamePointInfo& operator=(GamePointInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GamePointInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GamePointInfo* internal_default_instance() {
    return reinterpret_cast<const GamePointInfo*>(
        &_GamePointInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(GamePointInfo& a, GamePointInfo& b) { a.Swap(&b); }
  inline void Swap(GamePointInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GamePointInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GamePointInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GamePointInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GamePointInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GamePointInfo& from) { GamePointInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GamePointInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.GamePointInfo"; }

 protected:
  explicit GamePointInfo(::google::protobuf::Arena* arena);
  GamePointInfo(::google::protobuf::Arena* arena, const GamePointInfo& from);
  GamePointInfo(::google::protobuf::Arena* arena, GamePointInfo&& from) noexcept
      : GamePointInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPosFieldNumber = 3,
    kRotFieldNumber = 4,
    kSizeFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLevelFieldNumber = 6,
  };
  // .msg.g2c.Vector3D pos = 3;
  bool has_pos() const;
  void clear_pos() ;
  const ::msg::g2c::Vector3D& pos() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_pos();
  ::msg::g2c::Vector3D* mutable_pos();
  void set_allocated_pos(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_pos(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_pos();

  private:
  const ::msg::g2c::Vector3D& _internal_pos() const;
  ::msg::g2c::Vector3D* _internal_mutable_pos();

  public:
  // .msg.g2c.Vector3D rot = 4;
  bool has_rot() const;
  void clear_rot() ;
  const ::msg::g2c::Vector3D& rot() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_rot();
  ::msg::g2c::Vector3D* mutable_rot();
  void set_allocated_rot(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_rot(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_rot();

  private:
  const ::msg::g2c::Vector3D& _internal_rot() const;
  ::msg::g2c::Vector3D* _internal_mutable_rot();

  public:
  // .msg.g2c.Vector3D size = 5;
  bool has_size() const;
  void clear_size() ;
  const ::msg::g2c::Vector3D& size() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_size();
  ::msg::g2c::Vector3D* mutable_size();
  void set_allocated_size(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_size(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_size();

  private:
  const ::msg::g2c::Vector3D& _internal_size() const;
  ::msg::g2c::Vector3D* _internal_mutable_size();

  public:
  // uint64 id = 1;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // .msg.g2c.GamePointType type = 2;
  void clear_type() ;
  ::msg::g2c::GamePointType type() const;
  void set_type(::msg::g2c::GamePointType value);

  private:
  ::msg::g2c::GamePointType _internal_type() const;
  void _internal_set_type(::msg::g2c::GamePointType value);

  public:
  // uint32 level = 6;
  void clear_level() ;
  ::uint32_t level() const;
  void set_level(::uint32_t value);

  private:
  ::uint32_t _internal_level() const;
  void _internal_set_level(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.GamePointInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GamePointInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::msg::g2c::Vector3D* pos_;
    ::msg::g2c::Vector3D* rot_;
    ::msg::g2c::Vector3D* size_;
    ::uint64_t id_;
    int type_;
    ::uint32_t level_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class GameGlobalInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.GameGlobalInfo) */ {
 public:
  inline GameGlobalInfo() : GameGlobalInfo(nullptr) {}
  ~GameGlobalInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameGlobalInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameGlobalInfo(const GameGlobalInfo& from) : GameGlobalInfo(nullptr, from) {}
  inline GameGlobalInfo(GameGlobalInfo&& from) noexcept
      : GameGlobalInfo(nullptr, std::move(from)) {}
  inline GameGlobalInfo& operator=(const GameGlobalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameGlobalInfo& operator=(GameGlobalInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameGlobalInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameGlobalInfo* internal_default_instance() {
    return reinterpret_cast<const GameGlobalInfo*>(
        &_GameGlobalInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(GameGlobalInfo& a, GameGlobalInfo& b) { a.Swap(&b); }
  inline void Swap(GameGlobalInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameGlobalInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameGlobalInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GameGlobalInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameGlobalInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameGlobalInfo& from) { GameGlobalInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameGlobalInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.GameGlobalInfo"; }

 protected:
  explicit GameGlobalInfo(::google::protobuf::Arena* arena);
  GameGlobalInfo(::google::protobuf::Arena* arena, const GameGlobalInfo& from);
  GameGlobalInfo(::google::protobuf::Arena* arena, GameGlobalInfo&& from) noexcept
      : GameGlobalInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMapInfoFieldNumber = 1,
  };
  // repeated .msg.g2c.MapInfo mapInfo = 1;
  int mapinfo_size() const;
  private:
  int _internal_mapinfo_size() const;

  public:
  void clear_mapinfo() ;
  ::msg::g2c::MapInfo* mutable_mapinfo(int index);
  ::google::protobuf::RepeatedPtrField<::msg::g2c::MapInfo>* mutable_mapinfo();

  private:
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::MapInfo>& _internal_mapinfo() const;
  ::google::protobuf::RepeatedPtrField<::msg::g2c::MapInfo>* _internal_mutable_mapinfo();
  public:
  const ::msg::g2c::MapInfo& mapinfo(int index) const;
  ::msg::g2c::MapInfo* add_mapinfo();
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::MapInfo>& mapinfo() const;
  // @@protoc_insertion_point(class_scope:msg.g2c.GameGlobalInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameGlobalInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::msg::g2c::MapInfo > mapinfo_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class AgentState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.AgentState) */ {
 public:
  inline AgentState() : AgentState(nullptr) {}
  ~AgentState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AgentState(
      ::google::protobuf::internal::ConstantInitialized);

  inline AgentState(const AgentState& from) : AgentState(nullptr, from) {}
  inline AgentState(AgentState&& from) noexcept
      : AgentState(nullptr, std::move(from)) {}
  inline AgentState& operator=(const AgentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentState& operator=(AgentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentState* internal_default_instance() {
    return reinterpret_cast<const AgentState*>(
        &_AgentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(AgentState& a, AgentState& b) { a.Swap(&b); }
  inline void Swap(AgentState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AgentState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AgentState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AgentState& from) { AgentState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AgentState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.AgentState"; }

 protected:
  explicit AgentState(::google::protobuf::Arena* arena);
  AgentState(::google::protobuf::Arena* arena, const AgentState& from);
  AgentState(::google::protobuf::Arena* arena, AgentState&& from) noexcept
      : AgentState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPassTargetPointFieldNumber = 12,
    kPosFieldNumber = 2,
    kRotFieldNumber = 3,
    kVelFieldNumber = 4,
    kAgentPropFieldNumber = 6,
    kForwardFieldNumber = 9,
    kRightFieldNumber = 10,
    kUpFieldNumber = 11,
    kGoalPointFieldNumber = 13,
    kIdFieldNumber = 1,
    kAnimationStateFieldNumber = 5,
    kEndGameStateFieldNumber = 8,
    kDoNotCtrlFieldNumber = 7,
    kInvincibleFieldNumber = 14,
    kCurHPFieldNumber = 15,
    kMaxHPFieldNumber = 16,
  };
  // repeated uint32 passTargetPoint = 12;
  int passtargetpoint_size() const;
  private:
  int _internal_passtargetpoint_size() const;

  public:
  void clear_passtargetpoint() ;
  ::uint32_t passtargetpoint(int index) const;
  void set_passtargetpoint(int index, ::uint32_t value);
  void add_passtargetpoint(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& passtargetpoint() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_passtargetpoint();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_passtargetpoint() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_passtargetpoint();

  public:
  // .msg.g2c.Vector3D pos = 2;
  bool has_pos() const;
  void clear_pos() ;
  const ::msg::g2c::Vector3D& pos() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_pos();
  ::msg::g2c::Vector3D* mutable_pos();
  void set_allocated_pos(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_pos(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_pos();

  private:
  const ::msg::g2c::Vector3D& _internal_pos() const;
  ::msg::g2c::Vector3D* _internal_mutable_pos();

  public:
  // .msg.g2c.Vector3D rot = 3;
  bool has_rot() const;
  void clear_rot() ;
  const ::msg::g2c::Vector3D& rot() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_rot();
  ::msg::g2c::Vector3D* mutable_rot();
  void set_allocated_rot(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_rot(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_rot();

  private:
  const ::msg::g2c::Vector3D& _internal_rot() const;
  ::msg::g2c::Vector3D* _internal_mutable_rot();

  public:
  // .msg.g2c.Vector3D vel = 4;
  bool has_vel() const;
  void clear_vel() ;
  const ::msg::g2c::Vector3D& vel() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_vel();
  ::msg::g2c::Vector3D* mutable_vel();
  void set_allocated_vel(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_vel(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_vel();

  private:
  const ::msg::g2c::Vector3D& _internal_vel() const;
  ::msg::g2c::Vector3D* _internal_mutable_vel();

  public:
  // .msg.g2c.AgentPropState agentProp = 6;
  bool has_agentprop() const;
  void clear_agentprop() ;
  const ::msg::g2c::AgentPropState& agentprop() const;
  PROTOBUF_NODISCARD ::msg::g2c::AgentPropState* release_agentprop();
  ::msg::g2c::AgentPropState* mutable_agentprop();
  void set_allocated_agentprop(::msg::g2c::AgentPropState* value);
  void unsafe_arena_set_allocated_agentprop(::msg::g2c::AgentPropState* value);
  ::msg::g2c::AgentPropState* unsafe_arena_release_agentprop();

  private:
  const ::msg::g2c::AgentPropState& _internal_agentprop() const;
  ::msg::g2c::AgentPropState* _internal_mutable_agentprop();

  public:
  // .msg.g2c.Vector3D forward = 9;
  bool has_forward() const;
  void clear_forward() ;
  const ::msg::g2c::Vector3D& forward() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_forward();
  ::msg::g2c::Vector3D* mutable_forward();
  void set_allocated_forward(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_forward(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_forward();

  private:
  const ::msg::g2c::Vector3D& _internal_forward() const;
  ::msg::g2c::Vector3D* _internal_mutable_forward();

  public:
  // .msg.g2c.Vector3D right = 10;
  bool has_right() const;
  void clear_right() ;
  const ::msg::g2c::Vector3D& right() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_right();
  ::msg::g2c::Vector3D* mutable_right();
  void set_allocated_right(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_right(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_right();

  private:
  const ::msg::g2c::Vector3D& _internal_right() const;
  ::msg::g2c::Vector3D* _internal_mutable_right();

  public:
  // .msg.g2c.Vector3D up = 11;
  bool has_up() const;
  void clear_up() ;
  const ::msg::g2c::Vector3D& up() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_up();
  ::msg::g2c::Vector3D* mutable_up();
  void set_allocated_up(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_up(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_up();

  private:
  const ::msg::g2c::Vector3D& _internal_up() const;
  ::msg::g2c::Vector3D* _internal_mutable_up();

  public:
  // .msg.g2c.Vector3D goalPoint = 13;
  bool has_goalpoint() const;
  void clear_goalpoint() ;
  const ::msg::g2c::Vector3D& goalpoint() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_goalpoint();
  ::msg::g2c::Vector3D* mutable_goalpoint();
  void set_allocated_goalpoint(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_goalpoint(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_goalpoint();

  private:
  const ::msg::g2c::Vector3D& _internal_goalpoint() const;
  ::msg::g2c::Vector3D* _internal_mutable_goalpoint();

  public:
  // uint64 id = 1;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // .msg.g2c.AnimationStateType animationState = 5;
  void clear_animationstate() ;
  ::msg::g2c::AnimationStateType animationstate() const;
  void set_animationstate(::msg::g2c::AnimationStateType value);

  private:
  ::msg::g2c::AnimationStateType _internal_animationstate() const;
  void _internal_set_animationstate(::msg::g2c::AnimationStateType value);

  public:
  // .msg.g2c.EndGameType endGameState = 8;
  void clear_endgamestate() ;
  ::msg::g2c::EndGameType endgamestate() const;
  void set_endgamestate(::msg::g2c::EndGameType value);

  private:
  ::msg::g2c::EndGameType _internal_endgamestate() const;
  void _internal_set_endgamestate(::msg::g2c::EndGameType value);

  public:
  // bool doNotCtrl = 7;
  void clear_donotctrl() ;
  bool donotctrl() const;
  void set_donotctrl(bool value);

  private:
  bool _internal_donotctrl() const;
  void _internal_set_donotctrl(bool value);

  public:
  // bool Invincible = 14;
  void clear_invincible() ;
  bool invincible() const;
  void set_invincible(bool value);

  private:
  bool _internal_invincible() const;
  void _internal_set_invincible(bool value);

  public:
  // float curHP = 15;
  void clear_curhp() ;
  float curhp() const;
  void set_curhp(float value);

  private:
  float _internal_curhp() const;
  void _internal_set_curhp(float value);

  public:
  // float maxHP = 16;
  void clear_maxhp() ;
  float maxhp() const;
  void set_maxhp(float value);

  private:
  float _internal_maxhp() const;
  void _internal_set_maxhp(float value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.AgentState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 8,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AgentState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint32_t> passtargetpoint_;
    mutable ::google::protobuf::internal::CachedSize _passtargetpoint_cached_byte_size_;
    ::msg::g2c::Vector3D* pos_;
    ::msg::g2c::Vector3D* rot_;
    ::msg::g2c::Vector3D* vel_;
    ::msg::g2c::AgentPropState* agentprop_;
    ::msg::g2c::Vector3D* forward_;
    ::msg::g2c::Vector3D* right_;
    ::msg::g2c::Vector3D* up_;
    ::msg::g2c::Vector3D* goalpoint_;
    ::uint64_t id_;
    int animationstate_;
    int endgamestate_;
    bool donotctrl_;
    bool invincible_;
    float curhp_;
    float maxhp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class ItemState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.ItemState) */ {
 public:
  inline ItemState() : ItemState(nullptr) {}
  ~ItemState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ItemState(
      ::google::protobuf::internal::ConstantInitialized);

  inline ItemState(const ItemState& from) : ItemState(nullptr, from) {}
  inline ItemState(ItemState&& from) noexcept
      : ItemState(nullptr, std::move(from)) {}
  inline ItemState& operator=(const ItemState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemState& operator=(ItemState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemState* internal_default_instance() {
    return reinterpret_cast<const ItemState*>(
        &_ItemState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(ItemState& a, ItemState& b) { a.Swap(&b); }
  inline void Swap(ItemState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ItemState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ItemState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ItemState& from) { ItemState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ItemState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.ItemState"; }

 protected:
  explicit ItemState(::google::protobuf::Arena* arena);
  ItemState(::google::protobuf::Arena* arena, const ItemState& from);
  ItemState(::google::protobuf::Arena* arena, ItemState&& from) noexcept
      : ItemState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWayPointsFieldNumber = 10,
    kItemFuncDataFieldNumber = 9,
    kPosFieldNumber = 2,
    kRotFieldNumber = 3,
    kSizeFieldNumber = 4,
    kVelocityFieldNumber = 7,
    kAngularVelocityFieldNumber = 8,
    kIdFieldNumber = 1,
    kShapeTypeFieldNumber = 5,
    kFuncTypeFieldNumber = 6,
    kCreateByPropFieldNumber = 12,
    kItemTemplateIdFieldNumber = 11,
    kPropItemLevelFieldNumber = 13,
  };
  // repeated .msg.g2c.ItemWayPoint wayPoints = 10;
  int waypoints_size() const;
  private:
  int _internal_waypoints_size() const;

  public:
  void clear_waypoints() ;
  ::msg::g2c::ItemWayPoint* mutable_waypoints(int index);
  ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemWayPoint>* mutable_waypoints();

  private:
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemWayPoint>& _internal_waypoints() const;
  ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemWayPoint>* _internal_mutable_waypoints();
  public:
  const ::msg::g2c::ItemWayPoint& waypoints(int index) const;
  ::msg::g2c::ItemWayPoint* add_waypoints();
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemWayPoint>& waypoints() const;
  // string itemFuncData = 9;
  void clear_itemfuncdata() ;
  const std::string& itemfuncdata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_itemfuncdata(Arg_&& arg, Args_... args);
  std::string* mutable_itemfuncdata();
  PROTOBUF_NODISCARD std::string* release_itemfuncdata();
  void set_allocated_itemfuncdata(std::string* value);

  private:
  const std::string& _internal_itemfuncdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_itemfuncdata(
      const std::string& value);
  std::string* _internal_mutable_itemfuncdata();

  public:
  // .msg.g2c.Vector3D pos = 2;
  bool has_pos() const;
  void clear_pos() ;
  const ::msg::g2c::Vector3D& pos() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_pos();
  ::msg::g2c::Vector3D* mutable_pos();
  void set_allocated_pos(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_pos(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_pos();

  private:
  const ::msg::g2c::Vector3D& _internal_pos() const;
  ::msg::g2c::Vector3D* _internal_mutable_pos();

  public:
  // .msg.g2c.Vector3D rot = 3;
  bool has_rot() const;
  void clear_rot() ;
  const ::msg::g2c::Vector3D& rot() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_rot();
  ::msg::g2c::Vector3D* mutable_rot();
  void set_allocated_rot(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_rot(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_rot();

  private:
  const ::msg::g2c::Vector3D& _internal_rot() const;
  ::msg::g2c::Vector3D* _internal_mutable_rot();

  public:
  // .msg.g2c.Vector3D size = 4;
  bool has_size() const;
  void clear_size() ;
  const ::msg::g2c::Vector3D& size() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_size();
  ::msg::g2c::Vector3D* mutable_size();
  void set_allocated_size(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_size(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_size();

  private:
  const ::msg::g2c::Vector3D& _internal_size() const;
  ::msg::g2c::Vector3D* _internal_mutable_size();

  public:
  // .msg.g2c.Vector3D velocity = 7;
  bool has_velocity() const;
  void clear_velocity() ;
  const ::msg::g2c::Vector3D& velocity() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_velocity();
  ::msg::g2c::Vector3D* mutable_velocity();
  void set_allocated_velocity(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_velocity(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_velocity();

  private:
  const ::msg::g2c::Vector3D& _internal_velocity() const;
  ::msg::g2c::Vector3D* _internal_mutable_velocity();

  public:
  // .msg.g2c.Vector3D angularVelocity = 8;
  bool has_angularvelocity() const;
  void clear_angularvelocity() ;
  const ::msg::g2c::Vector3D& angularvelocity() const;
  PROTOBUF_NODISCARD ::msg::g2c::Vector3D* release_angularvelocity();
  ::msg::g2c::Vector3D* mutable_angularvelocity();
  void set_allocated_angularvelocity(::msg::g2c::Vector3D* value);
  void unsafe_arena_set_allocated_angularvelocity(::msg::g2c::Vector3D* value);
  ::msg::g2c::Vector3D* unsafe_arena_release_angularvelocity();

  private:
  const ::msg::g2c::Vector3D& _internal_angularvelocity() const;
  ::msg::g2c::Vector3D* _internal_mutable_angularvelocity();

  public:
  // uint64 id = 1;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // .msg.g2c.ShapeType shapeType = 5;
  void clear_shapetype() ;
  ::msg::g2c::ShapeType shapetype() const;
  void set_shapetype(::msg::g2c::ShapeType value);

  private:
  ::msg::g2c::ShapeType _internal_shapetype() const;
  void _internal_set_shapetype(::msg::g2c::ShapeType value);

  public:
  // .msg.g2c.ItemFuncType funcType = 6;
  void clear_functype() ;
  ::msg::g2c::ItemFuncType functype() const;
  void set_functype(::msg::g2c::ItemFuncType value);

  private:
  ::msg::g2c::ItemFuncType _internal_functype() const;
  void _internal_set_functype(::msg::g2c::ItemFuncType value);

  public:
  // uint64 createByProp = 12;
  void clear_createbyprop() ;
  ::uint64_t createbyprop() const;
  void set_createbyprop(::uint64_t value);

  private:
  ::uint64_t _internal_createbyprop() const;
  void _internal_set_createbyprop(::uint64_t value);

  public:
  // uint32 itemTemplateId = 11;
  void clear_itemtemplateid() ;
  ::uint32_t itemtemplateid() const;
  void set_itemtemplateid(::uint32_t value);

  private:
  ::uint32_t _internal_itemtemplateid() const;
  void _internal_set_itemtemplateid(::uint32_t value);

  public:
  // uint32 propItemLevel = 13;
  void clear_propitemlevel() ;
  ::uint32_t propitemlevel() const;
  void set_propitemlevel(::uint32_t value);

  private:
  ::uint32_t _internal_propitemlevel() const;
  void _internal_set_propitemlevel(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.ItemState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 6,
      46, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ItemState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::msg::g2c::ItemWayPoint > waypoints_;
    ::google::protobuf::internal::ArenaStringPtr itemfuncdata_;
    ::msg::g2c::Vector3D* pos_;
    ::msg::g2c::Vector3D* rot_;
    ::msg::g2c::Vector3D* size_;
    ::msg::g2c::Vector3D* velocity_;
    ::msg::g2c::Vector3D* angularvelocity_;
    ::uint64_t id_;
    int shapetype_;
    int functype_;
    ::uint64_t createbyprop_;
    ::uint32_t itemtemplateid_;
    ::uint32_t propitemlevel_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class GameState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {}
  ~GameState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameState(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameState(const GameState& from) : GameState(nullptr, from) {}
  inline GameState(GameState&& from) noexcept
      : GameState(nullptr, std::move(from)) {}
  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
        &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(GameState& a, GameState& b) { a.Swap(&b); }
  inline void Swap(GameState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GameState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameState& from) { GameState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.GameState"; }

 protected:
  explicit GameState(::google::protobuf::Arena* arena);
  GameState(::google::protobuf::Arena* arena, const GameState& from);
  GameState(::google::protobuf::Arena* arena, GameState&& from) noexcept
      : GameState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTargetPointsInfoFieldNumber = 5,
    kTimestampFieldNumber = 1,
    kTimeLeftFieldNumber = 2,
    kMapIdFieldNumber = 3,
    kIsGameEndFieldNumber = 4,
  };
  // repeated .msg.g2c.TargetPointInfo targetPointsInfo = 5;
  int targetpointsinfo_size() const;
  private:
  int _internal_targetpointsinfo_size() const;

  public:
  void clear_targetpointsinfo() ;
  ::msg::g2c::TargetPointInfo* mutable_targetpointsinfo(int index);
  ::google::protobuf::RepeatedPtrField<::msg::g2c::TargetPointInfo>* mutable_targetpointsinfo();

  private:
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::TargetPointInfo>& _internal_targetpointsinfo() const;
  ::google::protobuf::RepeatedPtrField<::msg::g2c::TargetPointInfo>* _internal_mutable_targetpointsinfo();
  public:
  const ::msg::g2c::TargetPointInfo& targetpointsinfo(int index) const;
  ::msg::g2c::TargetPointInfo* add_targetpointsinfo();
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::TargetPointInfo>& targetpointsinfo() const;
  // uint64 timestamp = 1;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // float timeLeft = 2;
  void clear_timeleft() ;
  float timeleft() const;
  void set_timeleft(float value);

  private:
  float _internal_timeleft() const;
  void _internal_set_timeleft(float value);

  public:
  // uint32 mapId = 3;
  void clear_mapid() ;
  ::uint32_t mapid() const;
  void set_mapid(::uint32_t value);

  private:
  ::uint32_t _internal_mapid() const;
  void _internal_set_mapid(::uint32_t value);

  public:
  // bool isGameEnd = 4;
  void clear_isgameend() ;
  bool isgameend() const;
  void set_isgameend(bool value);

  private:
  bool _internal_isgameend() const;
  void _internal_set_isgameend(bool value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.GameState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::msg::g2c::TargetPointInfo > targetpointsinfo_;
    ::uint64_t timestamp_;
    float timeleft_;
    ::uint32_t mapid_;
    bool isgameend_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class GameInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.GameInfo) */ {
 public:
  inline GameInfo() : GameInfo(nullptr) {}
  ~GameInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameInfo(const GameInfo& from) : GameInfo(nullptr, from) {}
  inline GameInfo(GameInfo&& from) noexcept
      : GameInfo(nullptr, std::move(from)) {}
  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameInfo& operator=(GameInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameInfo* internal_default_instance() {
    return reinterpret_cast<const GameInfo*>(
        &_GameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(GameInfo& a, GameInfo& b) { a.Swap(&b); }
  inline void Swap(GameInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GameInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameInfo& from) { GameInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.GameInfo"; }

 protected:
  explicit GameInfo(::google::protobuf::Arena* arena);
  GameInfo(::google::protobuf::Arena* arena, const GameInfo& from);
  GameInfo(::google::protobuf::Arena* arena, GameInfo&& from) noexcept
      : GameInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGamePointsFieldNumber = 1,
  };
  // repeated .msg.g2c.GamePointInfo gamePoints = 1;
  int gamepoints_size() const;
  private:
  int _internal_gamepoints_size() const;

  public:
  void clear_gamepoints() ;
  ::msg::g2c::GamePointInfo* mutable_gamepoints(int index);
  ::google::protobuf::RepeatedPtrField<::msg::g2c::GamePointInfo>* mutable_gamepoints();

  private:
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::GamePointInfo>& _internal_gamepoints() const;
  ::google::protobuf::RepeatedPtrField<::msg::g2c::GamePointInfo>* _internal_mutable_gamepoints();
  public:
  const ::msg::g2c::GamePointInfo& gamepoints(int index) const;
  ::msg::g2c::GamePointInfo* add_gamepoints();
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::GamePointInfo>& gamepoints() const;
  // @@protoc_insertion_point(class_scope:msg.g2c.GameInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::msg::g2c::GamePointInfo > gamepoints_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};
// -------------------------------------------------------------------

class GameMassage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msg.g2c.GameMassage) */ {
 public:
  inline GameMassage() : GameMassage(nullptr) {}
  ~GameMassage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameMassage(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameMassage(const GameMassage& from) : GameMassage(nullptr, from) {}
  inline GameMassage(GameMassage&& from) noexcept
      : GameMassage(nullptr, std::move(from)) {}
  inline GameMassage& operator=(const GameMassage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameMassage& operator=(GameMassage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameMassage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameMassage* internal_default_instance() {
    return reinterpret_cast<const GameMassage*>(
        &_GameMassage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(GameMassage& a, GameMassage& b) { a.Swap(&b); }
  inline void Swap(GameMassage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameMassage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameMassage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GameMassage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameMassage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameMassage& from) { GameMassage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameMassage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "msg.g2c.GameMassage"; }

 protected:
  explicit GameMassage(::google::protobuf::Arena* arena);
  GameMassage(::google::protobuf::Arena* arena, const GameMassage& from);
  GameMassage(::google::protobuf::Arena* arena, GameMassage&& from) noexcept
      : GameMassage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAgentsStateFieldNumber = 5,
    kItemsStateFieldNumber = 6,
    kPropsStateFieldNumber = 7,
    kEventsInfoFieldNumber = 8,
    kTimersStateFieldNumber = 9,
    kGameGlobalInfoFieldNumber = 2,
    kGameInfoFieldNumber = 3,
    kGameStateFieldNumber = 4,
    kMessageTypeFieldNumber = 1,
  };
  // repeated .msg.g2c.AgentState agentsState = 5;
  int agentsstate_size() const;
  private:
  int _internal_agentsstate_size() const;

  public:
  void clear_agentsstate() ;
  ::msg::g2c::AgentState* mutable_agentsstate(int index);
  ::google::protobuf::RepeatedPtrField<::msg::g2c::AgentState>* mutable_agentsstate();

  private:
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::AgentState>& _internal_agentsstate() const;
  ::google::protobuf::RepeatedPtrField<::msg::g2c::AgentState>* _internal_mutable_agentsstate();
  public:
  const ::msg::g2c::AgentState& agentsstate(int index) const;
  ::msg::g2c::AgentState* add_agentsstate();
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::AgentState>& agentsstate() const;
  // repeated .msg.g2c.ItemState itemsState = 6;
  int itemsstate_size() const;
  private:
  int _internal_itemsstate_size() const;

  public:
  void clear_itemsstate() ;
  ::msg::g2c::ItemState* mutable_itemsstate(int index);
  ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemState>* mutable_itemsstate();

  private:
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemState>& _internal_itemsstate() const;
  ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemState>* _internal_mutable_itemsstate();
  public:
  const ::msg::g2c::ItemState& itemsstate(int index) const;
  ::msg::g2c::ItemState* add_itemsstate();
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemState>& itemsstate() const;
  // repeated .msg.g2c.PropState propsState = 7;
  int propsstate_size() const;
  private:
  int _internal_propsstate_size() const;

  public:
  void clear_propsstate() ;
  ::msg::g2c::PropState* mutable_propsstate(int index);
  ::google::protobuf::RepeatedPtrField<::msg::g2c::PropState>* mutable_propsstate();

  private:
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::PropState>& _internal_propsstate() const;
  ::google::protobuf::RepeatedPtrField<::msg::g2c::PropState>* _internal_mutable_propsstate();
  public:
  const ::msg::g2c::PropState& propsstate(int index) const;
  ::msg::g2c::PropState* add_propsstate();
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::PropState>& propsstate() const;
  // repeated .msg.g2c.EventInfo eventsInfo = 8;
  int eventsinfo_size() const;
  private:
  int _internal_eventsinfo_size() const;

  public:
  void clear_eventsinfo() ;
  ::msg::g2c::EventInfo* mutable_eventsinfo(int index);
  ::google::protobuf::RepeatedPtrField<::msg::g2c::EventInfo>* mutable_eventsinfo();

  private:
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::EventInfo>& _internal_eventsinfo() const;
  ::google::protobuf::RepeatedPtrField<::msg::g2c::EventInfo>* _internal_mutable_eventsinfo();
  public:
  const ::msg::g2c::EventInfo& eventsinfo(int index) const;
  ::msg::g2c::EventInfo* add_eventsinfo();
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::EventInfo>& eventsinfo() const;
  // repeated .msg.g2c.TimerState timersState = 9;
  int timersstate_size() const;
  private:
  int _internal_timersstate_size() const;

  public:
  void clear_timersstate() ;
  ::msg::g2c::TimerState* mutable_timersstate(int index);
  ::google::protobuf::RepeatedPtrField<::msg::g2c::TimerState>* mutable_timersstate();

  private:
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::TimerState>& _internal_timersstate() const;
  ::google::protobuf::RepeatedPtrField<::msg::g2c::TimerState>* _internal_mutable_timersstate();
  public:
  const ::msg::g2c::TimerState& timersstate(int index) const;
  ::msg::g2c::TimerState* add_timersstate();
  const ::google::protobuf::RepeatedPtrField<::msg::g2c::TimerState>& timersstate() const;
  // .msg.g2c.GameGlobalInfo gameGlobalInfo = 2;
  bool has_gameglobalinfo() const;
  void clear_gameglobalinfo() ;
  const ::msg::g2c::GameGlobalInfo& gameglobalinfo() const;
  PROTOBUF_NODISCARD ::msg::g2c::GameGlobalInfo* release_gameglobalinfo();
  ::msg::g2c::GameGlobalInfo* mutable_gameglobalinfo();
  void set_allocated_gameglobalinfo(::msg::g2c::GameGlobalInfo* value);
  void unsafe_arena_set_allocated_gameglobalinfo(::msg::g2c::GameGlobalInfo* value);
  ::msg::g2c::GameGlobalInfo* unsafe_arena_release_gameglobalinfo();

  private:
  const ::msg::g2c::GameGlobalInfo& _internal_gameglobalinfo() const;
  ::msg::g2c::GameGlobalInfo* _internal_mutable_gameglobalinfo();

  public:
  // .msg.g2c.GameInfo gameInfo = 3;
  bool has_gameinfo() const;
  void clear_gameinfo() ;
  const ::msg::g2c::GameInfo& gameinfo() const;
  PROTOBUF_NODISCARD ::msg::g2c::GameInfo* release_gameinfo();
  ::msg::g2c::GameInfo* mutable_gameinfo();
  void set_allocated_gameinfo(::msg::g2c::GameInfo* value);
  void unsafe_arena_set_allocated_gameinfo(::msg::g2c::GameInfo* value);
  ::msg::g2c::GameInfo* unsafe_arena_release_gameinfo();

  private:
  const ::msg::g2c::GameInfo& _internal_gameinfo() const;
  ::msg::g2c::GameInfo* _internal_mutable_gameinfo();

  public:
  // .msg.g2c.GameState gameState = 4;
  bool has_gamestate() const;
  void clear_gamestate() ;
  const ::msg::g2c::GameState& gamestate() const;
  PROTOBUF_NODISCARD ::msg::g2c::GameState* release_gamestate();
  ::msg::g2c::GameState* mutable_gamestate();
  void set_allocated_gamestate(::msg::g2c::GameState* value);
  void unsafe_arena_set_allocated_gamestate(::msg::g2c::GameState* value);
  ::msg::g2c::GameState* unsafe_arena_release_gamestate();

  private:
  const ::msg::g2c::GameState& _internal_gamestate() const;
  ::msg::g2c::GameState* _internal_mutable_gamestate();

  public:
  // .msg.g2c.GameMsgType messageType = 1;
  void clear_messagetype() ;
  ::msg::g2c::GameMsgType messagetype() const;
  void set_messagetype(::msg::g2c::GameMsgType value);

  private:
  ::msg::g2c::GameMsgType _internal_messagetype() const;
  void _internal_set_messagetype(::msg::g2c::GameMsgType value);

  public:
  // @@protoc_insertion_point(class_scope:msg.g2c.GameMassage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 8,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameMassage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::msg::g2c::AgentState > agentsstate_;
    ::google::protobuf::RepeatedPtrField< ::msg::g2c::ItemState > itemsstate_;
    ::google::protobuf::RepeatedPtrField< ::msg::g2c::PropState > propsstate_;
    ::google::protobuf::RepeatedPtrField< ::msg::g2c::EventInfo > eventsinfo_;
    ::google::protobuf::RepeatedPtrField< ::msg::g2c::TimerState > timersstate_;
    ::msg::g2c::GameGlobalInfo* gameglobalinfo_;
    ::msg::g2c::GameInfo* gameinfo_;
    ::msg::g2c::GameState* gamestate_;
    int messagetype_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KoalaAI_5fG2C_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LinkRsp

// -------------------------------------------------------------------

// Vector3D

// float x = 1;
inline void Vector3D::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:msg.g2c.Vector3D.x)
  return _internal_x();
}
inline void Vector3D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msg.g2c.Vector3D.x)
}
inline float Vector3D::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Vector3D::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 2;
inline void Vector3D::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:msg.g2c.Vector3D.y)
  return _internal_y();
}
inline void Vector3D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msg.g2c.Vector3D.y)
}
inline float Vector3D::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Vector3D::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float z = 3;
inline void Vector3D::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:msg.g2c.Vector3D.z)
  return _internal_z();
}
inline void Vector3D::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:msg.g2c.Vector3D.z)
}
inline float Vector3D::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void Vector3D::_internal_set_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// MapInfo

// string mapName = 1;
inline void MapInfo::clear_mapname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapname_.ClearToEmpty();
}
inline const std::string& MapInfo::mapname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.MapInfo.mapName)
  return _internal_mapname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MapInfo::set_mapname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msg.g2c.MapInfo.mapName)
}
inline std::string* MapInfo::mutable_mapname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mapname();
  // @@protoc_insertion_point(field_mutable:msg.g2c.MapInfo.mapName)
  return _s;
}
inline const std::string& MapInfo::_internal_mapname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mapname_.Get();
}
inline void MapInfo::_internal_set_mapname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapname_.Set(value, GetArena());
}
inline std::string* MapInfo::_internal_mutable_mapname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mapname_.Mutable( GetArena());
}
inline std::string* MapInfo::release_mapname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.MapInfo.mapName)
  return _impl_.mapname_.Release();
}
inline void MapInfo::set_allocated_mapname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mapname_.IsDefault()) {
          _impl_.mapname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.MapInfo.mapName)
}

// uint32 mapId = 2;
inline void MapInfo::clear_mapid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapid_ = 0u;
}
inline ::uint32_t MapInfo::mapid() const {
  // @@protoc_insertion_point(field_get:msg.g2c.MapInfo.mapId)
  return _internal_mapid();
}
inline void MapInfo::set_mapid(::uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:msg.g2c.MapInfo.mapId)
}
inline ::uint32_t MapInfo::_internal_mapid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mapid_;
}
inline void MapInfo::_internal_set_mapid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapid_ = value;
}

// .msg.g2c.MapType mapType = 3;
inline void MapInfo::clear_maptype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maptype_ = 0;
}
inline ::msg::g2c::MapType MapInfo::maptype() const {
  // @@protoc_insertion_point(field_get:msg.g2c.MapInfo.mapType)
  return _internal_maptype();
}
inline void MapInfo::set_maptype(::msg::g2c::MapType value) {
  _internal_set_maptype(value);
  // @@protoc_insertion_point(field_set:msg.g2c.MapInfo.mapType)
}
inline ::msg::g2c::MapType MapInfo::_internal_maptype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msg::g2c::MapType>(_impl_.maptype_);
}
inline void MapInfo::_internal_set_maptype(::msg::g2c::MapType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maptype_ = value;
}

// -------------------------------------------------------------------

// GameGlobalInfo

// repeated .msg.g2c.MapInfo mapInfo = 1;
inline int GameGlobalInfo::_internal_mapinfo_size() const {
  return _internal_mapinfo().size();
}
inline int GameGlobalInfo::mapinfo_size() const {
  return _internal_mapinfo_size();
}
inline void GameGlobalInfo::clear_mapinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapinfo_.Clear();
}
inline ::msg::g2c::MapInfo* GameGlobalInfo::mutable_mapinfo(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msg.g2c.GameGlobalInfo.mapInfo)
  return _internal_mutable_mapinfo()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::MapInfo>* GameGlobalInfo::mutable_mapinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msg.g2c.GameGlobalInfo.mapInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_mapinfo();
}
inline const ::msg::g2c::MapInfo& GameGlobalInfo::mapinfo(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GameGlobalInfo.mapInfo)
  return _internal_mapinfo().Get(index);
}
inline ::msg::g2c::MapInfo* GameGlobalInfo::add_mapinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msg::g2c::MapInfo* _add = _internal_mutable_mapinfo()->Add();
  // @@protoc_insertion_point(field_add:msg.g2c.GameGlobalInfo.mapInfo)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::MapInfo>& GameGlobalInfo::mapinfo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msg.g2c.GameGlobalInfo.mapInfo)
  return _internal_mapinfo();
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::MapInfo>&
GameGlobalInfo::_internal_mapinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mapinfo_;
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::MapInfo>*
GameGlobalInfo::_internal_mutable_mapinfo() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.mapinfo_;
}

// -------------------------------------------------------------------

// ItemWayPoint

// .msg.g2c.Vector3D pos = 1;
inline bool ItemWayPoint::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline void ItemWayPoint::clear_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::g2c::Vector3D& ItemWayPoint::_internal_pos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& ItemWayPoint::pos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemWayPoint.pos)
  return _internal_pos();
}
inline void ItemWayPoint::unsafe_arena_set_allocated_pos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.ItemWayPoint.pos)
}
inline ::msg::g2c::Vector3D* ItemWayPoint::release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* released = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* ItemWayPoint::unsafe_arena_release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.ItemWayPoint.pos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* ItemWayPoint::_internal_mutable_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.pos_;
}
inline ::msg::g2c::Vector3D* ItemWayPoint::mutable_pos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msg.g2c.ItemWayPoint.pos)
  return _msg;
}
inline void ItemWayPoint::set_allocated_pos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.ItemWayPoint.pos)
}

// .msg.g2c.Vector3D normal = 2;
inline bool ItemWayPoint::has_normal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.normal_ != nullptr);
  return value;
}
inline void ItemWayPoint::clear_normal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.normal_ != nullptr) _impl_.normal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::g2c::Vector3D& ItemWayPoint::_internal_normal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.normal_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& ItemWayPoint::normal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemWayPoint.normal)
  return _internal_normal();
}
inline void ItemWayPoint::unsafe_arena_set_allocated_normal(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.normal_);
  }
  _impl_.normal_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.ItemWayPoint.normal)
}
inline ::msg::g2c::Vector3D* ItemWayPoint::release_normal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::Vector3D* released = _impl_.normal_;
  _impl_.normal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* ItemWayPoint::unsafe_arena_release_normal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.ItemWayPoint.normal)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::Vector3D* temp = _impl_.normal_;
  _impl_.normal_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* ItemWayPoint::_internal_mutable_normal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.normal_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.normal_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.normal_;
}
inline ::msg::g2c::Vector3D* ItemWayPoint::mutable_normal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_normal();
  // @@protoc_insertion_point(field_mutable:msg.g2c.ItemWayPoint.normal)
  return _msg;
}
inline void ItemWayPoint::set_allocated_normal(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.normal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.normal_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.ItemWayPoint.normal)
}

// -------------------------------------------------------------------

// MapHeightInfo

// .msg.g2c.Vector3D originPos = 1;
inline bool MapHeightInfo::has_originpos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.originpos_ != nullptr);
  return value;
}
inline void MapHeightInfo::clear_originpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.originpos_ != nullptr) _impl_.originpos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::g2c::Vector3D& MapHeightInfo::_internal_originpos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.originpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& MapHeightInfo::originpos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.MapHeightInfo.originPos)
  return _internal_originpos();
}
inline void MapHeightInfo::unsafe_arena_set_allocated_originpos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.originpos_);
  }
  _impl_.originpos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.MapHeightInfo.originPos)
}
inline ::msg::g2c::Vector3D* MapHeightInfo::release_originpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* released = _impl_.originpos_;
  _impl_.originpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* MapHeightInfo::unsafe_arena_release_originpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.MapHeightInfo.originPos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* temp = _impl_.originpos_;
  _impl_.originpos_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* MapHeightInfo::_internal_mutable_originpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.originpos_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.originpos_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.originpos_;
}
inline ::msg::g2c::Vector3D* MapHeightInfo::mutable_originpos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_originpos();
  // @@protoc_insertion_point(field_mutable:msg.g2c.MapHeightInfo.originPos)
  return _msg;
}
inline void MapHeightInfo::set_allocated_originpos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.originpos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.originpos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.MapHeightInfo.originPos)
}

// float granularityHeight = 2;
inline void MapHeightInfo::clear_granularityheight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.granularityheight_ = 0;
}
inline float MapHeightInfo::granularityheight() const {
  // @@protoc_insertion_point(field_get:msg.g2c.MapHeightInfo.granularityHeight)
  return _internal_granularityheight();
}
inline void MapHeightInfo::set_granularityheight(float value) {
  _internal_set_granularityheight(value);
  // @@protoc_insertion_point(field_set:msg.g2c.MapHeightInfo.granularityHeight)
}
inline float MapHeightInfo::_internal_granularityheight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.granularityheight_;
}
inline void MapHeightInfo::_internal_set_granularityheight(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.granularityheight_ = value;
}

// float granularityWidth = 3;
inline void MapHeightInfo::clear_granularitywidth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.granularitywidth_ = 0;
}
inline float MapHeightInfo::granularitywidth() const {
  // @@protoc_insertion_point(field_get:msg.g2c.MapHeightInfo.granularityWidth)
  return _internal_granularitywidth();
}
inline void MapHeightInfo::set_granularitywidth(float value) {
  _internal_set_granularitywidth(value);
  // @@protoc_insertion_point(field_set:msg.g2c.MapHeightInfo.granularityWidth)
}
inline float MapHeightInfo::_internal_granularitywidth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.granularitywidth_;
}
inline void MapHeightInfo::_internal_set_granularitywidth(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.granularitywidth_ = value;
}

// float mapHeight = 4;
inline void MapHeightInfo::clear_mapheight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapheight_ = 0;
}
inline float MapHeightInfo::mapheight() const {
  // @@protoc_insertion_point(field_get:msg.g2c.MapHeightInfo.mapHeight)
  return _internal_mapheight();
}
inline void MapHeightInfo::set_mapheight(float value) {
  _internal_set_mapheight(value);
  // @@protoc_insertion_point(field_set:msg.g2c.MapHeightInfo.mapHeight)
}
inline float MapHeightInfo::_internal_mapheight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mapheight_;
}
inline void MapHeightInfo::_internal_set_mapheight(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapheight_ = value;
}

// float mapWidth = 5;
inline void MapHeightInfo::clear_mapwidth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapwidth_ = 0;
}
inline float MapHeightInfo::mapwidth() const {
  // @@protoc_insertion_point(field_get:msg.g2c.MapHeightInfo.mapWidth)
  return _internal_mapwidth();
}
inline void MapHeightInfo::set_mapwidth(float value) {
  _internal_set_mapwidth(value);
  // @@protoc_insertion_point(field_set:msg.g2c.MapHeightInfo.mapWidth)
}
inline float MapHeightInfo::_internal_mapwidth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mapwidth_;
}
inline void MapHeightInfo::_internal_set_mapwidth(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapwidth_ = value;
}

// repeated float heightValue = 6;
inline int MapHeightInfo::_internal_heightvalue_size() const {
  return _internal_heightvalue().size();
}
inline int MapHeightInfo::heightvalue_size() const {
  return _internal_heightvalue_size();
}
inline void MapHeightInfo::clear_heightvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heightvalue_.Clear();
}
inline float MapHeightInfo::heightvalue(int index) const {
  // @@protoc_insertion_point(field_get:msg.g2c.MapHeightInfo.heightValue)
  return _internal_heightvalue().Get(index);
}
inline void MapHeightInfo::set_heightvalue(int index, float value) {
  _internal_mutable_heightvalue()->Set(index, value);
  // @@protoc_insertion_point(field_set:msg.g2c.MapHeightInfo.heightValue)
}
inline void MapHeightInfo::add_heightvalue(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_heightvalue()->Add(value);
  // @@protoc_insertion_point(field_add:msg.g2c.MapHeightInfo.heightValue)
}
inline const ::google::protobuf::RepeatedField<float>& MapHeightInfo::heightvalue() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msg.g2c.MapHeightInfo.heightValue)
  return _internal_heightvalue();
}
inline ::google::protobuf::RepeatedField<float>* MapHeightInfo::mutable_heightvalue()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msg.g2c.MapHeightInfo.heightValue)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_heightvalue();
}
inline const ::google::protobuf::RepeatedField<float>&
MapHeightInfo::_internal_heightvalue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heightvalue_;
}
inline ::google::protobuf::RepeatedField<float>* MapHeightInfo::_internal_mutable_heightvalue() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.heightvalue_;
}

// -------------------------------------------------------------------

// GamePointInfo

// uint64 id = 1;
inline void GamePointInfo::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t GamePointInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.g2c.GamePointInfo.id)
  return _internal_id();
}
inline void GamePointInfo::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.g2c.GamePointInfo.id)
}
inline ::uint64_t GamePointInfo::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void GamePointInfo::_internal_set_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// .msg.g2c.GamePointType type = 2;
inline void GamePointInfo::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::msg::g2c::GamePointType GamePointInfo::type() const {
  // @@protoc_insertion_point(field_get:msg.g2c.GamePointInfo.type)
  return _internal_type();
}
inline void GamePointInfo::set_type(::msg::g2c::GamePointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.g2c.GamePointInfo.type)
}
inline ::msg::g2c::GamePointType GamePointInfo::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msg::g2c::GamePointType>(_impl_.type_);
}
inline void GamePointInfo::_internal_set_type(::msg::g2c::GamePointType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .msg.g2c.Vector3D pos = 3;
inline bool GamePointInfo::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline void GamePointInfo::clear_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::g2c::Vector3D& GamePointInfo::_internal_pos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& GamePointInfo::pos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GamePointInfo.pos)
  return _internal_pos();
}
inline void GamePointInfo::unsafe_arena_set_allocated_pos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.GamePointInfo.pos)
}
inline ::msg::g2c::Vector3D* GamePointInfo::release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* released = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* GamePointInfo::unsafe_arena_release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.GamePointInfo.pos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* GamePointInfo::_internal_mutable_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.pos_;
}
inline ::msg::g2c::Vector3D* GamePointInfo::mutable_pos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msg.g2c.GamePointInfo.pos)
  return _msg;
}
inline void GamePointInfo::set_allocated_pos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.GamePointInfo.pos)
}

// .msg.g2c.Vector3D rot = 4;
inline bool GamePointInfo::has_rot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rot_ != nullptr);
  return value;
}
inline void GamePointInfo::clear_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rot_ != nullptr) _impl_.rot_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::g2c::Vector3D& GamePointInfo::_internal_rot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& GamePointInfo::rot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GamePointInfo.rot)
  return _internal_rot();
}
inline void GamePointInfo::unsafe_arena_set_allocated_rot(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rot_);
  }
  _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.GamePointInfo.rot)
}
inline ::msg::g2c::Vector3D* GamePointInfo::release_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::Vector3D* released = _impl_.rot_;
  _impl_.rot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* GamePointInfo::unsafe_arena_release_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.GamePointInfo.rot)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::Vector3D* temp = _impl_.rot_;
  _impl_.rot_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* GamePointInfo::_internal_mutable_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rot_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.rot_;
}
inline ::msg::g2c::Vector3D* GamePointInfo::mutable_rot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_rot();
  // @@protoc_insertion_point(field_mutable:msg.g2c.GamePointInfo.rot)
  return _msg;
}
inline void GamePointInfo::set_allocated_rot(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rot_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.GamePointInfo.rot)
}

// .msg.g2c.Vector3D size = 5;
inline bool GamePointInfo::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline void GamePointInfo::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::msg::g2c::Vector3D& GamePointInfo::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& GamePointInfo::size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GamePointInfo.size)
  return _internal_size();
}
inline void GamePointInfo::unsafe_arena_set_allocated_size(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.GamePointInfo.size)
}
inline ::msg::g2c::Vector3D* GamePointInfo::release_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msg::g2c::Vector3D* released = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* GamePointInfo::unsafe_arena_release_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.GamePointInfo.size)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msg::g2c::Vector3D* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* GamePointInfo::_internal_mutable_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.size_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.size_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.size_;
}
inline ::msg::g2c::Vector3D* GamePointInfo::mutable_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:msg.g2c.GamePointInfo.size)
  return _msg;
}
inline void GamePointInfo::set_allocated_size(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.size_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.GamePointInfo.size)
}

// uint32 level = 6;
inline void GamePointInfo::clear_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = 0u;
}
inline ::uint32_t GamePointInfo::level() const {
  // @@protoc_insertion_point(field_get:msg.g2c.GamePointInfo.level)
  return _internal_level();
}
inline void GamePointInfo::set_level(::uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.g2c.GamePointInfo.level)
}
inline ::uint32_t GamePointInfo::_internal_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.level_;
}
inline void GamePointInfo::_internal_set_level(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = value;
}

// -------------------------------------------------------------------

// GameInfo

// repeated .msg.g2c.GamePointInfo gamePoints = 1;
inline int GameInfo::_internal_gamepoints_size() const {
  return _internal_gamepoints().size();
}
inline int GameInfo::gamepoints_size() const {
  return _internal_gamepoints_size();
}
inline void GameInfo::clear_gamepoints() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gamepoints_.Clear();
}
inline ::msg::g2c::GamePointInfo* GameInfo::mutable_gamepoints(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msg.g2c.GameInfo.gamePoints)
  return _internal_mutable_gamepoints()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::GamePointInfo>* GameInfo::mutable_gamepoints()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msg.g2c.GameInfo.gamePoints)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_gamepoints();
}
inline const ::msg::g2c::GamePointInfo& GameInfo::gamepoints(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GameInfo.gamePoints)
  return _internal_gamepoints().Get(index);
}
inline ::msg::g2c::GamePointInfo* GameInfo::add_gamepoints() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msg::g2c::GamePointInfo* _add = _internal_mutable_gamepoints()->Add();
  // @@protoc_insertion_point(field_add:msg.g2c.GameInfo.gamePoints)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::GamePointInfo>& GameInfo::gamepoints() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msg.g2c.GameInfo.gamePoints)
  return _internal_gamepoints();
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::GamePointInfo>&
GameInfo::_internal_gamepoints() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gamepoints_;
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::GamePointInfo>*
GameInfo::_internal_mutable_gamepoints() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.gamepoints_;
}

// -------------------------------------------------------------------

// TargetPointInfo

// uint64 id = 1;
inline void TargetPointInfo::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t TargetPointInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.g2c.TargetPointInfo.id)
  return _internal_id();
}
inline void TargetPointInfo::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.g2c.TargetPointInfo.id)
}
inline ::uint64_t TargetPointInfo::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void TargetPointInfo::_internal_set_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// bool isDestination = 2;
inline void TargetPointInfo::clear_isdestination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isdestination_ = false;
}
inline bool TargetPointInfo::isdestination() const {
  // @@protoc_insertion_point(field_get:msg.g2c.TargetPointInfo.isDestination)
  return _internal_isdestination();
}
inline void TargetPointInfo::set_isdestination(bool value) {
  _internal_set_isdestination(value);
  // @@protoc_insertion_point(field_set:msg.g2c.TargetPointInfo.isDestination)
}
inline bool TargetPointInfo::_internal_isdestination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isdestination_;
}
inline void TargetPointInfo::_internal_set_isdestination(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isdestination_ = value;
}

// .msg.g2c.Vector3D pos = 3;
inline bool TargetPointInfo::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline void TargetPointInfo::clear_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::g2c::Vector3D& TargetPointInfo::_internal_pos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& TargetPointInfo::pos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.TargetPointInfo.pos)
  return _internal_pos();
}
inline void TargetPointInfo::unsafe_arena_set_allocated_pos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.TargetPointInfo.pos)
}
inline ::msg::g2c::Vector3D* TargetPointInfo::release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* released = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* TargetPointInfo::unsafe_arena_release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.TargetPointInfo.pos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* TargetPointInfo::_internal_mutable_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.pos_;
}
inline ::msg::g2c::Vector3D* TargetPointInfo::mutable_pos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msg.g2c.TargetPointInfo.pos)
  return _msg;
}
inline void TargetPointInfo::set_allocated_pos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.TargetPointInfo.pos)
}

// .msg.g2c.Vector3D rot = 4;
inline bool TargetPointInfo::has_rot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rot_ != nullptr);
  return value;
}
inline void TargetPointInfo::clear_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rot_ != nullptr) _impl_.rot_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::g2c::Vector3D& TargetPointInfo::_internal_rot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& TargetPointInfo::rot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.TargetPointInfo.rot)
  return _internal_rot();
}
inline void TargetPointInfo::unsafe_arena_set_allocated_rot(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rot_);
  }
  _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.TargetPointInfo.rot)
}
inline ::msg::g2c::Vector3D* TargetPointInfo::release_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::Vector3D* released = _impl_.rot_;
  _impl_.rot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* TargetPointInfo::unsafe_arena_release_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.TargetPointInfo.rot)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::Vector3D* temp = _impl_.rot_;
  _impl_.rot_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* TargetPointInfo::_internal_mutable_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rot_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.rot_;
}
inline ::msg::g2c::Vector3D* TargetPointInfo::mutable_rot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_rot();
  // @@protoc_insertion_point(field_mutable:msg.g2c.TargetPointInfo.rot)
  return _msg;
}
inline void TargetPointInfo::set_allocated_rot(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rot_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.TargetPointInfo.rot)
}

// .msg.g2c.Vector3D size = 5;
inline bool TargetPointInfo::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline void TargetPointInfo::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::msg::g2c::Vector3D& TargetPointInfo::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& TargetPointInfo::size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.TargetPointInfo.size)
  return _internal_size();
}
inline void TargetPointInfo::unsafe_arena_set_allocated_size(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.TargetPointInfo.size)
}
inline ::msg::g2c::Vector3D* TargetPointInfo::release_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msg::g2c::Vector3D* released = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* TargetPointInfo::unsafe_arena_release_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.TargetPointInfo.size)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msg::g2c::Vector3D* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* TargetPointInfo::_internal_mutable_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.size_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.size_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.size_;
}
inline ::msg::g2c::Vector3D* TargetPointInfo::mutable_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:msg.g2c.TargetPointInfo.size)
  return _msg;
}
inline void TargetPointInfo::set_allocated_size(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.size_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.TargetPointInfo.size)
}

// uint32 level = 6;
inline void TargetPointInfo::clear_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = 0u;
}
inline ::uint32_t TargetPointInfo::level() const {
  // @@protoc_insertion_point(field_get:msg.g2c.TargetPointInfo.level)
  return _internal_level();
}
inline void TargetPointInfo::set_level(::uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.g2c.TargetPointInfo.level)
}
inline ::uint32_t TargetPointInfo::_internal_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.level_;
}
inline void TargetPointInfo::_internal_set_level(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = value;
}

// -------------------------------------------------------------------

// GameState

// uint64 timestamp = 1;
inline void GameState::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t GameState::timestamp() const {
  // @@protoc_insertion_point(field_get:msg.g2c.GameState.timestamp)
  return _internal_timestamp();
}
inline void GameState::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msg.g2c.GameState.timestamp)
}
inline ::uint64_t GameState::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void GameState::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// float timeLeft = 2;
inline void GameState::clear_timeleft() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeleft_ = 0;
}
inline float GameState::timeleft() const {
  // @@protoc_insertion_point(field_get:msg.g2c.GameState.timeLeft)
  return _internal_timeleft();
}
inline void GameState::set_timeleft(float value) {
  _internal_set_timeleft(value);
  // @@protoc_insertion_point(field_set:msg.g2c.GameState.timeLeft)
}
inline float GameState::_internal_timeleft() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeleft_;
}
inline void GameState::_internal_set_timeleft(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeleft_ = value;
}

// uint32 mapId = 3;
inline void GameState::clear_mapid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapid_ = 0u;
}
inline ::uint32_t GameState::mapid() const {
  // @@protoc_insertion_point(field_get:msg.g2c.GameState.mapId)
  return _internal_mapid();
}
inline void GameState::set_mapid(::uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:msg.g2c.GameState.mapId)
}
inline ::uint32_t GameState::_internal_mapid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mapid_;
}
inline void GameState::_internal_set_mapid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapid_ = value;
}

// bool isGameEnd = 4;
inline void GameState::clear_isgameend() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isgameend_ = false;
}
inline bool GameState::isgameend() const {
  // @@protoc_insertion_point(field_get:msg.g2c.GameState.isGameEnd)
  return _internal_isgameend();
}
inline void GameState::set_isgameend(bool value) {
  _internal_set_isgameend(value);
  // @@protoc_insertion_point(field_set:msg.g2c.GameState.isGameEnd)
}
inline bool GameState::_internal_isgameend() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isgameend_;
}
inline void GameState::_internal_set_isgameend(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isgameend_ = value;
}

// repeated .msg.g2c.TargetPointInfo targetPointsInfo = 5;
inline int GameState::_internal_targetpointsinfo_size() const {
  return _internal_targetpointsinfo().size();
}
inline int GameState::targetpointsinfo_size() const {
  return _internal_targetpointsinfo_size();
}
inline void GameState::clear_targetpointsinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetpointsinfo_.Clear();
}
inline ::msg::g2c::TargetPointInfo* GameState::mutable_targetpointsinfo(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msg.g2c.GameState.targetPointsInfo)
  return _internal_mutable_targetpointsinfo()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::TargetPointInfo>* GameState::mutable_targetpointsinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msg.g2c.GameState.targetPointsInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_targetpointsinfo();
}
inline const ::msg::g2c::TargetPointInfo& GameState::targetpointsinfo(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GameState.targetPointsInfo)
  return _internal_targetpointsinfo().Get(index);
}
inline ::msg::g2c::TargetPointInfo* GameState::add_targetpointsinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msg::g2c::TargetPointInfo* _add = _internal_mutable_targetpointsinfo()->Add();
  // @@protoc_insertion_point(field_add:msg.g2c.GameState.targetPointsInfo)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::TargetPointInfo>& GameState::targetpointsinfo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msg.g2c.GameState.targetPointsInfo)
  return _internal_targetpointsinfo();
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::TargetPointInfo>&
GameState::_internal_targetpointsinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.targetpointsinfo_;
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::TargetPointInfo>*
GameState::_internal_mutable_targetpointsinfo() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.targetpointsinfo_;
}

// -------------------------------------------------------------------

// AgentPropState

// uint32 durable = 1;
inline void AgentPropState::clear_durable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.durable_ = 0u;
}
inline ::uint32_t AgentPropState::durable() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentPropState.durable)
  return _internal_durable();
}
inline void AgentPropState::set_durable(::uint32_t value) {
  _internal_set_durable(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentPropState.durable)
}
inline ::uint32_t AgentPropState::_internal_durable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.durable_;
}
inline void AgentPropState::_internal_set_durable(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.durable_ = value;
}

// uint32 useCount = 2;
inline void AgentPropState::clear_usecount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usecount_ = 0u;
}
inline ::uint32_t AgentPropState::usecount() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentPropState.useCount)
  return _internal_usecount();
}
inline void AgentPropState::set_usecount(::uint32_t value) {
  _internal_set_usecount(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentPropState.useCount)
}
inline ::uint32_t AgentPropState::_internal_usecount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.usecount_;
}
inline void AgentPropState::_internal_set_usecount(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usecount_ = value;
}

// uint32 cd = 3;
inline void AgentPropState::clear_cd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cd_ = 0u;
}
inline ::uint32_t AgentPropState::cd() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentPropState.cd)
  return _internal_cd();
}
inline void AgentPropState::set_cd(::uint32_t value) {
  _internal_set_cd(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentPropState.cd)
}
inline ::uint32_t AgentPropState::_internal_cd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cd_;
}
inline void AgentPropState::_internal_set_cd(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cd_ = value;
}

// uint32 curCD = 4;
inline void AgentPropState::clear_curcd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.curcd_ = 0u;
}
inline ::uint32_t AgentPropState::curcd() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentPropState.curCD)
  return _internal_curcd();
}
inline void AgentPropState::set_curcd(::uint32_t value) {
  _internal_set_curcd(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentPropState.curCD)
}
inline ::uint32_t AgentPropState::_internal_curcd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.curcd_;
}
inline void AgentPropState::_internal_set_curcd(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.curcd_ = value;
}

// bool inCD = 5;
inline void AgentPropState::clear_incd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incd_ = false;
}
inline bool AgentPropState::incd() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentPropState.inCD)
  return _internal_incd();
}
inline void AgentPropState::set_incd(bool value) {
  _internal_set_incd(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentPropState.inCD)
}
inline bool AgentPropState::_internal_incd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.incd_;
}
inline void AgentPropState::_internal_set_incd(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incd_ = value;
}

// .msg.g2c.PropFuncType propFuncType = 6;
inline void AgentPropState::clear_propfunctype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.propfunctype_ = 0;
}
inline ::msg::g2c::PropFuncType AgentPropState::propfunctype() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentPropState.propFuncType)
  return _internal_propfunctype();
}
inline void AgentPropState::set_propfunctype(::msg::g2c::PropFuncType value) {
  _internal_set_propfunctype(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentPropState.propFuncType)
}
inline ::msg::g2c::PropFuncType AgentPropState::_internal_propfunctype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msg::g2c::PropFuncType>(_impl_.propfunctype_);
}
inline void AgentPropState::_internal_set_propfunctype(::msg::g2c::PropFuncType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.propfunctype_ = value;
}

// uint32 delayedDestroy = 7;
inline void AgentPropState::clear_delayeddestroy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delayeddestroy_ = 0u;
}
inline ::uint32_t AgentPropState::delayeddestroy() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentPropState.delayedDestroy)
  return _internal_delayeddestroy();
}
inline void AgentPropState::set_delayeddestroy(::uint32_t value) {
  _internal_set_delayeddestroy(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentPropState.delayedDestroy)
}
inline ::uint32_t AgentPropState::_internal_delayeddestroy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delayeddestroy_;
}
inline void AgentPropState::_internal_set_delayeddestroy(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delayeddestroy_ = value;
}

// .msg.g2c.PropUseType playerPropUseType = 8;
inline void AgentPropState::clear_playerpropusetype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playerpropusetype_ = 0;
}
inline ::msg::g2c::PropUseType AgentPropState::playerpropusetype() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentPropState.playerPropUseType)
  return _internal_playerpropusetype();
}
inline void AgentPropState::set_playerpropusetype(::msg::g2c::PropUseType value) {
  _internal_set_playerpropusetype(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentPropState.playerPropUseType)
}
inline ::msg::g2c::PropUseType AgentPropState::_internal_playerpropusetype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msg::g2c::PropUseType>(_impl_.playerpropusetype_);
}
inline void AgentPropState::_internal_set_playerpropusetype(::msg::g2c::PropUseType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playerpropusetype_ = value;
}

// -------------------------------------------------------------------

// AgentState

// uint64 id = 1;
inline void AgentState::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t AgentState::id() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.id)
  return _internal_id();
}
inline void AgentState::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentState.id)
}
inline ::uint64_t AgentState::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void AgentState::_internal_set_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// .msg.g2c.Vector3D pos = 2;
inline bool AgentState::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline void AgentState::clear_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::g2c::Vector3D& AgentState::_internal_pos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& AgentState::pos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.pos)
  return _internal_pos();
}
inline void AgentState::unsafe_arena_set_allocated_pos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.AgentState.pos)
}
inline ::msg::g2c::Vector3D* AgentState::release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* released = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* AgentState::unsafe_arena_release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.AgentState.pos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* AgentState::_internal_mutable_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.pos_;
}
inline ::msg::g2c::Vector3D* AgentState::mutable_pos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msg.g2c.AgentState.pos)
  return _msg;
}
inline void AgentState::set_allocated_pos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.AgentState.pos)
}

// .msg.g2c.Vector3D rot = 3;
inline bool AgentState::has_rot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rot_ != nullptr);
  return value;
}
inline void AgentState::clear_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rot_ != nullptr) _impl_.rot_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::g2c::Vector3D& AgentState::_internal_rot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& AgentState::rot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.rot)
  return _internal_rot();
}
inline void AgentState::unsafe_arena_set_allocated_rot(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rot_);
  }
  _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.AgentState.rot)
}
inline ::msg::g2c::Vector3D* AgentState::release_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::Vector3D* released = _impl_.rot_;
  _impl_.rot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* AgentState::unsafe_arena_release_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.AgentState.rot)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::Vector3D* temp = _impl_.rot_;
  _impl_.rot_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* AgentState::_internal_mutable_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rot_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.rot_;
}
inline ::msg::g2c::Vector3D* AgentState::mutable_rot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_rot();
  // @@protoc_insertion_point(field_mutable:msg.g2c.AgentState.rot)
  return _msg;
}
inline void AgentState::set_allocated_rot(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rot_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.AgentState.rot)
}

// .msg.g2c.Vector3D vel = 4;
inline bool AgentState::has_vel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vel_ != nullptr);
  return value;
}
inline void AgentState::clear_vel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vel_ != nullptr) _impl_.vel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::msg::g2c::Vector3D& AgentState::_internal_vel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& AgentState::vel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.vel)
  return _internal_vel();
}
inline void AgentState::unsafe_arena_set_allocated_vel(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vel_);
  }
  _impl_.vel_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.AgentState.vel)
}
inline ::msg::g2c::Vector3D* AgentState::release_vel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msg::g2c::Vector3D* released = _impl_.vel_;
  _impl_.vel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* AgentState::unsafe_arena_release_vel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.AgentState.vel)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msg::g2c::Vector3D* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* AgentState::_internal_mutable_vel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vel_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.vel_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.vel_;
}
inline ::msg::g2c::Vector3D* AgentState::mutable_vel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_vel();
  // @@protoc_insertion_point(field_mutable:msg.g2c.AgentState.vel)
  return _msg;
}
inline void AgentState::set_allocated_vel(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.vel_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.vel_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.AgentState.vel)
}

// .msg.g2c.AnimationStateType animationState = 5;
inline void AgentState::clear_animationstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.animationstate_ = 0;
}
inline ::msg::g2c::AnimationStateType AgentState::animationstate() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.animationState)
  return _internal_animationstate();
}
inline void AgentState::set_animationstate(::msg::g2c::AnimationStateType value) {
  _internal_set_animationstate(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentState.animationState)
}
inline ::msg::g2c::AnimationStateType AgentState::_internal_animationstate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msg::g2c::AnimationStateType>(_impl_.animationstate_);
}
inline void AgentState::_internal_set_animationstate(::msg::g2c::AnimationStateType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.animationstate_ = value;
}

// .msg.g2c.AgentPropState agentProp = 6;
inline bool AgentState::has_agentprop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.agentprop_ != nullptr);
  return value;
}
inline void AgentState::clear_agentprop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.agentprop_ != nullptr) _impl_.agentprop_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::msg::g2c::AgentPropState& AgentState::_internal_agentprop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::AgentPropState* p = _impl_.agentprop_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::AgentPropState&>(::msg::g2c::_AgentPropState_default_instance_);
}
inline const ::msg::g2c::AgentPropState& AgentState::agentprop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.agentProp)
  return _internal_agentprop();
}
inline void AgentState::unsafe_arena_set_allocated_agentprop(::msg::g2c::AgentPropState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.agentprop_);
  }
  _impl_.agentprop_ = reinterpret_cast<::msg::g2c::AgentPropState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.AgentState.agentProp)
}
inline ::msg::g2c::AgentPropState* AgentState::release_agentprop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::msg::g2c::AgentPropState* released = _impl_.agentprop_;
  _impl_.agentprop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::AgentPropState* AgentState::unsafe_arena_release_agentprop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.AgentState.agentProp)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::msg::g2c::AgentPropState* temp = _impl_.agentprop_;
  _impl_.agentprop_ = nullptr;
  return temp;
}
inline ::msg::g2c::AgentPropState* AgentState::_internal_mutable_agentprop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.agentprop_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::AgentPropState>(GetArena());
    _impl_.agentprop_ = reinterpret_cast<::msg::g2c::AgentPropState*>(p);
  }
  return _impl_.agentprop_;
}
inline ::msg::g2c::AgentPropState* AgentState::mutable_agentprop() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::msg::g2c::AgentPropState* _msg = _internal_mutable_agentprop();
  // @@protoc_insertion_point(field_mutable:msg.g2c.AgentState.agentProp)
  return _msg;
}
inline void AgentState::set_allocated_agentprop(::msg::g2c::AgentPropState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.agentprop_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.agentprop_ = reinterpret_cast<::msg::g2c::AgentPropState*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.AgentState.agentProp)
}

// bool doNotCtrl = 7;
inline void AgentState::clear_donotctrl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.donotctrl_ = false;
}
inline bool AgentState::donotctrl() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.doNotCtrl)
  return _internal_donotctrl();
}
inline void AgentState::set_donotctrl(bool value) {
  _internal_set_donotctrl(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentState.doNotCtrl)
}
inline bool AgentState::_internal_donotctrl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.donotctrl_;
}
inline void AgentState::_internal_set_donotctrl(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.donotctrl_ = value;
}

// .msg.g2c.EndGameType endGameState = 8;
inline void AgentState::clear_endgamestate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endgamestate_ = 0;
}
inline ::msg::g2c::EndGameType AgentState::endgamestate() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.endGameState)
  return _internal_endgamestate();
}
inline void AgentState::set_endgamestate(::msg::g2c::EndGameType value) {
  _internal_set_endgamestate(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentState.endGameState)
}
inline ::msg::g2c::EndGameType AgentState::_internal_endgamestate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msg::g2c::EndGameType>(_impl_.endgamestate_);
}
inline void AgentState::_internal_set_endgamestate(::msg::g2c::EndGameType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endgamestate_ = value;
}

// .msg.g2c.Vector3D forward = 9;
inline bool AgentState::has_forward() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.forward_ != nullptr);
  return value;
}
inline void AgentState::clear_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.forward_ != nullptr) _impl_.forward_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::msg::g2c::Vector3D& AgentState::_internal_forward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.forward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& AgentState::forward() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.forward)
  return _internal_forward();
}
inline void AgentState::unsafe_arena_set_allocated_forward(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.forward_);
  }
  _impl_.forward_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.AgentState.forward)
}
inline ::msg::g2c::Vector3D* AgentState::release_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::msg::g2c::Vector3D* released = _impl_.forward_;
  _impl_.forward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* AgentState::unsafe_arena_release_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.AgentState.forward)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::msg::g2c::Vector3D* temp = _impl_.forward_;
  _impl_.forward_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* AgentState::_internal_mutable_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.forward_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.forward_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.forward_;
}
inline ::msg::g2c::Vector3D* AgentState::mutable_forward() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_forward();
  // @@protoc_insertion_point(field_mutable:msg.g2c.AgentState.forward)
  return _msg;
}
inline void AgentState::set_allocated_forward(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.forward_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.forward_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.AgentState.forward)
}

// .msg.g2c.Vector3D right = 10;
inline bool AgentState::has_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.right_ != nullptr);
  return value;
}
inline void AgentState::clear_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.right_ != nullptr) _impl_.right_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::msg::g2c::Vector3D& AgentState::_internal_right() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.right_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& AgentState::right() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.right)
  return _internal_right();
}
inline void AgentState::unsafe_arena_set_allocated_right(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.right_);
  }
  _impl_.right_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.AgentState.right)
}
inline ::msg::g2c::Vector3D* AgentState::release_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::msg::g2c::Vector3D* released = _impl_.right_;
  _impl_.right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* AgentState::unsafe_arena_release_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.AgentState.right)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::msg::g2c::Vector3D* temp = _impl_.right_;
  _impl_.right_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* AgentState::_internal_mutable_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.right_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.right_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.right_;
}
inline ::msg::g2c::Vector3D* AgentState::mutable_right() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:msg.g2c.AgentState.right)
  return _msg;
}
inline void AgentState::set_allocated_right(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.right_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.right_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.AgentState.right)
}

// .msg.g2c.Vector3D up = 11;
inline bool AgentState::has_up() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.up_ != nullptr);
  return value;
}
inline void AgentState::clear_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.up_ != nullptr) _impl_.up_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::msg::g2c::Vector3D& AgentState::_internal_up() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.up_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& AgentState::up() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.up)
  return _internal_up();
}
inline void AgentState::unsafe_arena_set_allocated_up(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.up_);
  }
  _impl_.up_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.AgentState.up)
}
inline ::msg::g2c::Vector3D* AgentState::release_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::msg::g2c::Vector3D* released = _impl_.up_;
  _impl_.up_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* AgentState::unsafe_arena_release_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.AgentState.up)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::msg::g2c::Vector3D* temp = _impl_.up_;
  _impl_.up_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* AgentState::_internal_mutable_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.up_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.up_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.up_;
}
inline ::msg::g2c::Vector3D* AgentState::mutable_up() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_up();
  // @@protoc_insertion_point(field_mutable:msg.g2c.AgentState.up)
  return _msg;
}
inline void AgentState::set_allocated_up(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.up_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.up_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.AgentState.up)
}

// repeated uint32 passTargetPoint = 12;
inline int AgentState::_internal_passtargetpoint_size() const {
  return _internal_passtargetpoint().size();
}
inline int AgentState::passtargetpoint_size() const {
  return _internal_passtargetpoint_size();
}
inline void AgentState::clear_passtargetpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.passtargetpoint_.Clear();
}
inline ::uint32_t AgentState::passtargetpoint(int index) const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.passTargetPoint)
  return _internal_passtargetpoint().Get(index);
}
inline void AgentState::set_passtargetpoint(int index, ::uint32_t value) {
  _internal_mutable_passtargetpoint()->Set(index, value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentState.passTargetPoint)
}
inline void AgentState::add_passtargetpoint(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_passtargetpoint()->Add(value);
  // @@protoc_insertion_point(field_add:msg.g2c.AgentState.passTargetPoint)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& AgentState::passtargetpoint() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msg.g2c.AgentState.passTargetPoint)
  return _internal_passtargetpoint();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* AgentState::mutable_passtargetpoint()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msg.g2c.AgentState.passTargetPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_passtargetpoint();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
AgentState::_internal_passtargetpoint() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.passtargetpoint_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* AgentState::_internal_mutable_passtargetpoint() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.passtargetpoint_;
}

// .msg.g2c.Vector3D goalPoint = 13;
inline bool AgentState::has_goalpoint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.goalpoint_ != nullptr);
  return value;
}
inline void AgentState::clear_goalpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.goalpoint_ != nullptr) _impl_.goalpoint_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::msg::g2c::Vector3D& AgentState::_internal_goalpoint() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.goalpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& AgentState::goalpoint() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.goalPoint)
  return _internal_goalpoint();
}
inline void AgentState::unsafe_arena_set_allocated_goalpoint(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.goalpoint_);
  }
  _impl_.goalpoint_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.AgentState.goalPoint)
}
inline ::msg::g2c::Vector3D* AgentState::release_goalpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::msg::g2c::Vector3D* released = _impl_.goalpoint_;
  _impl_.goalpoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* AgentState::unsafe_arena_release_goalpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.AgentState.goalPoint)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::msg::g2c::Vector3D* temp = _impl_.goalpoint_;
  _impl_.goalpoint_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* AgentState::_internal_mutable_goalpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.goalpoint_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.goalpoint_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.goalpoint_;
}
inline ::msg::g2c::Vector3D* AgentState::mutable_goalpoint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_goalpoint();
  // @@protoc_insertion_point(field_mutable:msg.g2c.AgentState.goalPoint)
  return _msg;
}
inline void AgentState::set_allocated_goalpoint(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.goalpoint_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.goalpoint_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.AgentState.goalPoint)
}

// bool Invincible = 14;
inline void AgentState::clear_invincible() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.invincible_ = false;
}
inline bool AgentState::invincible() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.Invincible)
  return _internal_invincible();
}
inline void AgentState::set_invincible(bool value) {
  _internal_set_invincible(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentState.Invincible)
}
inline bool AgentState::_internal_invincible() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.invincible_;
}
inline void AgentState::_internal_set_invincible(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.invincible_ = value;
}

// float curHP = 15;
inline void AgentState::clear_curhp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.curhp_ = 0;
}
inline float AgentState::curhp() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.curHP)
  return _internal_curhp();
}
inline void AgentState::set_curhp(float value) {
  _internal_set_curhp(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentState.curHP)
}
inline float AgentState::_internal_curhp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.curhp_;
}
inline void AgentState::_internal_set_curhp(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.curhp_ = value;
}

// float maxHP = 16;
inline void AgentState::clear_maxhp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxhp_ = 0;
}
inline float AgentState::maxhp() const {
  // @@protoc_insertion_point(field_get:msg.g2c.AgentState.maxHP)
  return _internal_maxhp();
}
inline void AgentState::set_maxhp(float value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:msg.g2c.AgentState.maxHP)
}
inline float AgentState::_internal_maxhp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maxhp_;
}
inline void AgentState::_internal_set_maxhp(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxhp_ = value;
}

// -------------------------------------------------------------------

// ItemState

// uint64 id = 1;
inline void ItemState::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t ItemState::id() const {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.id)
  return _internal_id();
}
inline void ItemState::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.g2c.ItemState.id)
}
inline ::uint64_t ItemState::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void ItemState::_internal_set_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// .msg.g2c.Vector3D pos = 2;
inline bool ItemState::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline void ItemState::clear_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::g2c::Vector3D& ItemState::_internal_pos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& ItemState::pos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.pos)
  return _internal_pos();
}
inline void ItemState::unsafe_arena_set_allocated_pos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.ItemState.pos)
}
inline ::msg::g2c::Vector3D* ItemState::release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* released = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* ItemState::unsafe_arena_release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.ItemState.pos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* ItemState::_internal_mutable_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.pos_;
}
inline ::msg::g2c::Vector3D* ItemState::mutable_pos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msg.g2c.ItemState.pos)
  return _msg;
}
inline void ItemState::set_allocated_pos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.ItemState.pos)
}

// .msg.g2c.Vector3D rot = 3;
inline bool ItemState::has_rot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rot_ != nullptr);
  return value;
}
inline void ItemState::clear_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rot_ != nullptr) _impl_.rot_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::g2c::Vector3D& ItemState::_internal_rot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& ItemState::rot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.rot)
  return _internal_rot();
}
inline void ItemState::unsafe_arena_set_allocated_rot(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rot_);
  }
  _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.ItemState.rot)
}
inline ::msg::g2c::Vector3D* ItemState::release_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::Vector3D* released = _impl_.rot_;
  _impl_.rot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* ItemState::unsafe_arena_release_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.ItemState.rot)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::Vector3D* temp = _impl_.rot_;
  _impl_.rot_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* ItemState::_internal_mutable_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rot_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.rot_;
}
inline ::msg::g2c::Vector3D* ItemState::mutable_rot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_rot();
  // @@protoc_insertion_point(field_mutable:msg.g2c.ItemState.rot)
  return _msg;
}
inline void ItemState::set_allocated_rot(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rot_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.ItemState.rot)
}

// .msg.g2c.Vector3D size = 4;
inline bool ItemState::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline void ItemState::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::msg::g2c::Vector3D& ItemState::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& ItemState::size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.size)
  return _internal_size();
}
inline void ItemState::unsafe_arena_set_allocated_size(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.ItemState.size)
}
inline ::msg::g2c::Vector3D* ItemState::release_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msg::g2c::Vector3D* released = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* ItemState::unsafe_arena_release_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.ItemState.size)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msg::g2c::Vector3D* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* ItemState::_internal_mutable_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.size_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.size_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.size_;
}
inline ::msg::g2c::Vector3D* ItemState::mutable_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:msg.g2c.ItemState.size)
  return _msg;
}
inline void ItemState::set_allocated_size(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.size_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.ItemState.size)
}

// .msg.g2c.ShapeType shapeType = 5;
inline void ItemState::clear_shapetype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shapetype_ = 0;
}
inline ::msg::g2c::ShapeType ItemState::shapetype() const {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.shapeType)
  return _internal_shapetype();
}
inline void ItemState::set_shapetype(::msg::g2c::ShapeType value) {
  _internal_set_shapetype(value);
  // @@protoc_insertion_point(field_set:msg.g2c.ItemState.shapeType)
}
inline ::msg::g2c::ShapeType ItemState::_internal_shapetype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msg::g2c::ShapeType>(_impl_.shapetype_);
}
inline void ItemState::_internal_set_shapetype(::msg::g2c::ShapeType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shapetype_ = value;
}

// .msg.g2c.ItemFuncType funcType = 6;
inline void ItemState::clear_functype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.functype_ = 0;
}
inline ::msg::g2c::ItemFuncType ItemState::functype() const {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.funcType)
  return _internal_functype();
}
inline void ItemState::set_functype(::msg::g2c::ItemFuncType value) {
  _internal_set_functype(value);
  // @@protoc_insertion_point(field_set:msg.g2c.ItemState.funcType)
}
inline ::msg::g2c::ItemFuncType ItemState::_internal_functype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msg::g2c::ItemFuncType>(_impl_.functype_);
}
inline void ItemState::_internal_set_functype(::msg::g2c::ItemFuncType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.functype_ = value;
}

// .msg.g2c.Vector3D velocity = 7;
inline bool ItemState::has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline void ItemState::clear_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::msg::g2c::Vector3D& ItemState::_internal_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& ItemState::velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.velocity)
  return _internal_velocity();
}
inline void ItemState::unsafe_arena_set_allocated_velocity(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.ItemState.velocity)
}
inline ::msg::g2c::Vector3D* ItemState::release_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::msg::g2c::Vector3D* released = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* ItemState::unsafe_arena_release_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.ItemState.velocity)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::msg::g2c::Vector3D* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* ItemState::_internal_mutable_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.velocity_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.velocity_;
}
inline ::msg::g2c::Vector3D* ItemState::mutable_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:msg.g2c.ItemState.velocity)
  return _msg;
}
inline void ItemState::set_allocated_velocity(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.velocity_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.ItemState.velocity)
}

// .msg.g2c.Vector3D angularVelocity = 8;
inline bool ItemState::has_angularvelocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angularvelocity_ != nullptr);
  return value;
}
inline void ItemState::clear_angularvelocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angularvelocity_ != nullptr) _impl_.angularvelocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::msg::g2c::Vector3D& ItemState::_internal_angularvelocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.angularvelocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& ItemState::angularvelocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.angularVelocity)
  return _internal_angularvelocity();
}
inline void ItemState::unsafe_arena_set_allocated_angularvelocity(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angularvelocity_);
  }
  _impl_.angularvelocity_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.ItemState.angularVelocity)
}
inline ::msg::g2c::Vector3D* ItemState::release_angularvelocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::msg::g2c::Vector3D* released = _impl_.angularvelocity_;
  _impl_.angularvelocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* ItemState::unsafe_arena_release_angularvelocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.ItemState.angularVelocity)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::msg::g2c::Vector3D* temp = _impl_.angularvelocity_;
  _impl_.angularvelocity_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* ItemState::_internal_mutable_angularvelocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angularvelocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.angularvelocity_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.angularvelocity_;
}
inline ::msg::g2c::Vector3D* ItemState::mutable_angularvelocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_angularvelocity();
  // @@protoc_insertion_point(field_mutable:msg.g2c.ItemState.angularVelocity)
  return _msg;
}
inline void ItemState::set_allocated_angularvelocity(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.angularvelocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.angularvelocity_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.ItemState.angularVelocity)
}

// string itemFuncData = 9;
inline void ItemState::clear_itemfuncdata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.itemfuncdata_.ClearToEmpty();
}
inline const std::string& ItemState::itemfuncdata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.itemFuncData)
  return _internal_itemfuncdata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ItemState::set_itemfuncdata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.itemfuncdata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msg.g2c.ItemState.itemFuncData)
}
inline std::string* ItemState::mutable_itemfuncdata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_itemfuncdata();
  // @@protoc_insertion_point(field_mutable:msg.g2c.ItemState.itemFuncData)
  return _s;
}
inline const std::string& ItemState::_internal_itemfuncdata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.itemfuncdata_.Get();
}
inline void ItemState::_internal_set_itemfuncdata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.itemfuncdata_.Set(value, GetArena());
}
inline std::string* ItemState::_internal_mutable_itemfuncdata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.itemfuncdata_.Mutable( GetArena());
}
inline std::string* ItemState::release_itemfuncdata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.ItemState.itemFuncData)
  return _impl_.itemfuncdata_.Release();
}
inline void ItemState::set_allocated_itemfuncdata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.itemfuncdata_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.itemfuncdata_.IsDefault()) {
          _impl_.itemfuncdata_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.ItemState.itemFuncData)
}

// repeated .msg.g2c.ItemWayPoint wayPoints = 10;
inline int ItemState::_internal_waypoints_size() const {
  return _internal_waypoints().size();
}
inline int ItemState::waypoints_size() const {
  return _internal_waypoints_size();
}
inline void ItemState::clear_waypoints() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.waypoints_.Clear();
}
inline ::msg::g2c::ItemWayPoint* ItemState::mutable_waypoints(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msg.g2c.ItemState.wayPoints)
  return _internal_mutable_waypoints()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemWayPoint>* ItemState::mutable_waypoints()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msg.g2c.ItemState.wayPoints)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_waypoints();
}
inline const ::msg::g2c::ItemWayPoint& ItemState::waypoints(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.wayPoints)
  return _internal_waypoints().Get(index);
}
inline ::msg::g2c::ItemWayPoint* ItemState::add_waypoints() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msg::g2c::ItemWayPoint* _add = _internal_mutable_waypoints()->Add();
  // @@protoc_insertion_point(field_add:msg.g2c.ItemState.wayPoints)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemWayPoint>& ItemState::waypoints() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msg.g2c.ItemState.wayPoints)
  return _internal_waypoints();
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemWayPoint>&
ItemState::_internal_waypoints() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.waypoints_;
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemWayPoint>*
ItemState::_internal_mutable_waypoints() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.waypoints_;
}

// uint32 itemTemplateId = 11;
inline void ItemState::clear_itemtemplateid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.itemtemplateid_ = 0u;
}
inline ::uint32_t ItemState::itemtemplateid() const {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.itemTemplateId)
  return _internal_itemtemplateid();
}
inline void ItemState::set_itemtemplateid(::uint32_t value) {
  _internal_set_itemtemplateid(value);
  // @@protoc_insertion_point(field_set:msg.g2c.ItemState.itemTemplateId)
}
inline ::uint32_t ItemState::_internal_itemtemplateid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.itemtemplateid_;
}
inline void ItemState::_internal_set_itemtemplateid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.itemtemplateid_ = value;
}

// uint64 createByProp = 12;
inline void ItemState::clear_createbyprop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createbyprop_ = ::uint64_t{0u};
}
inline ::uint64_t ItemState::createbyprop() const {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.createByProp)
  return _internal_createbyprop();
}
inline void ItemState::set_createbyprop(::uint64_t value) {
  _internal_set_createbyprop(value);
  // @@protoc_insertion_point(field_set:msg.g2c.ItemState.createByProp)
}
inline ::uint64_t ItemState::_internal_createbyprop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.createbyprop_;
}
inline void ItemState::_internal_set_createbyprop(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createbyprop_ = value;
}

// uint32 propItemLevel = 13;
inline void ItemState::clear_propitemlevel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.propitemlevel_ = 0u;
}
inline ::uint32_t ItemState::propitemlevel() const {
  // @@protoc_insertion_point(field_get:msg.g2c.ItemState.propItemLevel)
  return _internal_propitemlevel();
}
inline void ItemState::set_propitemlevel(::uint32_t value) {
  _internal_set_propitemlevel(value);
  // @@protoc_insertion_point(field_set:msg.g2c.ItemState.propItemLevel)
}
inline ::uint32_t ItemState::_internal_propitemlevel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.propitemlevel_;
}
inline void ItemState::_internal_set_propitemlevel(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.propitemlevel_ = value;
}

// -------------------------------------------------------------------

// PropState

// uint64 id = 1;
inline void PropState::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t PropState::id() const {
  // @@protoc_insertion_point(field_get:msg.g2c.PropState.id)
  return _internal_id();
}
inline void PropState::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.g2c.PropState.id)
}
inline ::uint64_t PropState::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void PropState::_internal_set_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// .msg.g2c.Vector3D pos = 2;
inline bool PropState::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline void PropState::clear_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::g2c::Vector3D& PropState::_internal_pos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& PropState::pos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.PropState.pos)
  return _internal_pos();
}
inline void PropState::unsafe_arena_set_allocated_pos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.PropState.pos)
}
inline ::msg::g2c::Vector3D* PropState::release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* released = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* PropState::unsafe_arena_release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.PropState.pos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::Vector3D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* PropState::_internal_mutable_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.pos_;
}
inline ::msg::g2c::Vector3D* PropState::mutable_pos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msg.g2c.PropState.pos)
  return _msg;
}
inline void PropState::set_allocated_pos(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pos_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.PropState.pos)
}

// .msg.g2c.Vector3D rot = 3;
inline bool PropState::has_rot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rot_ != nullptr);
  return value;
}
inline void PropState::clear_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rot_ != nullptr) _impl_.rot_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::g2c::Vector3D& PropState::_internal_rot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& PropState::rot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.PropState.rot)
  return _internal_rot();
}
inline void PropState::unsafe_arena_set_allocated_rot(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rot_);
  }
  _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.PropState.rot)
}
inline ::msg::g2c::Vector3D* PropState::release_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::Vector3D* released = _impl_.rot_;
  _impl_.rot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* PropState::unsafe_arena_release_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.PropState.rot)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::Vector3D* temp = _impl_.rot_;
  _impl_.rot_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* PropState::_internal_mutable_rot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rot_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.rot_;
}
inline ::msg::g2c::Vector3D* PropState::mutable_rot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_rot();
  // @@protoc_insertion_point(field_mutable:msg.g2c.PropState.rot)
  return _msg;
}
inline void PropState::set_allocated_rot(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rot_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rot_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.PropState.rot)
}

// .msg.g2c.Vector3D size = 4;
inline bool PropState::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline void PropState::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::msg::g2c::Vector3D& PropState::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& PropState::size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.PropState.size)
  return _internal_size();
}
inline void PropState::unsafe_arena_set_allocated_size(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.PropState.size)
}
inline ::msg::g2c::Vector3D* PropState::release_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msg::g2c::Vector3D* released = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* PropState::unsafe_arena_release_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.PropState.size)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msg::g2c::Vector3D* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* PropState::_internal_mutable_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.size_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.size_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.size_;
}
inline ::msg::g2c::Vector3D* PropState::mutable_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:msg.g2c.PropState.size)
  return _msg;
}
inline void PropState::set_allocated_size(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.size_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.PropState.size)
}

// .msg.g2c.PropFuncType propFuncType = 5;
inline void PropState::clear_propfunctype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.propfunctype_ = 0;
}
inline ::msg::g2c::PropFuncType PropState::propfunctype() const {
  // @@protoc_insertion_point(field_get:msg.g2c.PropState.propFuncType)
  return _internal_propfunctype();
}
inline void PropState::set_propfunctype(::msg::g2c::PropFuncType value) {
  _internal_set_propfunctype(value);
  // @@protoc_insertion_point(field_set:msg.g2c.PropState.propFuncType)
}
inline ::msg::g2c::PropFuncType PropState::_internal_propfunctype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msg::g2c::PropFuncType>(_impl_.propfunctype_);
}
inline void PropState::_internal_set_propfunctype(::msg::g2c::PropFuncType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.propfunctype_ = value;
}

// .msg.g2c.PropUseType useType = 6;
inline void PropState::clear_usetype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usetype_ = 0;
}
inline ::msg::g2c::PropUseType PropState::usetype() const {
  // @@protoc_insertion_point(field_get:msg.g2c.PropState.useType)
  return _internal_usetype();
}
inline void PropState::set_usetype(::msg::g2c::PropUseType value) {
  _internal_set_usetype(value);
  // @@protoc_insertion_point(field_set:msg.g2c.PropState.useType)
}
inline ::msg::g2c::PropUseType PropState::_internal_usetype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msg::g2c::PropUseType>(_impl_.usetype_);
}
inline void PropState::_internal_set_usetype(::msg::g2c::PropUseType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usetype_ = value;
}

// uint32 durable = 7;
inline void PropState::clear_durable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.durable_ = 0u;
}
inline ::uint32_t PropState::durable() const {
  // @@protoc_insertion_point(field_get:msg.g2c.PropState.durable)
  return _internal_durable();
}
inline void PropState::set_durable(::uint32_t value) {
  _internal_set_durable(value);
  // @@protoc_insertion_point(field_set:msg.g2c.PropState.durable)
}
inline ::uint32_t PropState::_internal_durable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.durable_;
}
inline void PropState::_internal_set_durable(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.durable_ = value;
}

// uint32 cd = 8;
inline void PropState::clear_cd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cd_ = 0u;
}
inline ::uint32_t PropState::cd() const {
  // @@protoc_insertion_point(field_get:msg.g2c.PropState.cd)
  return _internal_cd();
}
inline void PropState::set_cd(::uint32_t value) {
  _internal_set_cd(value);
  // @@protoc_insertion_point(field_set:msg.g2c.PropState.cd)
}
inline ::uint32_t PropState::_internal_cd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cd_;
}
inline void PropState::_internal_set_cd(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cd_ = value;
}

// uint32 delayedDestroy = 9;
inline void PropState::clear_delayeddestroy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delayeddestroy_ = 0u;
}
inline ::uint32_t PropState::delayeddestroy() const {
  // @@protoc_insertion_point(field_get:msg.g2c.PropState.delayedDestroy)
  return _internal_delayeddestroy();
}
inline void PropState::set_delayeddestroy(::uint32_t value) {
  _internal_set_delayeddestroy(value);
  // @@protoc_insertion_point(field_set:msg.g2c.PropState.delayedDestroy)
}
inline ::uint32_t PropState::_internal_delayeddestroy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delayeddestroy_;
}
inline void PropState::_internal_set_delayeddestroy(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delayeddestroy_ = value;
}

// .msg.g2c.Vector3D speed = 10;
inline bool PropState::has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_ != nullptr);
  return value;
}
inline void PropState::clear_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_ != nullptr) _impl_.speed_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::msg::g2c::Vector3D& PropState::_internal_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::Vector3D* p = _impl_.speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::Vector3D&>(::msg::g2c::_Vector3D_default_instance_);
}
inline const ::msg::g2c::Vector3D& PropState::speed() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.PropState.speed)
  return _internal_speed();
}
inline void PropState::unsafe_arena_set_allocated_speed(::msg::g2c::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_);
  }
  _impl_.speed_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.PropState.speed)
}
inline ::msg::g2c::Vector3D* PropState::release_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::msg::g2c::Vector3D* released = _impl_.speed_;
  _impl_.speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::Vector3D* PropState::unsafe_arena_release_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.PropState.speed)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::msg::g2c::Vector3D* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
  return temp;
}
inline ::msg::g2c::Vector3D* PropState::_internal_mutable_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speed_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::Vector3D>(GetArena());
    _impl_.speed_ = reinterpret_cast<::msg::g2c::Vector3D*>(p);
  }
  return _impl_.speed_;
}
inline ::msg::g2c::Vector3D* PropState::mutable_speed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::msg::g2c::Vector3D* _msg = _internal_mutable_speed();
  // @@protoc_insertion_point(field_mutable:msg.g2c.PropState.speed)
  return _msg;
}
inline void PropState::set_allocated_speed(::msg::g2c::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.speed_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.speed_ = reinterpret_cast<::msg::g2c::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.PropState.speed)
}

// -------------------------------------------------------------------

// EventInfo

// uint32 id = 1;
inline void EventInfo::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
}
inline ::uint32_t EventInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.g2c.EventInfo.id)
  return _internal_id();
}
inline void EventInfo::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.g2c.EventInfo.id)
}
inline ::uint32_t EventInfo::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void EventInfo::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// .msg.g2c.EventType type = 2;
inline void EventInfo::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::msg::g2c::EventType EventInfo::type() const {
  // @@protoc_insertion_point(field_get:msg.g2c.EventInfo.type)
  return _internal_type();
}
inline void EventInfo::set_type(::msg::g2c::EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.g2c.EventInfo.type)
}
inline ::msg::g2c::EventType EventInfo::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msg::g2c::EventType>(_impl_.type_);
}
inline void EventInfo::_internal_set_type(::msg::g2c::EventType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// uint64 sourceAgentId = 3;
inline void EventInfo::clear_sourceagentid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sourceagentid_ = ::uint64_t{0u};
}
inline ::uint64_t EventInfo::sourceagentid() const {
  // @@protoc_insertion_point(field_get:msg.g2c.EventInfo.sourceAgentId)
  return _internal_sourceagentid();
}
inline void EventInfo::set_sourceagentid(::uint64_t value) {
  _internal_set_sourceagentid(value);
  // @@protoc_insertion_point(field_set:msg.g2c.EventInfo.sourceAgentId)
}
inline ::uint64_t EventInfo::_internal_sourceagentid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sourceagentid_;
}
inline void EventInfo::_internal_set_sourceagentid(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sourceagentid_ = value;
}

// uint64 targetAgentId = 4;
inline void EventInfo::clear_targetagentid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetagentid_ = ::uint64_t{0u};
}
inline ::uint64_t EventInfo::targetagentid() const {
  // @@protoc_insertion_point(field_get:msg.g2c.EventInfo.targetAgentId)
  return _internal_targetagentid();
}
inline void EventInfo::set_targetagentid(::uint64_t value) {
  _internal_set_targetagentid(value);
  // @@protoc_insertion_point(field_set:msg.g2c.EventInfo.targetAgentId)
}
inline ::uint64_t EventInfo::_internal_targetagentid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.targetagentid_;
}
inline void EventInfo::_internal_set_targetagentid(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetagentid_ = value;
}

// string eventData = 5;
inline void EventInfo::clear_eventdata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eventdata_.ClearToEmpty();
}
inline const std::string& EventInfo::eventdata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.EventInfo.eventData)
  return _internal_eventdata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventInfo::set_eventdata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eventdata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msg.g2c.EventInfo.eventData)
}
inline std::string* EventInfo::mutable_eventdata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_eventdata();
  // @@protoc_insertion_point(field_mutable:msg.g2c.EventInfo.eventData)
  return _s;
}
inline const std::string& EventInfo::_internal_eventdata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eventdata_.Get();
}
inline void EventInfo::_internal_set_eventdata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eventdata_.Set(value, GetArena());
}
inline std::string* EventInfo::_internal_mutable_eventdata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.eventdata_.Mutable( GetArena());
}
inline std::string* EventInfo::release_eventdata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.EventInfo.eventData)
  return _impl_.eventdata_.Release();
}
inline void EventInfo::set_allocated_eventdata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eventdata_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.eventdata_.IsDefault()) {
          _impl_.eventdata_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.EventInfo.eventData)
}

// -------------------------------------------------------------------

// FrameDatas

// float time = 1;
inline void FrameDatas::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = 0;
}
inline float FrameDatas::time() const {
  // @@protoc_insertion_point(field_get:msg.g2c.FrameDatas.time)
  return _internal_time();
}
inline void FrameDatas::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:msg.g2c.FrameDatas.time)
}
inline float FrameDatas::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_;
}
inline void FrameDatas::_internal_set_time(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = value;
}

// string triggerEvent = 2;
inline void FrameDatas::clear_triggerevent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggerevent_.ClearToEmpty();
}
inline const std::string& FrameDatas::triggerevent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.FrameDatas.triggerEvent)
  return _internal_triggerevent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FrameDatas::set_triggerevent(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggerevent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msg.g2c.FrameDatas.triggerEvent)
}
inline std::string* FrameDatas::mutable_triggerevent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_triggerevent();
  // @@protoc_insertion_point(field_mutable:msg.g2c.FrameDatas.triggerEvent)
  return _s;
}
inline const std::string& FrameDatas::_internal_triggerevent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.triggerevent_.Get();
}
inline void FrameDatas::_internal_set_triggerevent(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggerevent_.Set(value, GetArena());
}
inline std::string* FrameDatas::_internal_mutable_triggerevent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.triggerevent_.Mutable( GetArena());
}
inline std::string* FrameDatas::release_triggerevent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.FrameDatas.triggerEvent)
  return _impl_.triggerevent_.Release();
}
inline void FrameDatas::set_allocated_triggerevent(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggerevent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.triggerevent_.IsDefault()) {
          _impl_.triggerevent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.FrameDatas.triggerEvent)
}

// -------------------------------------------------------------------

// TimerState

// uint32 id = 1;
inline void TimerState::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
}
inline ::uint32_t TimerState::id() const {
  // @@protoc_insertion_point(field_get:msg.g2c.TimerState.id)
  return _internal_id();
}
inline void TimerState::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.g2c.TimerState.id)
}
inline ::uint32_t TimerState::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void TimerState::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// repeated .msg.g2c.FrameDatas frameDatas = 2;
inline int TimerState::_internal_framedatas_size() const {
  return _internal_framedatas().size();
}
inline int TimerState::framedatas_size() const {
  return _internal_framedatas_size();
}
inline void TimerState::clear_framedatas() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.framedatas_.Clear();
}
inline ::msg::g2c::FrameDatas* TimerState::mutable_framedatas(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msg.g2c.TimerState.frameDatas)
  return _internal_mutable_framedatas()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::FrameDatas>* TimerState::mutable_framedatas()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msg.g2c.TimerState.frameDatas)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_framedatas();
}
inline const ::msg::g2c::FrameDatas& TimerState::framedatas(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.TimerState.frameDatas)
  return _internal_framedatas().Get(index);
}
inline ::msg::g2c::FrameDatas* TimerState::add_framedatas() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msg::g2c::FrameDatas* _add = _internal_mutable_framedatas()->Add();
  // @@protoc_insertion_point(field_add:msg.g2c.TimerState.frameDatas)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::FrameDatas>& TimerState::framedatas() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msg.g2c.TimerState.frameDatas)
  return _internal_framedatas();
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::FrameDatas>&
TimerState::_internal_framedatas() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.framedatas_;
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::FrameDatas>*
TimerState::_internal_mutable_framedatas() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.framedatas_;
}

// bool isStart = 3;
inline void TimerState::clear_isstart() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isstart_ = false;
}
inline bool TimerState::isstart() const {
  // @@protoc_insertion_point(field_get:msg.g2c.TimerState.isStart)
  return _internal_isstart();
}
inline void TimerState::set_isstart(bool value) {
  _internal_set_isstart(value);
  // @@protoc_insertion_point(field_set:msg.g2c.TimerState.isStart)
}
inline bool TimerState::_internal_isstart() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isstart_;
}
inline void TimerState::_internal_set_isstart(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isstart_ = value;
}

// bool isEnd = 4;
inline void TimerState::clear_isend() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isend_ = false;
}
inline bool TimerState::isend() const {
  // @@protoc_insertion_point(field_get:msg.g2c.TimerState.isEnd)
  return _internal_isend();
}
inline void TimerState::set_isend(bool value) {
  _internal_set_isend(value);
  // @@protoc_insertion_point(field_set:msg.g2c.TimerState.isEnd)
}
inline bool TimerState::_internal_isend() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isend_;
}
inline void TimerState::_internal_set_isend(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isend_ = value;
}

// bool isLaunched = 5;
inline void TimerState::clear_islaunched() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.islaunched_ = false;
}
inline bool TimerState::islaunched() const {
  // @@protoc_insertion_point(field_get:msg.g2c.TimerState.isLaunched)
  return _internal_islaunched();
}
inline void TimerState::set_islaunched(bool value) {
  _internal_set_islaunched(value);
  // @@protoc_insertion_point(field_set:msg.g2c.TimerState.isLaunched)
}
inline bool TimerState::_internal_islaunched() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.islaunched_;
}
inline void TimerState::_internal_set_islaunched(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.islaunched_ = value;
}

// bool isPaused = 6;
inline void TimerState::clear_ispaused() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ispaused_ = false;
}
inline bool TimerState::ispaused() const {
  // @@protoc_insertion_point(field_get:msg.g2c.TimerState.isPaused)
  return _internal_ispaused();
}
inline void TimerState::set_ispaused(bool value) {
  _internal_set_ispaused(value);
  // @@protoc_insertion_point(field_set:msg.g2c.TimerState.isPaused)
}
inline bool TimerState::_internal_ispaused() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ispaused_;
}
inline void TimerState::_internal_set_ispaused(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ispaused_ = value;
}

// float currentTime = 7;
inline void TimerState::clear_currenttime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currenttime_ = 0;
}
inline float TimerState::currenttime() const {
  // @@protoc_insertion_point(field_get:msg.g2c.TimerState.currentTime)
  return _internal_currenttime();
}
inline void TimerState::set_currenttime(float value) {
  _internal_set_currenttime(value);
  // @@protoc_insertion_point(field_set:msg.g2c.TimerState.currentTime)
}
inline float TimerState::_internal_currenttime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.currenttime_;
}
inline void TimerState::_internal_set_currenttime(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currenttime_ = value;
}

// float targetTime = 8;
inline void TimerState::clear_targettime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targettime_ = 0;
}
inline float TimerState::targettime() const {
  // @@protoc_insertion_point(field_get:msg.g2c.TimerState.targetTime)
  return _internal_targettime();
}
inline void TimerState::set_targettime(float value) {
  _internal_set_targettime(value);
  // @@protoc_insertion_point(field_set:msg.g2c.TimerState.targetTime)
}
inline float TimerState::_internal_targettime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.targettime_;
}
inline void TimerState::_internal_set_targettime(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targettime_ = value;
}

// bool reClocking = 9;
inline void TimerState::clear_reclocking() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reclocking_ = false;
}
inline bool TimerState::reclocking() const {
  // @@protoc_insertion_point(field_get:msg.g2c.TimerState.reClocking)
  return _internal_reclocking();
}
inline void TimerState::set_reclocking(bool value) {
  _internal_set_reclocking(value);
  // @@protoc_insertion_point(field_set:msg.g2c.TimerState.reClocking)
}
inline bool TimerState::_internal_reclocking() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reclocking_;
}
inline void TimerState::_internal_set_reclocking(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reclocking_ = value;
}

// -------------------------------------------------------------------

// GameMassage

// .msg.g2c.GameMsgType messageType = 1;
inline void GameMassage::clear_messagetype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messagetype_ = 0;
}
inline ::msg::g2c::GameMsgType GameMassage::messagetype() const {
  // @@protoc_insertion_point(field_get:msg.g2c.GameMassage.messageType)
  return _internal_messagetype();
}
inline void GameMassage::set_messagetype(::msg::g2c::GameMsgType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:msg.g2c.GameMassage.messageType)
}
inline ::msg::g2c::GameMsgType GameMassage::_internal_messagetype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msg::g2c::GameMsgType>(_impl_.messagetype_);
}
inline void GameMassage::_internal_set_messagetype(::msg::g2c::GameMsgType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messagetype_ = value;
}

// .msg.g2c.GameGlobalInfo gameGlobalInfo = 2;
inline bool GameMassage::has_gameglobalinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gameglobalinfo_ != nullptr);
  return value;
}
inline void GameMassage::clear_gameglobalinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gameglobalinfo_ != nullptr) _impl_.gameglobalinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::g2c::GameGlobalInfo& GameMassage::_internal_gameglobalinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::GameGlobalInfo* p = _impl_.gameglobalinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::GameGlobalInfo&>(::msg::g2c::_GameGlobalInfo_default_instance_);
}
inline const ::msg::g2c::GameGlobalInfo& GameMassage::gameglobalinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GameMassage.gameGlobalInfo)
  return _internal_gameglobalinfo();
}
inline void GameMassage::unsafe_arena_set_allocated_gameglobalinfo(::msg::g2c::GameGlobalInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gameglobalinfo_);
  }
  _impl_.gameglobalinfo_ = reinterpret_cast<::msg::g2c::GameGlobalInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.GameMassage.gameGlobalInfo)
}
inline ::msg::g2c::GameGlobalInfo* GameMassage::release_gameglobalinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::GameGlobalInfo* released = _impl_.gameglobalinfo_;
  _impl_.gameglobalinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::GameGlobalInfo* GameMassage::unsafe_arena_release_gameglobalinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.GameMassage.gameGlobalInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msg::g2c::GameGlobalInfo* temp = _impl_.gameglobalinfo_;
  _impl_.gameglobalinfo_ = nullptr;
  return temp;
}
inline ::msg::g2c::GameGlobalInfo* GameMassage::_internal_mutable_gameglobalinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gameglobalinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::GameGlobalInfo>(GetArena());
    _impl_.gameglobalinfo_ = reinterpret_cast<::msg::g2c::GameGlobalInfo*>(p);
  }
  return _impl_.gameglobalinfo_;
}
inline ::msg::g2c::GameGlobalInfo* GameMassage::mutable_gameglobalinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msg::g2c::GameGlobalInfo* _msg = _internal_mutable_gameglobalinfo();
  // @@protoc_insertion_point(field_mutable:msg.g2c.GameMassage.gameGlobalInfo)
  return _msg;
}
inline void GameMassage::set_allocated_gameglobalinfo(::msg::g2c::GameGlobalInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gameglobalinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gameglobalinfo_ = reinterpret_cast<::msg::g2c::GameGlobalInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.GameMassage.gameGlobalInfo)
}

// .msg.g2c.GameInfo gameInfo = 3;
inline bool GameMassage::has_gameinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gameinfo_ != nullptr);
  return value;
}
inline void GameMassage::clear_gameinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gameinfo_ != nullptr) _impl_.gameinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::g2c::GameInfo& GameMassage::_internal_gameinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::GameInfo* p = _impl_.gameinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::GameInfo&>(::msg::g2c::_GameInfo_default_instance_);
}
inline const ::msg::g2c::GameInfo& GameMassage::gameinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GameMassage.gameInfo)
  return _internal_gameinfo();
}
inline void GameMassage::unsafe_arena_set_allocated_gameinfo(::msg::g2c::GameInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gameinfo_);
  }
  _impl_.gameinfo_ = reinterpret_cast<::msg::g2c::GameInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.GameMassage.gameInfo)
}
inline ::msg::g2c::GameInfo* GameMassage::release_gameinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::GameInfo* released = _impl_.gameinfo_;
  _impl_.gameinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::GameInfo* GameMassage::unsafe_arena_release_gameinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.GameMassage.gameInfo)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msg::g2c::GameInfo* temp = _impl_.gameinfo_;
  _impl_.gameinfo_ = nullptr;
  return temp;
}
inline ::msg::g2c::GameInfo* GameMassage::_internal_mutable_gameinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gameinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::GameInfo>(GetArena());
    _impl_.gameinfo_ = reinterpret_cast<::msg::g2c::GameInfo*>(p);
  }
  return _impl_.gameinfo_;
}
inline ::msg::g2c::GameInfo* GameMassage::mutable_gameinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::msg::g2c::GameInfo* _msg = _internal_mutable_gameinfo();
  // @@protoc_insertion_point(field_mutable:msg.g2c.GameMassage.gameInfo)
  return _msg;
}
inline void GameMassage::set_allocated_gameinfo(::msg::g2c::GameInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gameinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.gameinfo_ = reinterpret_cast<::msg::g2c::GameInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.GameMassage.gameInfo)
}

// .msg.g2c.GameState gameState = 4;
inline bool GameMassage::has_gamestate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gamestate_ != nullptr);
  return value;
}
inline void GameMassage::clear_gamestate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gamestate_ != nullptr) _impl_.gamestate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::msg::g2c::GameState& GameMassage::_internal_gamestate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msg::g2c::GameState* p = _impl_.gamestate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::g2c::GameState&>(::msg::g2c::_GameState_default_instance_);
}
inline const ::msg::g2c::GameState& GameMassage::gamestate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GameMassage.gameState)
  return _internal_gamestate();
}
inline void GameMassage::unsafe_arena_set_allocated_gamestate(::msg::g2c::GameState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gamestate_);
  }
  _impl_.gamestate_ = reinterpret_cast<::msg::g2c::GameState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.g2c.GameMassage.gameState)
}
inline ::msg::g2c::GameState* GameMassage::release_gamestate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msg::g2c::GameState* released = _impl_.gamestate_;
  _impl_.gamestate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::msg::g2c::GameState* GameMassage::unsafe_arena_release_gamestate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msg.g2c.GameMassage.gameState)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msg::g2c::GameState* temp = _impl_.gamestate_;
  _impl_.gamestate_ = nullptr;
  return temp;
}
inline ::msg::g2c::GameState* GameMassage::_internal_mutable_gamestate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gamestate_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msg::g2c::GameState>(GetArena());
    _impl_.gamestate_ = reinterpret_cast<::msg::g2c::GameState*>(p);
  }
  return _impl_.gamestate_;
}
inline ::msg::g2c::GameState* GameMassage::mutable_gamestate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::msg::g2c::GameState* _msg = _internal_mutable_gamestate();
  // @@protoc_insertion_point(field_mutable:msg.g2c.GameMassage.gameState)
  return _msg;
}
inline void GameMassage::set_allocated_gamestate(::msg::g2c::GameState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gamestate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.gamestate_ = reinterpret_cast<::msg::g2c::GameState*>(value);
  // @@protoc_insertion_point(field_set_allocated:msg.g2c.GameMassage.gameState)
}

// repeated .msg.g2c.AgentState agentsState = 5;
inline int GameMassage::_internal_agentsstate_size() const {
  return _internal_agentsstate().size();
}
inline int GameMassage::agentsstate_size() const {
  return _internal_agentsstate_size();
}
inline void GameMassage::clear_agentsstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.agentsstate_.Clear();
}
inline ::msg::g2c::AgentState* GameMassage::mutable_agentsstate(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msg.g2c.GameMassage.agentsState)
  return _internal_mutable_agentsstate()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::AgentState>* GameMassage::mutable_agentsstate()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msg.g2c.GameMassage.agentsState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_agentsstate();
}
inline const ::msg::g2c::AgentState& GameMassage::agentsstate(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GameMassage.agentsState)
  return _internal_agentsstate().Get(index);
}
inline ::msg::g2c::AgentState* GameMassage::add_agentsstate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msg::g2c::AgentState* _add = _internal_mutable_agentsstate()->Add();
  // @@protoc_insertion_point(field_add:msg.g2c.GameMassage.agentsState)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::AgentState>& GameMassage::agentsstate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msg.g2c.GameMassage.agentsState)
  return _internal_agentsstate();
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::AgentState>&
GameMassage::_internal_agentsstate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.agentsstate_;
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::AgentState>*
GameMassage::_internal_mutable_agentsstate() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.agentsstate_;
}

// repeated .msg.g2c.ItemState itemsState = 6;
inline int GameMassage::_internal_itemsstate_size() const {
  return _internal_itemsstate().size();
}
inline int GameMassage::itemsstate_size() const {
  return _internal_itemsstate_size();
}
inline void GameMassage::clear_itemsstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.itemsstate_.Clear();
}
inline ::msg::g2c::ItemState* GameMassage::mutable_itemsstate(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msg.g2c.GameMassage.itemsState)
  return _internal_mutable_itemsstate()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemState>* GameMassage::mutable_itemsstate()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msg.g2c.GameMassage.itemsState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_itemsstate();
}
inline const ::msg::g2c::ItemState& GameMassage::itemsstate(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GameMassage.itemsState)
  return _internal_itemsstate().Get(index);
}
inline ::msg::g2c::ItemState* GameMassage::add_itemsstate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msg::g2c::ItemState* _add = _internal_mutable_itemsstate()->Add();
  // @@protoc_insertion_point(field_add:msg.g2c.GameMassage.itemsState)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemState>& GameMassage::itemsstate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msg.g2c.GameMassage.itemsState)
  return _internal_itemsstate();
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemState>&
GameMassage::_internal_itemsstate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.itemsstate_;
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::ItemState>*
GameMassage::_internal_mutable_itemsstate() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.itemsstate_;
}

// repeated .msg.g2c.PropState propsState = 7;
inline int GameMassage::_internal_propsstate_size() const {
  return _internal_propsstate().size();
}
inline int GameMassage::propsstate_size() const {
  return _internal_propsstate_size();
}
inline void GameMassage::clear_propsstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.propsstate_.Clear();
}
inline ::msg::g2c::PropState* GameMassage::mutable_propsstate(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msg.g2c.GameMassage.propsState)
  return _internal_mutable_propsstate()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::PropState>* GameMassage::mutable_propsstate()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msg.g2c.GameMassage.propsState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_propsstate();
}
inline const ::msg::g2c::PropState& GameMassage::propsstate(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GameMassage.propsState)
  return _internal_propsstate().Get(index);
}
inline ::msg::g2c::PropState* GameMassage::add_propsstate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msg::g2c::PropState* _add = _internal_mutable_propsstate()->Add();
  // @@protoc_insertion_point(field_add:msg.g2c.GameMassage.propsState)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::PropState>& GameMassage::propsstate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msg.g2c.GameMassage.propsState)
  return _internal_propsstate();
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::PropState>&
GameMassage::_internal_propsstate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.propsstate_;
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::PropState>*
GameMassage::_internal_mutable_propsstate() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.propsstate_;
}

// repeated .msg.g2c.EventInfo eventsInfo = 8;
inline int GameMassage::_internal_eventsinfo_size() const {
  return _internal_eventsinfo().size();
}
inline int GameMassage::eventsinfo_size() const {
  return _internal_eventsinfo_size();
}
inline void GameMassage::clear_eventsinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eventsinfo_.Clear();
}
inline ::msg::g2c::EventInfo* GameMassage::mutable_eventsinfo(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msg.g2c.GameMassage.eventsInfo)
  return _internal_mutable_eventsinfo()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::EventInfo>* GameMassage::mutable_eventsinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msg.g2c.GameMassage.eventsInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_eventsinfo();
}
inline const ::msg::g2c::EventInfo& GameMassage::eventsinfo(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GameMassage.eventsInfo)
  return _internal_eventsinfo().Get(index);
}
inline ::msg::g2c::EventInfo* GameMassage::add_eventsinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msg::g2c::EventInfo* _add = _internal_mutable_eventsinfo()->Add();
  // @@protoc_insertion_point(field_add:msg.g2c.GameMassage.eventsInfo)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::EventInfo>& GameMassage::eventsinfo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msg.g2c.GameMassage.eventsInfo)
  return _internal_eventsinfo();
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::EventInfo>&
GameMassage::_internal_eventsinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eventsinfo_;
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::EventInfo>*
GameMassage::_internal_mutable_eventsinfo() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.eventsinfo_;
}

// repeated .msg.g2c.TimerState timersState = 9;
inline int GameMassage::_internal_timersstate_size() const {
  return _internal_timersstate().size();
}
inline int GameMassage::timersstate_size() const {
  return _internal_timersstate_size();
}
inline void GameMassage::clear_timersstate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timersstate_.Clear();
}
inline ::msg::g2c::TimerState* GameMassage::mutable_timersstate(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msg.g2c.GameMassage.timersState)
  return _internal_mutable_timersstate()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::TimerState>* GameMassage::mutable_timersstate()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msg.g2c.GameMassage.timersState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_timersstate();
}
inline const ::msg::g2c::TimerState& GameMassage::timersstate(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msg.g2c.GameMassage.timersState)
  return _internal_timersstate().Get(index);
}
inline ::msg::g2c::TimerState* GameMassage::add_timersstate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msg::g2c::TimerState* _add = _internal_mutable_timersstate()->Add();
  // @@protoc_insertion_point(field_add:msg.g2c.GameMassage.timersState)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::TimerState>& GameMassage::timersstate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msg.g2c.GameMassage.timersState)
  return _internal_timersstate();
}
inline const ::google::protobuf::RepeatedPtrField<::msg::g2c::TimerState>&
GameMassage::_internal_timersstate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timersstate_;
}
inline ::google::protobuf::RepeatedPtrField<::msg::g2c::TimerState>*
GameMassage::_internal_mutable_timersstate() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.timersstate_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace g2c
}  // namespace msg


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::msg::g2c::CMD2C> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msg::g2c::CMD2C>() {
  return ::msg::g2c::CMD2C_descriptor();
}
template <>
struct is_proto_enum<::msg::g2c::GameMsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msg::g2c::GameMsgType>() {
  return ::msg::g2c::GameMsgType_descriptor();
}
template <>
struct is_proto_enum<::msg::g2c::AnimationStateType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msg::g2c::AnimationStateType>() {
  return ::msg::g2c::AnimationStateType_descriptor();
}
template <>
struct is_proto_enum<::msg::g2c::ShapeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msg::g2c::ShapeType>() {
  return ::msg::g2c::ShapeType_descriptor();
}
template <>
struct is_proto_enum<::msg::g2c::ItemFuncType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msg::g2c::ItemFuncType>() {
  return ::msg::g2c::ItemFuncType_descriptor();
}
template <>
struct is_proto_enum<::msg::g2c::EventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msg::g2c::EventType>() {
  return ::msg::g2c::EventType_descriptor();
}
template <>
struct is_proto_enum<::msg::g2c::MapType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msg::g2c::MapType>() {
  return ::msg::g2c::MapType_descriptor();
}
template <>
struct is_proto_enum<::msg::g2c::PropFuncType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msg::g2c::PropFuncType>() {
  return ::msg::g2c::PropFuncType_descriptor();
}
template <>
struct is_proto_enum<::msg::g2c::PropUseType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msg::g2c::PropUseType>() {
  return ::msg::g2c::PropUseType_descriptor();
}
template <>
struct is_proto_enum<::msg::g2c::GamePointType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msg::g2c::GamePointType>() {
  return ::msg::g2c::GamePointType_descriptor();
}
template <>
struct is_proto_enum<::msg::g2c::EndGameType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msg::g2c::EndGameType>() {
  return ::msg::g2c::EndGameType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_KoalaAI_5fG2C_2eproto_2epb_2eh
